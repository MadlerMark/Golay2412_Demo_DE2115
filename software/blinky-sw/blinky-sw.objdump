
blinky-sw.elf:     file format elf32-littlenios2
blinky-sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080230

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000117e8 memsz 0x000117e8 flags r-x
    LOAD off    0x00012808 vaddr 0x00091808 paddr 0x00093e34 align 2**12
         filesz 0x0000262c memsz 0x0000262c flags rw-
    LOAD off    0x00015460 vaddr 0x00096460 paddr 0x00096460 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011124  00080230  00080230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b4  00091354  00091354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000262c  00091808  00093e34  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00096460  00096460  00015460  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000965c0  000965c0  00014e34  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014e34  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f98  00000000  00000000  00014e58  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026b91  00000000  00000000  00015df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009b03  00000000  00000000  0003c981  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c1e7  00000000  00000000  00046484  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002470  00000000  00000000  0005266c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003b0b  00000000  00000000  00054adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017da7  00000000  00000000  000585e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00070390  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019c0  00000000  00000000  000703a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00075076  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00075079  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007507c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007507d  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0007507e  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00075087  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00075090  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00075099  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001e  00000000  00000000  0007509f  2**0
                  CONTENTS, READONLY
 26 .jdi          00004428  00000000  00000000  000750bd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0004965c  00000000  00000000  000794e5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080230 l    d  .text	00000000 .text
00091354 l    d  .rodata	00000000 .rodata
00091808 l    d  .rwdata	00000000 .rwdata
00096460 l    d  .bss	00000000 .bss
000965c0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../blinky-sw_bsp//obj/HAL/src/crt0.o
00080268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 blinky.c
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00091556 l     O .rodata	00000010 zeroes.4404
000840c8 l     F .text	000000bc __sbprintf
00091566 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000842d8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00085e30 l     F .text	00000008 __fp_unlock
00085e44 l     F .text	0000019c __sinit.part.1
00085fe0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00092348 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0009278c l     O .rwdata	00000020 lc_ctype_charset
0009276c l     O .rwdata	00000020 lc_message_charset
000927ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00091598 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0008961c l     F .text	000000fc __sprint_r.part.0
000916bc l     O .rodata	00000010 zeroes.4349
0008ac58 l     F .text	000000bc __sbprintf
000916cc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008ebd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008ece4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008ed10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008ee04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008eeec l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008efd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_read.c
0008f1f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00093e24 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0008f464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008f5a0 l     F .text	00000034 alt_dev_reg
00092d94 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008f878 l     F .text	0000020c altera_avalon_jtag_uart_irq
0008fa84 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00090208 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00090668 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000907c8 l     F .text	0000003c alt_get_errno
00090804 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00096494 g     O .bss	00000004 alt_instruction_exception_handler
00081bd0 g     F .text	00000018 putchar
00088af8 g     F .text	00000074 _mprec_log10
00088be4 g     F .text	0000008c __any_on
0008b364 g     F .text	00000054 _isatty_r
000915a4 g     O .rodata	00000028 __mprec_tinytens
0008f0f0 g     F .text	0000007c alt_main
00081be8 g     F .text	000000c0 _puts_r
000964c0 g     O .bss	00000100 alt_irq
0008b3b8 g     F .text	00000060 _lseek_r
00093e34 g       *ABS*	00000000 __flash_rwdata_start
0008d5a8 g     F .text	00000088 .hidden __eqdf2
0008026c g     F .text	000000bc print
000965c0 g       *ABS*	00000000 __alt_heap_start
00081b8c g     F .text	0000003c printf
0008b478 g     F .text	0000009c _wcrtomb_r
000894dc g     F .text	0000005c __sseek
00086190 g     F .text	00000010 __sinit
0008ad14 g     F .text	00000140 __swbuf_r
00086c64 g     F .text	0000007c _setlocale_r
00085fe8 g     F .text	00000078 __sfmoreglue
0008f190 g     F .text	00000024 __malloc_unlock
00087934 g     F .text	0000015c memmove
00086178 g     F .text	00000018 _cleanup
00087bb8 g     F .text	000000a8 _Balloc
0008f1b4 g     F .text	0000003c alt_putstr
0008d630 g     F .text	000000dc .hidden __gtdf2
00090bf0 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008b308 g     F .text	0000005c _fstat_r
00096478 g     O .bss	00000004 errno
00080a50 g     F .text	000000e8 transpose
00089458 g     F .text	00000008 __seofread
00080328 g     F .text	000000d8 print2D_toLCD
00096480 g     O .bss	00000004 alt_argv
0009bdf4 g       *ABS*	00000000 _gp
00092c14 g     O .rwdata	00000180 alt_fd_list
00081bc8 g     F .text	00000008 _putchar_r
00090c14 g     F .text	00000090 alt_find_dev
00091c88 g     O .rwdata	00000240 A
000877ec g     F .text	00000148 memcpy
00080880 g     F .text	000000e8 Array_Add
00085e38 g     F .text	0000000c _cleanup_r
0008e9e8 g     F .text	000000dc .hidden __floatsidf
0009074c g     F .text	0000007c alt_io_redirect
0008d70c g     F .text	000000f4 .hidden __ltdf2
00091354 g       *ABS*	00000000 __DTOR_END__
00081ca8 g     F .text	00000014 puts
00090e70 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0008933c g     F .text	00000074 __fpclassifyd
00088a54 g     F .text	000000a4 __ratio
0008ac3c g     F .text	0000001c __vfiprintf_internal
0008fc7c g     F .text	0000021c altera_avalon_jtag_uart_read
00081b5c g     F .text	00000030 _printf_r
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00081a78 g     F .text	00000064 .hidden __udivsi3
0008ee40 g     F .text	000000ac isatty
000915f4 g     O .rodata	000000c8 __mprec_tens
00086ce0 g     F .text	0000000c __locale_charset
00096474 g     O .bss	00000004 __malloc_top_pad
00080580 g     F .text	00000180 matrixMultiply24_12
00093dfc g     O .rwdata	00000004 __mb_cur_max
00086d10 g     F .text	0000000c _localeconv_r
00087fec g     F .text	0000003c __i2b
00086614 g     F .text	000004c8 __sfvwrite_r
000816e0 g     F .text	0000010c Init_LCD
000893b0 g     F .text	00000054 _sbrk_r
0008b418 g     F .text	00000060 _read_r
00093e1c g     O .rwdata	00000004 alt_max_fd
0008affc g     F .text	000000f0 _fclose_r
00085e00 g     F .text	00000030 fflush
00096470 g     O .bss	00000004 __malloc_max_sbrked_mem
0008c32c g     F .text	000008ac .hidden __adddf3
000887fc g     F .text	0000010c __b2d
0008bd68 g     F .text	000005c4 .hidden __umoddi3
0008f014 g     F .text	000000dc lseek
00093df4 g     O .rwdata	00000004 _global_impure_ptr
00088dd8 g     F .text	00000564 _realloc_r
000965c0 g       *ABS*	00000000 __bss_end
00090578 g     F .text	000000f0 alt_iic_isr_register
00090ae8 g     F .text	00000108 alt_tick
0008b76c g     F .text	000005fc .hidden __udivdi3
0008b264 g     F .text	00000024 _fputwc_r
000915cc g     O .rodata	00000028 __mprec_bigtens
00087dd0 g     F .text	00000104 __s2b
0008eac4 g     F .text	000000a8 .hidden __floatunsidf
0008853c g     F .text	00000060 __mcmp
000861b0 g     F .text	00000018 __fp_lock_all
0009052c g     F .text	0000004c alt_ic_irq_enabled
00090a4c g     F .text	0000009c alt_alarm_stop
00096488 g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d4 alt_irq_handler
00092bec g     O .rwdata	00000028 alt_dev_null
000901e8 g     F .text	00000020 alt_dcache_flush_all
00087ed4 g     F .text	00000068 __hi0bits
0008e968 g     F .text	00000080 .hidden __fixdfsi
00093e34 g       *ABS*	00000000 __ram_rwdata_end
00093e14 g     O .rwdata	00000008 alt_dev_list
0008f4a0 g     F .text	00000100 write
00088c70 g     F .text	000000a0 _putc_r
00091808 g       *ABS*	00000000 __ram_rodata_end
0008ed4c g     F .text	000000b8 fstat
0008d70c g     F .text	000000f4 .hidden __ledf2
000882b4 g     F .text	00000140 __pow5mult
00089730 g     F .text	0000150c ___vfiprintf_internal_r
00096468 g     O .bss	00000004 __nlocale_changed
00081adc g     F .text	00000058 .hidden __umodsi3
000965c0 g       *ABS*	00000000 end
0008f7b8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00080400 g     F .text	00000180 matrixMultiply12_24
00091354 g       *ABS*	00000000 __CTOR_LIST__
000e0000 g       *ABS*	00000000 __alt_stack_pointer
0008eb6c g     F .text	00000064 .hidden __clzsi2
0008fe98 g     F .text	00000224 altera_avalon_jtag_uart_write
000861a0 g     F .text	00000004 __sfp_lock_acquire
00087708 g     F .text	000000e4 memchr
00081dd0 g     F .text	000022dc ___vfprintf_internal_r
00086304 g     F .text	00000310 _free_r
00086cec g     F .text	00000010 __locale_mb_cur_max
000911a0 g     F .text	00000180 __call_exitprocs
00096464 g     O .bss	00000004 __mlocale_changed
00093e00 g     O .rwdata	00000004 __malloc_sbrk_base
00080230 g     F .text	0000003c _start
0009648c g     O .bss	00000004 _alt_tick_rate
00080700 g     F .text	00000180 matrixMultiply12_12
00081cd4 g     F .text	00000064 rand
000883f4 g     F .text	00000148 __lshift
00096490 g     O .bss	00000004 _alt_nticks
0008f22c g     F .text	00000104 read
0008f60c g     F .text	00000048 alt_sys_init
00091088 g     F .text	00000118 __register_exitproc
00088028 g     F .text	0000028c __multiply
0008fb24 g     F .text	00000068 altera_avalon_jtag_uart_close
00081b34 g     F .text	00000028 .hidden __mulsi3
00091808 g       *ABS*	00000000 __ram_rwdata_start
00091354 g       *ABS*	00000000 __ram_rodata_start
00096498 g     O .bss	00000028 __malloc_current_mallinfo
00088908 g     F .text	0000014c __d2b
00091808 g     O .rwdata	00000480 G
0008f654 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00090dac g     F .text	000000c4 alt_get_fd
000817ec g     F .text	00000050 clear_display
0008aecc g     F .text	00000054 _close_r
0009100c g     F .text	0000007c memcmp
0008f714 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000965c0 g       *ABS*	00000000 __alt_stack_base
0008f764 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0008167c g     F .text	00000064 delay1ms
00084184 g     F .text	00000154 __swsetup_r
0008cbd8 g     F .text	000009d0 .hidden __divdf3
00086060 g     F .text	00000118 __sfp
00088b6c g     F .text	00000078 __copybits
000927e4 g     O .rwdata	00000408 __malloc_av_
000861ac g     F .text	00000004 __sinit_lock_release
0008d800 g     F .text	0000086c .hidden __muldf3
00089404 g     F .text	00000054 __sread
00090ca4 g     F .text	00000108 alt_find_file
00090244 g     F .text	000000a4 alt_dev_llist_insert
0008f16c g     F .text	00000024 __malloc_lock
0008f3b4 g     F .text	000000b0 sbrk
00085da4 g     F .text	0000005c _fflush_r
0008af20 g     F .text	000000dc _calloc_r
00096460 g       *ABS*	00000000 __bss_start
00087a90 g     F .text	00000128 memset
00080bb4 g     F .text	00000ac8 main
00096484 g     O .bss	00000004 alt_envp
0009646c g     O .bss	00000004 __malloc_max_total_mem
0008f6b4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008ae54 g     F .text	00000018 __swbuf
00081cbc g     F .text	00000018 srand
00089538 g     F .text	00000008 __sclose
000e0000 g       *ABS*	00000000 __alt_heap_limit
0008b0ec g     F .text	00000014 fclose
00091ec8 g     O .rwdata	00000480 H
00084500 g     F .text	00001688 _dtoa_r
00086efc g     F .text	0000080c _malloc_r
0008b5d4 g     F .text	00000030 __ascii_wctomb
00080968 g     F .text	000000e8 Array_Add24
00093e20 g     O .rwdata	00000004 alt_errno
00086adc g     F .text	000000c4 _fwalk
00088d10 g     F .text	000000c8 putc
00081980 g     F .text	00000084 .hidden __divsi3
000861e0 g     F .text	00000124 _malloc_trim_r
00091354 g       *ABS*	00000000 __CTOR_END__
00089540 g     F .text	000000dc strcmp
00091354 g       *ABS*	00000000 __flash_rodata_start
00091354 g       *ABS*	00000000 __DTOR_LIST__
0008d5a8 g     F .text	00000088 .hidden __nedf2
0008f5d4 g     F .text	00000038 alt_irq_init
0008f330 g     F .text	00000084 alt_release_fd
000916dc g     O .rodata	00000100 .hidden __clz_tab
00096460 g     O .bss	00000004 _PathLocale
00090f0c g     F .text	00000014 atexit
0008ae6c g     F .text	00000060 _write_r
00086d1c g     F .text	00000018 setlocale
00093df8 g     O .rwdata	00000004 _impure_ptr
0009647c g     O .bss	00000004 alt_argc
00085b88 g     F .text	0000021c __sflush_r
00090348 g     F .text	00000060 _do_dtors
00086d08 g     F .text	00000008 __locale_cjk_lang
00080020 g       .exceptions	00000000 alt_irq_entry
00088798 g     F .text	00000064 __ulp
000861c8 g     F .text	00000018 __fp_unlock_all
00093e0c g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00086d34 g     F .text	0000000c localeconv
000903c8 g     F .text	00000050 alt_ic_isr_register
00093e34 g       *ABS*	00000000 _edata
000965c0 g       *ABS*	00000000 _end
0008b100 g     F .text	00000164 __fputwc
00080230 g       *ABS*	00000000 __ram_exceptions_end
0008fb8c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00090f58 g     F .text	0000009c _fputs_r
000904a0 g     F .text	0000008c alt_ic_irq_disable
00089460 g     F .text	0000007c __swrite
00093e04 g     O .rwdata	00000004 __malloc_trim_threshold
00086cfc g     F .text	0000000c __locale_msgcharset
00090f20 g     F .text	00000038 exit
00086ba0 g     F .text	000000c4 _fwalk_reent
0008859c g     F .text	000001fc __mdiff
00081920 g     F .text	00000060 set_position
00081a04 g     F .text	00000074 .hidden __modsi3
000e0000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000861a4 g     F .text	00000004 __sfp_lock_release
0008189c g     F .text	00000084 write_string
00091320 g     F .text	00000034 _exit
000900bc g     F .text	0000012c alt_alarm_start
0008b660 g     F .text	0000010c .hidden __muldi3
00086d40 g     F .text	000001bc __smakebuf_r
00081d38 g     F .text	00000098 strlen
000908f0 g     F .text	0000015c open
0008d630 g     F .text	000000dc .hidden __gedf2
00093e08 g     O .rwdata	00000004 __wctomb
00089718 g     F .text	00000018 __sprint_r
000903a8 g     F .text	00000020 alt_icache_flush_all
0008183c g     F .text	00000060 write_char
00090ff4 g     F .text	00000018 fputs
00093e28 g     O .rwdata	00000004 alt_priority_mask
00090418 g     F .text	00000088 alt_ic_irq_enable
000840ac g     F .text	0000001c __vfprintf_internal
0008b604 g     F .text	0000005c _wctomb_r
0008e06c g     F .text	000008fc .hidden __subdf3
00087f3c g     F .text	000000b0 __lo0bits
00093e2c g     O .rwdata	00000008 alt_alarm_list
00080b38 g     F .text	0000007c weight
000902e8 g     F .text	00000060 _do_ctors
0008b514 g     F .text	000000c0 wcrtomb
0008ec0c g     F .text	000000d8 close
0008ef54 g     F .text	00000084 alt_load
0008b288 g     F .text	00000080 fputwc
000861a8 g     F .text	00000004 __sinit_lock_acquire
00087c88 g     F .text	00000148 __multadd
00087c60 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08408c14 	ori	at,at,560
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10993004 	addi	r2,r2,25792
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10993004 	addi	r2,r2,25792
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfffa012c>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfffa0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   801e4:	00bfffc4 	movi	r2,-1
   801e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   801ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   801f0:	d0a9a817 	ldw	r2,-22880(gp)
   801f4:	10000726 	beq	r2,zero,80214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   801f8:	d0a9a817 	ldw	r2,-22880(gp)
   801fc:	e0fffd17 	ldw	r3,-12(fp)
   80200:	e1bffe17 	ldw	r6,-8(fp)
   80204:	e17fff17 	ldw	r5,-4(fp)
   80208:	1809883a 	mov	r4,r3
   8020c:	103ee83a 	callr	r2
   80210:	00000206 	br	8021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80218:	0005883a 	mov	r2,zero
}
   8021c:	e037883a 	mov	sp,fp
   80220:	dfc00117 	ldw	ra,4(sp)
   80224:	df000017 	ldw	fp,0(sp)
   80228:	dec00204 	addi	sp,sp,8
   8022c:	f800283a 	ret

Disassembly of section .text:

00080230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80230:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   80234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   80238:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   8023c:	d6af7d14 	ori	gp,gp,48628
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80240:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80244:	10991814 	ori	r2,r2,25696

    movhi r3, %hi(__bss_end)
   80248:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   8024c:	18d97014 	ori	r3,r3,26048

    beq r2, r3, 1f
   80250:	10c00326 	beq	r2,r3,80260 <_start+0x30>

0:
    stw zero, (r2)
   80254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8025c:	10fffd36 	bltu	r2,r3,80254 <__alt_data_end+0xfffa0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80260:	008ef540 	call	8ef54 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80264:	008f0f00 	call	8f0f0 <alt_main>

00080268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80268:	003fff06 	br	80268 <__alt_data_end+0xfffa0268>

0008026c <print>:
#define N 12
#define P 24

//MxN array
void print(int *arr, int m, int n)
{
   8026c:	defff904 	addi	sp,sp,-28
   80270:	dfc00615 	stw	ra,24(sp)
   80274:	df000515 	stw	fp,20(sp)
   80278:	df000504 	addi	fp,sp,20
   8027c:	e13ffd15 	stw	r4,-12(fp)
   80280:	e17ffe15 	stw	r5,-8(fp)
   80284:	e1bfff15 	stw	r6,-4(fp)
    int i, j;
    for (i = 0; i < m; i++){
   80288:	e03ffb15 	stw	zero,-20(fp)
   8028c:	00001d06 	br	80304 <print+0x98>
      for (j = 0; j < n; j++)
   80290:	e03ffc15 	stw	zero,-16(fp)
   80294:	00001306 	br	802e4 <print+0x78>
        printf("%d ", *((arr+i*n) + j));
   80298:	e17fff17 	ldw	r5,-4(fp)
   8029c:	e13ffb17 	ldw	r4,-20(fp)
   802a0:	0081b340 	call	81b34 <__mulsi3>
   802a4:	1007883a 	mov	r3,r2
   802a8:	e0bffc17 	ldw	r2,-16(fp)
   802ac:	1885883a 	add	r2,r3,r2
   802b0:	1085883a 	add	r2,r2,r2
   802b4:	1085883a 	add	r2,r2,r2
   802b8:	1007883a 	mov	r3,r2
   802bc:	e0bffd17 	ldw	r2,-12(fp)
   802c0:	10c5883a 	add	r2,r2,r3
   802c4:	10800017 	ldw	r2,0(r2)
   802c8:	100b883a 	mov	r5,r2
   802cc:	01000274 	movhi	r4,9
   802d0:	2104d504 	addi	r4,r4,4948
   802d4:	0081b8c0 	call	81b8c <printf>
//MxN array
void print(int *arr, int m, int n)
{
    int i, j;
    for (i = 0; i < m; i++){
      for (j = 0; j < n; j++)
   802d8:	e0bffc17 	ldw	r2,-16(fp)
   802dc:	10800044 	addi	r2,r2,1
   802e0:	e0bffc15 	stw	r2,-16(fp)
   802e4:	e0fffc17 	ldw	r3,-16(fp)
   802e8:	e0bfff17 	ldw	r2,-4(fp)
   802ec:	18bfea16 	blt	r3,r2,80298 <__alt_data_end+0xfffa0298>
        printf("%d ", *((arr+i*n) + j));
      printf("\n");
   802f0:	01000284 	movi	r4,10
   802f4:	0081bd00 	call	81bd0 <putchar>

//MxN array
void print(int *arr, int m, int n)
{
    int i, j;
    for (i = 0; i < m; i++){
   802f8:	e0bffb17 	ldw	r2,-20(fp)
   802fc:	10800044 	addi	r2,r2,1
   80300:	e0bffb15 	stw	r2,-20(fp)
   80304:	e0fffb17 	ldw	r3,-20(fp)
   80308:	e0bffe17 	ldw	r2,-8(fp)
   8030c:	18bfe016 	blt	r3,r2,80290 <__alt_data_end+0xfffa0290>
      for (j = 0; j < n; j++)
        printf("%d ", *((arr+i*n) + j));
      printf("\n");
    }
}
   80310:	0001883a 	nop
   80314:	e037883a 	mov	sp,fp
   80318:	dfc00117 	ldw	ra,4(sp)
   8031c:	df000017 	ldw	fp,0(sp)
   80320:	dec00204 	addi	sp,sp,8
   80324:	f800283a 	ret

00080328 <print2D_toLCD>:

//MINI LINEAR ALGEBRA LIBRARY:
void print2D_toLCD(int *arr, int m, int n)
{
   80328:	defff904 	addi	sp,sp,-28
   8032c:	dfc00615 	stw	ra,24(sp)
   80330:	df000515 	stw	fp,20(sp)
   80334:	df000504 	addi	fp,sp,20
   80338:	e13ffd15 	stw	r4,-12(fp)
   8033c:	e17ffe15 	stw	r5,-8(fp)
   80340:	e1bfff15 	stw	r6,-4(fp)
    int i, j;
    set_position(0x00);
   80344:	0009883a 	mov	r4,zero
   80348:	00819200 	call	81920 <set_position>
    for (i = 0; i < m; i++){
   8034c:	e03ffb15 	stw	zero,-20(fp)
   80350:	00002206 	br	803dc <print2D_toLCD+0xb4>
      for (j = 0; j < n; j++){
   80354:	e03ffc15 	stw	zero,-16(fp)
   80358:	00001a06 	br	803c4 <print2D_toLCD+0x9c>
    	  if(j == 16)
   8035c:	e0bffc17 	ldw	r2,-16(fp)
   80360:	10800418 	cmpnei	r2,r2,16
   80364:	1000021e 	bne	r2,zero,80370 <print2D_toLCD+0x48>
    	  {
    		  set_position(0x40);
   80368:	01001004 	movi	r4,64
   8036c:	00819200 	call	81920 <set_position>
    	  }
        write_char(*((arr+i*n) + j) + 0x30);
   80370:	e17fff17 	ldw	r5,-4(fp)
   80374:	e13ffb17 	ldw	r4,-20(fp)
   80378:	0081b340 	call	81b34 <__mulsi3>
   8037c:	1007883a 	mov	r3,r2
   80380:	e0bffc17 	ldw	r2,-16(fp)
   80384:	1885883a 	add	r2,r3,r2
   80388:	1085883a 	add	r2,r2,r2
   8038c:	1085883a 	add	r2,r2,r2
   80390:	1007883a 	mov	r3,r2
   80394:	e0bffd17 	ldw	r2,-12(fp)
   80398:	10c5883a 	add	r2,r2,r3
   8039c:	10800017 	ldw	r2,0(r2)
   803a0:	10800c04 	addi	r2,r2,48
   803a4:	10803fcc 	andi	r2,r2,255
   803a8:	1080201c 	xori	r2,r2,128
   803ac:	10bfe004 	addi	r2,r2,-128
   803b0:	1009883a 	mov	r4,r2
   803b4:	008183c0 	call	8183c <write_char>
void print2D_toLCD(int *arr, int m, int n)
{
    int i, j;
    set_position(0x00);
    for (i = 0; i < m; i++){
      for (j = 0; j < n; j++){
   803b8:	e0bffc17 	ldw	r2,-16(fp)
   803bc:	10800044 	addi	r2,r2,1
   803c0:	e0bffc15 	stw	r2,-16(fp)
   803c4:	e0fffc17 	ldw	r3,-16(fp)
   803c8:	e0bfff17 	ldw	r2,-4(fp)
   803cc:	18bfe316 	blt	r3,r2,8035c <__alt_data_end+0xfffa035c>
//MINI LINEAR ALGEBRA LIBRARY:
void print2D_toLCD(int *arr, int m, int n)
{
    int i, j;
    set_position(0x00);
    for (i = 0; i < m; i++){
   803d0:	e0bffb17 	ldw	r2,-20(fp)
   803d4:	10800044 	addi	r2,r2,1
   803d8:	e0bffb15 	stw	r2,-20(fp)
   803dc:	e0fffb17 	ldw	r3,-20(fp)
   803e0:	e0bffe17 	ldw	r2,-8(fp)
   803e4:	18bfdb16 	blt	r3,r2,80354 <__alt_data_end+0xfffa0354>
    	  }
        write_char(*((arr+i*n) + j) + 0x30);
      }
      //printf("\n");
    }
}
   803e8:	0001883a 	nop
   803ec:	e037883a 	mov	sp,fp
   803f0:	dfc00117 	ldw	ra,4(sp)
   803f4:	df000017 	ldw	fp,0(sp)
   803f8:	dec00204 	addi	sp,sp,8
   803fc:	f800283a 	ret

00080400 <matrixMultiply12_24>:
//Matrix Mx12 * Nx24 = N*12x24
void matrixMultiply12_24(int mat1[][12], int mat2[][24], int res[][24], int ROW1, int ROW2)  {
   80400:	defff504 	addi	sp,sp,-44
   80404:	dfc00a15 	stw	ra,40(sp)
   80408:	df000915 	stw	fp,36(sp)
   8040c:	dc000815 	stw	r16,32(sp)
   80410:	df000904 	addi	fp,sp,36
   80414:	e13ffb15 	stw	r4,-20(fp)
   80418:	e17ffc15 	stw	r5,-16(fp)
   8041c:	e1bffd15 	stw	r6,-12(fp)
   80420:	e1fffe15 	stw	r7,-8(fp)
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
   80424:	e03ff715 	stw	zero,-36(fp)
   80428:	00004b06 	br	80558 <matrixMultiply12_24+0x158>
      for (col = 0; col < 24; col++) {
   8042c:	e03ff815 	stw	zero,-32(fp)
   80430:	00004306 	br	80540 <matrixMultiply12_24+0x140>
         sum = 0;
   80434:	e03ffa15 	stw	zero,-24(fp)
         for (i = 0; i < ROW2; i++) {
   80438:	e03ff915 	stw	zero,-28(fp)
   8043c:	00002406 	br	804d0 <matrixMultiply12_24+0xd0>
            sum += (*(*(mat1 + row) + i)) * (*(*(mat2 + i) + col));
   80440:	e0bff717 	ldw	r2,-36(fp)
   80444:	01400304 	movi	r5,12
   80448:	1009883a 	mov	r4,r2
   8044c:	0081b340 	call	81b34 <__mulsi3>
   80450:	1007883a 	mov	r3,r2
   80454:	e0bff917 	ldw	r2,-28(fp)
   80458:	1885883a 	add	r2,r3,r2
   8045c:	1085883a 	add	r2,r2,r2
   80460:	1085883a 	add	r2,r2,r2
   80464:	1007883a 	mov	r3,r2
   80468:	e0bffb17 	ldw	r2,-20(fp)
   8046c:	10c5883a 	add	r2,r2,r3
   80470:	14000017 	ldw	r16,0(r2)
   80474:	e0bff917 	ldw	r2,-28(fp)
   80478:	01400604 	movi	r5,24
   8047c:	1009883a 	mov	r4,r2
   80480:	0081b340 	call	81b34 <__mulsi3>
   80484:	1007883a 	mov	r3,r2
   80488:	e0bff817 	ldw	r2,-32(fp)
   8048c:	1885883a 	add	r2,r3,r2
   80490:	1085883a 	add	r2,r2,r2
   80494:	1085883a 	add	r2,r2,r2
   80498:	1007883a 	mov	r3,r2
   8049c:	e0bffc17 	ldw	r2,-16(fp)
   804a0:	10c5883a 	add	r2,r2,r3
   804a4:	10800017 	ldw	r2,0(r2)
   804a8:	100b883a 	mov	r5,r2
   804ac:	8009883a 	mov	r4,r16
   804b0:	0081b340 	call	81b34 <__mulsi3>
   804b4:	1007883a 	mov	r3,r2
   804b8:	e0bffa17 	ldw	r2,-24(fp)
   804bc:	10c5883a 	add	r2,r2,r3
   804c0:	e0bffa15 	stw	r2,-24(fp)
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
      for (col = 0; col < 24; col++) {
         sum = 0;
         for (i = 0; i < ROW2; i++) {
   804c4:	e0bff917 	ldw	r2,-28(fp)
   804c8:	10800044 	addi	r2,r2,1
   804cc:	e0bff915 	stw	r2,-28(fp)
   804d0:	e0fff917 	ldw	r3,-28(fp)
   804d4:	e0800217 	ldw	r2,8(fp)
   804d8:	18bfd916 	blt	r3,r2,80440 <__alt_data_end+0xfffa0440>
            sum += (*(*(mat1 + row) + i)) * (*(*(mat2 + i) + col));
         }
         *(*(res + row) + col) = sum %2;
   804dc:	e0bff717 	ldw	r2,-36(fp)
   804e0:	01400604 	movi	r5,24
   804e4:	1009883a 	mov	r4,r2
   804e8:	0081b340 	call	81b34 <__mulsi3>
   804ec:	1007883a 	mov	r3,r2
   804f0:	e0bff817 	ldw	r2,-32(fp)
   804f4:	1885883a 	add	r2,r3,r2
   804f8:	1085883a 	add	r2,r2,r2
   804fc:	1085883a 	add	r2,r2,r2
   80500:	1007883a 	mov	r3,r2
   80504:	e0bffd17 	ldw	r2,-12(fp)
   80508:	10c7883a 	add	r3,r2,r3
   8050c:	e13ffa17 	ldw	r4,-24(fp)
   80510:	00a00034 	movhi	r2,32768
   80514:	10800044 	addi	r2,r2,1
   80518:	2084703a 	and	r2,r4,r2
   8051c:	1000040e 	bge	r2,zero,80530 <matrixMultiply12_24+0x130>
   80520:	10bfffc4 	addi	r2,r2,-1
   80524:	013fff84 	movi	r4,-2
   80528:	1104b03a 	or	r2,r2,r4
   8052c:	10800044 	addi	r2,r2,1
   80530:	18800015 	stw	r2,0(r3)
//Matrix Mx12 * Nx24 = N*12x24
void matrixMultiply12_24(int mat1[][12], int mat2[][24], int res[][24], int ROW1, int ROW2)  {
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
      for (col = 0; col < 24; col++) {
   80534:	e0bff817 	ldw	r2,-32(fp)
   80538:	10800044 	addi	r2,r2,1
   8053c:	e0bff815 	stw	r2,-32(fp)
   80540:	e0bff817 	ldw	r2,-32(fp)
   80544:	10800610 	cmplti	r2,r2,24
   80548:	103fba1e 	bne	r2,zero,80434 <__alt_data_end+0xfffa0434>
}
//Matrix Mx12 * Nx24 = N*12x24
void matrixMultiply12_24(int mat1[][12], int mat2[][24], int res[][24], int ROW1, int ROW2)  {
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
   8054c:	e0bff717 	ldw	r2,-36(fp)
   80550:	10800044 	addi	r2,r2,1
   80554:	e0bff715 	stw	r2,-36(fp)
   80558:	e0fff717 	ldw	r3,-36(fp)
   8055c:	e0bffe17 	ldw	r2,-8(fp)
   80560:	18bfb216 	blt	r3,r2,8042c <__alt_data_end+0xfffa042c>
            sum += (*(*(mat1 + row) + i)) * (*(*(mat2 + i) + col));
         }
         *(*(res + row) + col) = sum %2;
      }
   }
}
   80564:	0001883a 	nop
   80568:	e6ffff04 	addi	sp,fp,-4
   8056c:	dfc00217 	ldw	ra,8(sp)
   80570:	df000117 	ldw	fp,4(sp)
   80574:	dc000017 	ldw	r16,0(sp)
   80578:	dec00304 	addi	sp,sp,12
   8057c:	f800283a 	ret

00080580 <matrixMultiply24_12>:
void matrixMultiply24_12(int mat1[][24], int mat2[][12], int res[][12], int ROW1, int ROW2)  {
   80580:	defff504 	addi	sp,sp,-44
   80584:	dfc00a15 	stw	ra,40(sp)
   80588:	df000915 	stw	fp,36(sp)
   8058c:	dc000815 	stw	r16,32(sp)
   80590:	df000904 	addi	fp,sp,36
   80594:	e13ffb15 	stw	r4,-20(fp)
   80598:	e17ffc15 	stw	r5,-16(fp)
   8059c:	e1bffd15 	stw	r6,-12(fp)
   805a0:	e1fffe15 	stw	r7,-8(fp)
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
   805a4:	e03ff715 	stw	zero,-36(fp)
   805a8:	00004b06 	br	806d8 <matrixMultiply24_12+0x158>
      for (col = 0; col < 12; col++) {
   805ac:	e03ff815 	stw	zero,-32(fp)
   805b0:	00004306 	br	806c0 <matrixMultiply24_12+0x140>
         sum = 0;
   805b4:	e03ffa15 	stw	zero,-24(fp)
         for (i = 0; i < ROW2; i++) {
   805b8:	e03ff915 	stw	zero,-28(fp)
   805bc:	00002406 	br	80650 <matrixMultiply24_12+0xd0>
            sum += (*(*(mat1 + row) + i)) * (*(*(mat2 + i) + col));
   805c0:	e0bff717 	ldw	r2,-36(fp)
   805c4:	01400604 	movi	r5,24
   805c8:	1009883a 	mov	r4,r2
   805cc:	0081b340 	call	81b34 <__mulsi3>
   805d0:	1007883a 	mov	r3,r2
   805d4:	e0bff917 	ldw	r2,-28(fp)
   805d8:	1885883a 	add	r2,r3,r2
   805dc:	1085883a 	add	r2,r2,r2
   805e0:	1085883a 	add	r2,r2,r2
   805e4:	1007883a 	mov	r3,r2
   805e8:	e0bffb17 	ldw	r2,-20(fp)
   805ec:	10c5883a 	add	r2,r2,r3
   805f0:	14000017 	ldw	r16,0(r2)
   805f4:	e0bff917 	ldw	r2,-28(fp)
   805f8:	01400304 	movi	r5,12
   805fc:	1009883a 	mov	r4,r2
   80600:	0081b340 	call	81b34 <__mulsi3>
   80604:	1007883a 	mov	r3,r2
   80608:	e0bff817 	ldw	r2,-32(fp)
   8060c:	1885883a 	add	r2,r3,r2
   80610:	1085883a 	add	r2,r2,r2
   80614:	1085883a 	add	r2,r2,r2
   80618:	1007883a 	mov	r3,r2
   8061c:	e0bffc17 	ldw	r2,-16(fp)
   80620:	10c5883a 	add	r2,r2,r3
   80624:	10800017 	ldw	r2,0(r2)
   80628:	100b883a 	mov	r5,r2
   8062c:	8009883a 	mov	r4,r16
   80630:	0081b340 	call	81b34 <__mulsi3>
   80634:	1007883a 	mov	r3,r2
   80638:	e0bffa17 	ldw	r2,-24(fp)
   8063c:	10c5883a 	add	r2,r2,r3
   80640:	e0bffa15 	stw	r2,-24(fp)
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
      for (col = 0; col < 12; col++) {
         sum = 0;
         for (i = 0; i < ROW2; i++) {
   80644:	e0bff917 	ldw	r2,-28(fp)
   80648:	10800044 	addi	r2,r2,1
   8064c:	e0bff915 	stw	r2,-28(fp)
   80650:	e0fff917 	ldw	r3,-28(fp)
   80654:	e0800217 	ldw	r2,8(fp)
   80658:	18bfd916 	blt	r3,r2,805c0 <__alt_data_end+0xfffa05c0>
            sum += (*(*(mat1 + row) + i)) * (*(*(mat2 + i) + col));
         }
         *(*(res + row) + col) = sum %2;
   8065c:	e0bff717 	ldw	r2,-36(fp)
   80660:	01400304 	movi	r5,12
   80664:	1009883a 	mov	r4,r2
   80668:	0081b340 	call	81b34 <__mulsi3>
   8066c:	1007883a 	mov	r3,r2
   80670:	e0bff817 	ldw	r2,-32(fp)
   80674:	1885883a 	add	r2,r3,r2
   80678:	1085883a 	add	r2,r2,r2
   8067c:	1085883a 	add	r2,r2,r2
   80680:	1007883a 	mov	r3,r2
   80684:	e0bffd17 	ldw	r2,-12(fp)
   80688:	10c7883a 	add	r3,r2,r3
   8068c:	e13ffa17 	ldw	r4,-24(fp)
   80690:	00a00034 	movhi	r2,32768
   80694:	10800044 	addi	r2,r2,1
   80698:	2084703a 	and	r2,r4,r2
   8069c:	1000040e 	bge	r2,zero,806b0 <matrixMultiply24_12+0x130>
   806a0:	10bfffc4 	addi	r2,r2,-1
   806a4:	013fff84 	movi	r4,-2
   806a8:	1104b03a 	or	r2,r2,r4
   806ac:	10800044 	addi	r2,r2,1
   806b0:	18800015 	stw	r2,0(r3)
}
void matrixMultiply24_12(int mat1[][24], int mat2[][12], int res[][12], int ROW1, int ROW2)  {
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
      for (col = 0; col < 12; col++) {
   806b4:	e0bff817 	ldw	r2,-32(fp)
   806b8:	10800044 	addi	r2,r2,1
   806bc:	e0bff815 	stw	r2,-32(fp)
   806c0:	e0bff817 	ldw	r2,-32(fp)
   806c4:	10800310 	cmplti	r2,r2,12
   806c8:	103fba1e 	bne	r2,zero,805b4 <__alt_data_end+0xfffa05b4>
   }
}
void matrixMultiply24_12(int mat1[][24], int mat2[][12], int res[][12], int ROW1, int ROW2)  {
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
   806cc:	e0bff717 	ldw	r2,-36(fp)
   806d0:	10800044 	addi	r2,r2,1
   806d4:	e0bff715 	stw	r2,-36(fp)
   806d8:	e0fff717 	ldw	r3,-36(fp)
   806dc:	e0bffe17 	ldw	r2,-8(fp)
   806e0:	18bfb216 	blt	r3,r2,805ac <__alt_data_end+0xfffa05ac>
            sum += (*(*(mat1 + row) + i)) * (*(*(mat2 + i) + col));
         }
         *(*(res + row) + col) = sum %2;
      }
   }
}
   806e4:	0001883a 	nop
   806e8:	e6ffff04 	addi	sp,fp,-4
   806ec:	dfc00217 	ldw	ra,8(sp)
   806f0:	df000117 	ldw	fp,4(sp)
   806f4:	dc000017 	ldw	r16,0(sp)
   806f8:	dec00304 	addi	sp,sp,12
   806fc:	f800283a 	ret

00080700 <matrixMultiply12_12>:
void matrixMultiply12_12(int mat1[][12], int mat2[][12], int res[][12], int ROW1, int ROW2)  {
   80700:	defff504 	addi	sp,sp,-44
   80704:	dfc00a15 	stw	ra,40(sp)
   80708:	df000915 	stw	fp,36(sp)
   8070c:	dc000815 	stw	r16,32(sp)
   80710:	df000904 	addi	fp,sp,36
   80714:	e13ffb15 	stw	r4,-20(fp)
   80718:	e17ffc15 	stw	r5,-16(fp)
   8071c:	e1bffd15 	stw	r6,-12(fp)
   80720:	e1fffe15 	stw	r7,-8(fp)
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
   80724:	e03ff715 	stw	zero,-36(fp)
   80728:	00004b06 	br	80858 <matrixMultiply12_12+0x158>
      for (col = 0; col < 12; col++) {
   8072c:	e03ff815 	stw	zero,-32(fp)
   80730:	00004306 	br	80840 <matrixMultiply12_12+0x140>
         sum = 0;
   80734:	e03ffa15 	stw	zero,-24(fp)
         for (i = 0; i < ROW2; i++) {
   80738:	e03ff915 	stw	zero,-28(fp)
   8073c:	00002406 	br	807d0 <matrixMultiply12_12+0xd0>
            sum += (*(*(mat1 + row) + i)) * (*(*(mat2 + i) + col));
   80740:	e0bff717 	ldw	r2,-36(fp)
   80744:	01400304 	movi	r5,12
   80748:	1009883a 	mov	r4,r2
   8074c:	0081b340 	call	81b34 <__mulsi3>
   80750:	1007883a 	mov	r3,r2
   80754:	e0bff917 	ldw	r2,-28(fp)
   80758:	1885883a 	add	r2,r3,r2
   8075c:	1085883a 	add	r2,r2,r2
   80760:	1085883a 	add	r2,r2,r2
   80764:	1007883a 	mov	r3,r2
   80768:	e0bffb17 	ldw	r2,-20(fp)
   8076c:	10c5883a 	add	r2,r2,r3
   80770:	14000017 	ldw	r16,0(r2)
   80774:	e0bff917 	ldw	r2,-28(fp)
   80778:	01400304 	movi	r5,12
   8077c:	1009883a 	mov	r4,r2
   80780:	0081b340 	call	81b34 <__mulsi3>
   80784:	1007883a 	mov	r3,r2
   80788:	e0bff817 	ldw	r2,-32(fp)
   8078c:	1885883a 	add	r2,r3,r2
   80790:	1085883a 	add	r2,r2,r2
   80794:	1085883a 	add	r2,r2,r2
   80798:	1007883a 	mov	r3,r2
   8079c:	e0bffc17 	ldw	r2,-16(fp)
   807a0:	10c5883a 	add	r2,r2,r3
   807a4:	10800017 	ldw	r2,0(r2)
   807a8:	100b883a 	mov	r5,r2
   807ac:	8009883a 	mov	r4,r16
   807b0:	0081b340 	call	81b34 <__mulsi3>
   807b4:	1007883a 	mov	r3,r2
   807b8:	e0bffa17 	ldw	r2,-24(fp)
   807bc:	10c5883a 	add	r2,r2,r3
   807c0:	e0bffa15 	stw	r2,-24(fp)
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
      for (col = 0; col < 12; col++) {
         sum = 0;
         for (i = 0; i < ROW2; i++) {
   807c4:	e0bff917 	ldw	r2,-28(fp)
   807c8:	10800044 	addi	r2,r2,1
   807cc:	e0bff915 	stw	r2,-28(fp)
   807d0:	e0fff917 	ldw	r3,-28(fp)
   807d4:	e0800217 	ldw	r2,8(fp)
   807d8:	18bfd916 	blt	r3,r2,80740 <__alt_data_end+0xfffa0740>
            sum += (*(*(mat1 + row) + i)) * (*(*(mat2 + i) + col));
         }
         *(*(res + row) + col) = sum %2;
   807dc:	e0bff717 	ldw	r2,-36(fp)
   807e0:	01400304 	movi	r5,12
   807e4:	1009883a 	mov	r4,r2
   807e8:	0081b340 	call	81b34 <__mulsi3>
   807ec:	1007883a 	mov	r3,r2
   807f0:	e0bff817 	ldw	r2,-32(fp)
   807f4:	1885883a 	add	r2,r3,r2
   807f8:	1085883a 	add	r2,r2,r2
   807fc:	1085883a 	add	r2,r2,r2
   80800:	1007883a 	mov	r3,r2
   80804:	e0bffd17 	ldw	r2,-12(fp)
   80808:	10c7883a 	add	r3,r2,r3
   8080c:	e13ffa17 	ldw	r4,-24(fp)
   80810:	00a00034 	movhi	r2,32768
   80814:	10800044 	addi	r2,r2,1
   80818:	2084703a 	and	r2,r4,r2
   8081c:	1000040e 	bge	r2,zero,80830 <matrixMultiply12_12+0x130>
   80820:	10bfffc4 	addi	r2,r2,-1
   80824:	013fff84 	movi	r4,-2
   80828:	1104b03a 	or	r2,r2,r4
   8082c:	10800044 	addi	r2,r2,1
   80830:	18800015 	stw	r2,0(r3)
}
void matrixMultiply12_12(int mat1[][12], int mat2[][12], int res[][12], int ROW1, int ROW2)  {
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
      for (col = 0; col < 12; col++) {
   80834:	e0bff817 	ldw	r2,-32(fp)
   80838:	10800044 	addi	r2,r2,1
   8083c:	e0bff815 	stw	r2,-32(fp)
   80840:	e0bff817 	ldw	r2,-32(fp)
   80844:	10800310 	cmplti	r2,r2,12
   80848:	103fba1e 	bne	r2,zero,80734 <__alt_data_end+0xfffa0734>
   }
}
void matrixMultiply12_12(int mat1[][12], int mat2[][12], int res[][12], int ROW1, int ROW2)  {
   int row, col, i;
   int sum;
   for (row = 0; row < ROW1; row++) {
   8084c:	e0bff717 	ldw	r2,-36(fp)
   80850:	10800044 	addi	r2,r2,1
   80854:	e0bff715 	stw	r2,-36(fp)
   80858:	e0fff717 	ldw	r3,-36(fp)
   8085c:	e0bffe17 	ldw	r2,-8(fp)
   80860:	18bfb216 	blt	r3,r2,8072c <__alt_data_end+0xfffa072c>
            sum += (*(*(mat1 + row) + i)) * (*(*(mat2 + i) + col));
         }
         *(*(res + row) + col) = sum %2;
      }
   }
}
   80864:	0001883a 	nop
   80868:	e6ffff04 	addi	sp,fp,-4
   8086c:	dfc00217 	ldw	ra,8(sp)
   80870:	df000117 	ldw	fp,4(sp)
   80874:	dc000017 	ldw	r16,0(sp)
   80878:	dec00304 	addi	sp,sp,12
   8087c:	f800283a 	ret

00080880 <Array_Add>:

void Array_Add(int arr1[][12],int arr2[][12],int result[][12],int row)
{
   80880:	defff804 	addi	sp,sp,-32
   80884:	dfc00715 	stw	ra,28(sp)
   80888:	df000615 	stw	fp,24(sp)
   8088c:	dc000515 	stw	r16,20(sp)
   80890:	df000604 	addi	fp,sp,24
   80894:	e13ffb15 	stw	r4,-20(fp)
   80898:	e17ffc15 	stw	r5,-16(fp)
   8089c:	e1bffd15 	stw	r6,-12(fp)
   808a0:	e1fffe15 	stw	r7,-8(fp)
	for(int i=0; i < 12;i++)
   808a4:	e03ffa15 	stw	zero,-24(fp)
   808a8:	00002506 	br	80940 <Array_Add+0xc0>
	{
		result[0][i] = (arr1[0][i] + arr2[row][i])%2;
   808ac:	e0fffb17 	ldw	r3,-20(fp)
   808b0:	e0bffa17 	ldw	r2,-24(fp)
   808b4:	1085883a 	add	r2,r2,r2
   808b8:	1085883a 	add	r2,r2,r2
   808bc:	1885883a 	add	r2,r3,r2
   808c0:	14000017 	ldw	r16,0(r2)
   808c4:	e0bffe17 	ldw	r2,-8(fp)
   808c8:	01400c04 	movi	r5,48
   808cc:	1009883a 	mov	r4,r2
   808d0:	0081b340 	call	81b34 <__mulsi3>
   808d4:	1007883a 	mov	r3,r2
   808d8:	e0bffc17 	ldw	r2,-16(fp)
   808dc:	10c7883a 	add	r3,r2,r3
   808e0:	e0bffa17 	ldw	r2,-24(fp)
   808e4:	1085883a 	add	r2,r2,r2
   808e8:	1085883a 	add	r2,r2,r2
   808ec:	1885883a 	add	r2,r3,r2
   808f0:	10800017 	ldw	r2,0(r2)
   808f4:	8087883a 	add	r3,r16,r2
   808f8:	00a00034 	movhi	r2,32768
   808fc:	10800044 	addi	r2,r2,1
   80900:	1884703a 	and	r2,r3,r2
   80904:	1000040e 	bge	r2,zero,80918 <Array_Add+0x98>
   80908:	10bfffc4 	addi	r2,r2,-1
   8090c:	00ffff84 	movi	r3,-2
   80910:	10c4b03a 	or	r2,r2,r3
   80914:	10800044 	addi	r2,r2,1
   80918:	1009883a 	mov	r4,r2
   8091c:	e0fffd17 	ldw	r3,-12(fp)
   80920:	e0bffa17 	ldw	r2,-24(fp)
   80924:	1085883a 	add	r2,r2,r2
   80928:	1085883a 	add	r2,r2,r2
   8092c:	1885883a 	add	r2,r3,r2
   80930:	11000015 	stw	r4,0(r2)
   }
}

void Array_Add(int arr1[][12],int arr2[][12],int result[][12],int row)
{
	for(int i=0; i < 12;i++)
   80934:	e0bffa17 	ldw	r2,-24(fp)
   80938:	10800044 	addi	r2,r2,1
   8093c:	e0bffa15 	stw	r2,-24(fp)
   80940:	e0bffa17 	ldw	r2,-24(fp)
   80944:	10800310 	cmplti	r2,r2,12
   80948:	103fd81e 	bne	r2,zero,808ac <__alt_data_end+0xfffa08ac>
	{
		result[0][i] = (arr1[0][i] + arr2[row][i])%2;
	}
}
   8094c:	0001883a 	nop
   80950:	e6ffff04 	addi	sp,fp,-4
   80954:	dfc00217 	ldw	ra,8(sp)
   80958:	df000117 	ldw	fp,4(sp)
   8095c:	dc000017 	ldw	r16,0(sp)
   80960:	dec00304 	addi	sp,sp,12
   80964:	f800283a 	ret

00080968 <Array_Add24>:
void Array_Add24(int arr1[][24],int arr2[][24],int result[][24],int row)
{
   80968:	defff804 	addi	sp,sp,-32
   8096c:	dfc00715 	stw	ra,28(sp)
   80970:	df000615 	stw	fp,24(sp)
   80974:	dc000515 	stw	r16,20(sp)
   80978:	df000604 	addi	fp,sp,24
   8097c:	e13ffb15 	stw	r4,-20(fp)
   80980:	e17ffc15 	stw	r5,-16(fp)
   80984:	e1bffd15 	stw	r6,-12(fp)
   80988:	e1fffe15 	stw	r7,-8(fp)
	for(int i=0; i < 24;i++)
   8098c:	e03ffa15 	stw	zero,-24(fp)
   80990:	00002506 	br	80a28 <Array_Add24+0xc0>
	{
		result[0][i] = (arr1[0][i] + arr2[row][i])%2;
   80994:	e0fffb17 	ldw	r3,-20(fp)
   80998:	e0bffa17 	ldw	r2,-24(fp)
   8099c:	1085883a 	add	r2,r2,r2
   809a0:	1085883a 	add	r2,r2,r2
   809a4:	1885883a 	add	r2,r3,r2
   809a8:	14000017 	ldw	r16,0(r2)
   809ac:	e0bffe17 	ldw	r2,-8(fp)
   809b0:	01401804 	movi	r5,96
   809b4:	1009883a 	mov	r4,r2
   809b8:	0081b340 	call	81b34 <__mulsi3>
   809bc:	1007883a 	mov	r3,r2
   809c0:	e0bffc17 	ldw	r2,-16(fp)
   809c4:	10c7883a 	add	r3,r2,r3
   809c8:	e0bffa17 	ldw	r2,-24(fp)
   809cc:	1085883a 	add	r2,r2,r2
   809d0:	1085883a 	add	r2,r2,r2
   809d4:	1885883a 	add	r2,r3,r2
   809d8:	10800017 	ldw	r2,0(r2)
   809dc:	8087883a 	add	r3,r16,r2
   809e0:	00a00034 	movhi	r2,32768
   809e4:	10800044 	addi	r2,r2,1
   809e8:	1884703a 	and	r2,r3,r2
   809ec:	1000040e 	bge	r2,zero,80a00 <Array_Add24+0x98>
   809f0:	10bfffc4 	addi	r2,r2,-1
   809f4:	00ffff84 	movi	r3,-2
   809f8:	10c4b03a 	or	r2,r2,r3
   809fc:	10800044 	addi	r2,r2,1
   80a00:	1009883a 	mov	r4,r2
   80a04:	e0fffd17 	ldw	r3,-12(fp)
   80a08:	e0bffa17 	ldw	r2,-24(fp)
   80a0c:	1085883a 	add	r2,r2,r2
   80a10:	1085883a 	add	r2,r2,r2
   80a14:	1885883a 	add	r2,r3,r2
   80a18:	11000015 	stw	r4,0(r2)
		result[0][i] = (arr1[0][i] + arr2[row][i])%2;
	}
}
void Array_Add24(int arr1[][24],int arr2[][24],int result[][24],int row)
{
	for(int i=0; i < 24;i++)
   80a1c:	e0bffa17 	ldw	r2,-24(fp)
   80a20:	10800044 	addi	r2,r2,1
   80a24:	e0bffa15 	stw	r2,-24(fp)
   80a28:	e0bffa17 	ldw	r2,-24(fp)
   80a2c:	10800610 	cmplti	r2,r2,24
   80a30:	103fd81e 	bne	r2,zero,80994 <__alt_data_end+0xfffa0994>
	{
		result[0][i] = (arr1[0][i] + arr2[row][i])%2;
	}
}
   80a34:	0001883a 	nop
   80a38:	e6ffff04 	addi	sp,fp,-4
   80a3c:	dfc00217 	ldw	ra,8(sp)
   80a40:	df000117 	ldw	fp,4(sp)
   80a44:	dc000017 	ldw	r16,0(sp)
   80a48:	dec00304 	addi	sp,sp,12
   80a4c:	f800283a 	ret

00080a50 <transpose>:

void transpose(int *arr, int m, int n,int *res)
{
   80a50:	defff704 	addi	sp,sp,-36
   80a54:	dfc00815 	stw	ra,32(sp)
   80a58:	df000715 	stw	fp,28(sp)
   80a5c:	dc000615 	stw	r16,24(sp)
   80a60:	df000704 	addi	fp,sp,28
   80a64:	e13ffb15 	stw	r4,-20(fp)
   80a68:	e17ffc15 	stw	r5,-16(fp)
   80a6c:	e1bffd15 	stw	r6,-12(fp)
   80a70:	e1fffe15 	stw	r7,-8(fp)
    int i, j;
    set_position(0x00);
   80a74:	0009883a 	mov	r4,zero
   80a78:	00819200 	call	81920 <set_position>
    for (i = 0; i < m; i++)
   80a7c:	e03ff915 	stw	zero,-28(fp)
   80a80:	00002306 	br	80b10 <transpose+0xc0>
      for (j = 0; j < n; j++)
   80a84:	e03ffa15 	stw	zero,-24(fp)
   80a88:	00001b06 	br	80af8 <transpose+0xa8>
    	  *((res+j*n) + i) = *((arr+i*n) + j);
   80a8c:	e17ffd17 	ldw	r5,-12(fp)
   80a90:	e13ffa17 	ldw	r4,-24(fp)
   80a94:	0081b340 	call	81b34 <__mulsi3>
   80a98:	1007883a 	mov	r3,r2
   80a9c:	e0bff917 	ldw	r2,-28(fp)
   80aa0:	1885883a 	add	r2,r3,r2
   80aa4:	1085883a 	add	r2,r2,r2
   80aa8:	1085883a 	add	r2,r2,r2
   80aac:	1007883a 	mov	r3,r2
   80ab0:	e0bffe17 	ldw	r2,-8(fp)
   80ab4:	10e1883a 	add	r16,r2,r3
   80ab8:	e17ffd17 	ldw	r5,-12(fp)
   80abc:	e13ff917 	ldw	r4,-28(fp)
   80ac0:	0081b340 	call	81b34 <__mulsi3>
   80ac4:	1007883a 	mov	r3,r2
   80ac8:	e0bffa17 	ldw	r2,-24(fp)
   80acc:	1885883a 	add	r2,r3,r2
   80ad0:	1085883a 	add	r2,r2,r2
   80ad4:	1085883a 	add	r2,r2,r2
   80ad8:	1007883a 	mov	r3,r2
   80adc:	e0bffb17 	ldw	r2,-20(fp)
   80ae0:	10c5883a 	add	r2,r2,r3
   80ae4:	10800017 	ldw	r2,0(r2)
   80ae8:	80800015 	stw	r2,0(r16)
void transpose(int *arr, int m, int n,int *res)
{
    int i, j;
    set_position(0x00);
    for (i = 0; i < m; i++)
      for (j = 0; j < n; j++)
   80aec:	e0bffa17 	ldw	r2,-24(fp)
   80af0:	10800044 	addi	r2,r2,1
   80af4:	e0bffa15 	stw	r2,-24(fp)
   80af8:	e0fffa17 	ldw	r3,-24(fp)
   80afc:	e0bffd17 	ldw	r2,-12(fp)
   80b00:	18bfe216 	blt	r3,r2,80a8c <__alt_data_end+0xfffa0a8c>

void transpose(int *arr, int m, int n,int *res)
{
    int i, j;
    set_position(0x00);
    for (i = 0; i < m; i++)
   80b04:	e0bff917 	ldw	r2,-28(fp)
   80b08:	10800044 	addi	r2,r2,1
   80b0c:	e0bff915 	stw	r2,-28(fp)
   80b10:	e0fff917 	ldw	r3,-28(fp)
   80b14:	e0bffc17 	ldw	r2,-16(fp)
   80b18:	18bfda16 	blt	r3,r2,80a84 <__alt_data_end+0xfffa0a84>
      for (j = 0; j < n; j++)
    	  *((res+j*n) + i) = *((arr+i*n) + j);
}
   80b1c:	0001883a 	nop
   80b20:	e6ffff04 	addi	sp,fp,-4
   80b24:	dfc00217 	ldw	ra,8(sp)
   80b28:	df000117 	ldw	fp,4(sp)
   80b2c:	dc000017 	ldw	r16,0(sp)
   80b30:	dec00304 	addi	sp,sp,12
   80b34:	f800283a 	ret

00080b38 <weight>:

int weight(int *arr, int n)
{
   80b38:	defffb04 	addi	sp,sp,-20
   80b3c:	df000415 	stw	fp,16(sp)
   80b40:	df000404 	addi	fp,sp,16
   80b44:	e13ffe15 	stw	r4,-8(fp)
   80b48:	e17fff15 	stw	r5,-4(fp)
	int count = 0;
   80b4c:	e03ffc15 	stw	zero,-16(fp)
	for (int i=0;i<n;i++)
   80b50:	e03ffd15 	stw	zero,-12(fp)
   80b54:	00000f06 	br	80b94 <weight+0x5c>
		if (*(arr+i) == 1)
   80b58:	e0bffd17 	ldw	r2,-12(fp)
   80b5c:	1085883a 	add	r2,r2,r2
   80b60:	1085883a 	add	r2,r2,r2
   80b64:	1007883a 	mov	r3,r2
   80b68:	e0bffe17 	ldw	r2,-8(fp)
   80b6c:	10c5883a 	add	r2,r2,r3
   80b70:	10800017 	ldw	r2,0(r2)
   80b74:	10800058 	cmpnei	r2,r2,1
   80b78:	1000031e 	bne	r2,zero,80b88 <weight+0x50>
			count++;
   80b7c:	e0bffc17 	ldw	r2,-16(fp)
   80b80:	10800044 	addi	r2,r2,1
   80b84:	e0bffc15 	stw	r2,-16(fp)
}

int weight(int *arr, int n)
{
	int count = 0;
	for (int i=0;i<n;i++)
   80b88:	e0bffd17 	ldw	r2,-12(fp)
   80b8c:	10800044 	addi	r2,r2,1
   80b90:	e0bffd15 	stw	r2,-12(fp)
   80b94:	e0fffd17 	ldw	r3,-12(fp)
   80b98:	e0bfff17 	ldw	r2,-4(fp)
   80b9c:	18bfee16 	blt	r3,r2,80b58 <__alt_data_end+0xfffa0b58>
		if (*(arr+i) == 1)
			count++;
	return count;
   80ba0:	e0bffc17 	ldw	r2,-16(fp)
}
   80ba4:	e037883a 	mov	sp,fp
   80ba8:	df000017 	ldw	fp,0(sp)
   80bac:	dec00104 	addi	sp,sp,4
   80bb0:	f800283a 	ret

00080bb4 <main>:


//binary base = 0x101000

int main()
{
   80bb4:	deff4704 	addi	sp,sp,-740
   80bb8:	dfc0b815 	stw	ra,736(sp)
   80bbc:	df00b715 	stw	fp,732(sp)
   80bc0:	dc00b615 	stw	r16,728(sp)
   80bc4:	df00b704 	addi	fp,sp,732
	Init_LCD();
   80bc8:	00816e00 	call	816e0 <Init_LCD>
	int rand_counter = 0;
   80bcc:	e03f4a15 	stw	zero,-728(fp)
	int startKey_pressed = 1;
   80bd0:	00800044 	movi	r2,1
   80bd4:	e0bf5e15 	stw	r2,-648(fp)
	clear_display();
   80bd8:	00817ec0 	call	817ec <clear_display>
	set_position(0x00);
   80bdc:	0009883a 	mov	r4,zero
   80be0:	00819200 	call	81920 <set_position>
	write_string("Press KEY2");
   80be4:	01000274 	movhi	r4,9
   80be8:	2104d604 	addi	r4,r4,4952
   80bec:	008189c0 	call	8189c <write_string>
	set_position(0x40);
   80bf0:	01001004 	movi	r4,64
   80bf4:	00819200 	call	81920 <set_position>
	write_string("to begin");
   80bf8:	01000274 	movhi	r4,9
   80bfc:	2104d904 	addi	r4,r4,4964
   80c00:	008189c0 	call	8189c <write_string>
	while(1)
	{
		delay1ms(1);
   80c04:	01000044 	movi	r4,1
   80c08:	008167c0 	call	8167c <delay1ms>
		rand_counter++;
   80c0c:	e0bf4a17 	ldw	r2,-728(fp)
   80c10:	10800044 	addi	r2,r2,1
   80c14:	e0bf4a15 	stw	r2,-728(fp)
		startKey_pressed = IORD_ALTERA_AVALON_PIO_DATA(0x101010); //start_base
   80c18:	00800434 	movhi	r2,16
   80c1c:	10840404 	addi	r2,r2,4112
   80c20:	10800037 	ldwio	r2,0(r2)
   80c24:	e0bf5e15 	stw	r2,-648(fp)
		if (startKey_pressed == 0)
   80c28:	e0bf5e17 	ldw	r2,-648(fp)
   80c2c:	103ff51e 	bne	r2,zero,80c04 <__alt_data_end+0xfffa0c04>
		{
			printf("start program... \n");
   80c30:	01000274 	movhi	r4,9
   80c34:	2104dc04 	addi	r4,r4,4976
   80c38:	0081ca80 	call	81ca8 <puts>
			break;
   80c3c:	0001883a 	nop
		}
	}
	int a[M][N];
	//the all zero codeword:
	for(int i =0; i<M;i++)
   80c40:	e03f4b15 	stw	zero,-724(fp)
   80c44:	00001806 	br	80ca8 <main+0xf4>
	{
		for(int j=0;j<N;j++)
   80c48:	e03f4c15 	stw	zero,-720(fp)
   80c4c:	00001006 	br	80c90 <main+0xdc>
		{
			a[i][j] = 0;
   80c50:	e0bf4b17 	ldw	r2,-724(fp)
   80c54:	01400304 	movi	r5,12
   80c58:	1009883a 	mov	r4,r2
   80c5c:	0081b340 	call	81b34 <__mulsi3>
   80c60:	1007883a 	mov	r3,r2
   80c64:	e0bf4c17 	ldw	r2,-720(fp)
   80c68:	1885883a 	add	r2,r3,r2
   80c6c:	1085883a 	add	r2,r2,r2
   80c70:	1085883a 	add	r2,r2,r2
   80c74:	e0ff4a04 	addi	r3,fp,-728
   80c78:	1885883a 	add	r2,r3,r2
   80c7c:	10801904 	addi	r2,r2,100
   80c80:	10000015 	stw	zero,0(r2)
	}
	int a[M][N];
	//the all zero codeword:
	for(int i =0; i<M;i++)
	{
		for(int j=0;j<N;j++)
   80c84:	e0bf4c17 	ldw	r2,-720(fp)
   80c88:	10800044 	addi	r2,r2,1
   80c8c:	e0bf4c15 	stw	r2,-720(fp)
   80c90:	e0bf4c17 	ldw	r2,-720(fp)
   80c94:	10800310 	cmplti	r2,r2,12
   80c98:	103fed1e 	bne	r2,zero,80c50 <__alt_data_end+0xfffa0c50>
			break;
		}
	}
	int a[M][N];
	//the all zero codeword:
	for(int i =0; i<M;i++)
   80c9c:	e0bf4b17 	ldw	r2,-724(fp)
   80ca0:	10800044 	addi	r2,r2,1
   80ca4:	e0bf4b15 	stw	r2,-724(fp)
   80ca8:	e0bf4b17 	ldw	r2,-724(fp)
   80cac:	00bfe60e 	bge	zero,r2,80c48 <__alt_data_end+0xfffa0c48>
			{
				//a[i][j] = 1;
			}
		}
	}
	int b = 0;
   80cb0:	e03f4d15 	stw	zero,-716(fp)
	clear_display();
   80cb4:	00817ec0 	call	817ec <clear_display>
	set_position(0x00);
   80cb8:	0009883a 	mov	r4,zero
   80cbc:	00819200 	call	81920 <set_position>
	write_string("input in KEY1,3:");
   80cc0:	01000274 	movhi	r4,9
   80cc4:	2104e104 	addi	r4,r4,4996
   80cc8:	008189c0 	call	8189c <write_string>
	set_position(0x40);
   80ccc:	01001004 	movi	r4,64
   80cd0:	00819200 	call	81920 <set_position>
	while(1)
	{
		int bin_in = IORD_ALTERA_AVALON_PIO_DATA(0x101000);
   80cd4:	00800434 	movhi	r2,16
   80cd8:	10840004 	addi	r2,r2,4096
   80cdc:	10800037 	ldwio	r2,0(r2)
   80ce0:	e0bf5f15 	stw	r2,-644(fp)
		//printf("bin_in: %d \n", bin_in);
		if (bin_in != 0x03)
   80ce4:	e0bf5f17 	ldw	r2,-644(fp)
   80ce8:	108000e0 	cmpeqi	r2,r2,3
   80cec:	1000221e 	bne	r2,zero,80d78 <main+0x1c4>
		{
			if (bin_in == 2)
   80cf0:	e0bf5f17 	ldw	r2,-644(fp)
   80cf4:	10800098 	cmpnei	r2,r2,2
   80cf8:	10000e1e 	bne	r2,zero,80d34 <main+0x180>
			{
				a[0][b++] = 0;
   80cfc:	e0bf4d17 	ldw	r2,-716(fp)
   80d00:	10c00044 	addi	r3,r2,1
   80d04:	e0ff4d15 	stw	r3,-716(fp)
   80d08:	1085883a 	add	r2,r2,r2
   80d0c:	1085883a 	add	r2,r2,r2
   80d10:	e13f4a04 	addi	r4,fp,-728
   80d14:	2085883a 	add	r2,r4,r2
   80d18:	10801904 	addi	r2,r2,100
   80d1c:	10000015 	stw	zero,0(r2)
				write_char('0');
   80d20:	01000c04 	movi	r4,48
   80d24:	008183c0 	call	8183c <write_char>
				delay1ms(7);
   80d28:	010001c4 	movi	r4,7
   80d2c:	008167c0 	call	8167c <delay1ms>
   80d30:	00001106 	br	80d78 <main+0x1c4>
			}
			else if(bin_in  == 1)
   80d34:	e0bf5f17 	ldw	r2,-644(fp)
   80d38:	10800058 	cmpnei	r2,r2,1
   80d3c:	10000e1e 	bne	r2,zero,80d78 <main+0x1c4>
			{
				a[0][b++] = 1;
   80d40:	e0bf4d17 	ldw	r2,-716(fp)
   80d44:	10c00044 	addi	r3,r2,1
   80d48:	e0ff4d15 	stw	r3,-716(fp)
   80d4c:	1085883a 	add	r2,r2,r2
   80d50:	1085883a 	add	r2,r2,r2
   80d54:	e0ff4a04 	addi	r3,fp,-728
   80d58:	1885883a 	add	r2,r3,r2
   80d5c:	10801904 	addi	r2,r2,100
   80d60:	00c00044 	movi	r3,1
   80d64:	10c00015 	stw	r3,0(r2)
				write_char('1');
   80d68:	01000c44 	movi	r4,49
   80d6c:	008183c0 	call	8183c <write_char>
				delay1ms(7);
   80d70:	010001c4 	movi	r4,7
   80d74:	008167c0 	call	8167c <delay1ms>
			}
		}
		if( b == 12)
   80d78:	e0bf4d17 	ldw	r2,-716(fp)
   80d7c:	10800318 	cmpnei	r2,r2,12
   80d80:	10000126 	beq	r2,zero,80d88 <main+0x1d4>
			break;
		//delay1ms(15);
	}
   80d84:	003fd306 	br	80cd4 <__alt_data_end+0xfffa0cd4>
				write_char('1');
				delay1ms(7);
			}
		}
		if( b == 12)
			break;
   80d88:	0001883a 	nop
		//delay1ms(15);
	}

	//INITIALIZATION FROM BLINKY PROJ:
	int switch_data;
	int delay=0;
   80d8c:	e03f4e15 	stw	zero,-712(fp)
	int led_pattern=0x0;
   80d90:	e03f4f15 	stw	zero,-708(fp)
	clear_display();
   80d94:	00817ec0 	call	817ec <clear_display>
	set_position(0x00);
   80d98:	0009883a 	mov	r4,zero
   80d9c:	00819200 	call	81920 <set_position>
	write_string("Max Error SW0-2");
   80da0:	01000274 	movhi	r4,9
   80da4:	2104e604 	addi	r4,r4,5016
   80da8:	008189c0 	call	8189c <write_string>
	set_position(0x40);
   80dac:	01001004 	movi	r4,64
   80db0:	00819200 	call	81920 <set_position>
	write_string("KEY2 to advance");
   80db4:	01000274 	movhi	r4,9
   80db8:	2104ea04 	addi	r4,r4,5032
   80dbc:	008189c0 	call	8189c <write_string>
	alt_putstr("Ciao from Nios II!\n");
   80dc0:	01000274 	movhi	r4,9
   80dc4:	2104ee04 	addi	r4,r4,5048
   80dc8:	008f1b40 	call	8f1b4 <alt_putstr>

	while(1)
	{
		delay1ms(1);
   80dcc:	01000044 	movi	r4,1
   80dd0:	008167c0 	call	8167c <delay1ms>
		rand_counter++;
   80dd4:	e0bf4a17 	ldw	r2,-728(fp)
   80dd8:	10800044 	addi	r2,r2,1
   80ddc:	e0bf4a15 	stw	r2,-728(fp)
		startKey_pressed = IORD_ALTERA_AVALON_PIO_DATA(0x101010); //start_base
   80de0:	00800434 	movhi	r2,16
   80de4:	10840404 	addi	r2,r2,4112
   80de8:	10800037 	ldwio	r2,0(r2)
   80dec:	e0bf5e15 	stw	r2,-648(fp)
		if (startKey_pressed == 0)
   80df0:	e0bf5e17 	ldw	r2,-648(fp)
   80df4:	103ff51e 	bne	r2,zero,80dcc <__alt_data_end+0xfffa0dcc>
		{
			printf("start error... \n");
   80df8:	01000274 	movhi	r4,9
   80dfc:	2104f304 	addi	r4,r4,5068
   80e00:	0081ca80 	call	81ca8 <puts>
			break;
   80e04:	0001883a 	nop

	//Begin Input Routine:


	//Begin Error Routine:
	switch_data = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   80e08:	00800434 	movhi	r2,16
   80e0c:	10841004 	addi	r2,r2,4160
   80e10:	10800037 	ldwio	r2,0(r2)
   80e14:	e0bf6015 	stw	r2,-640(fp)




	//SOME TEST MATRICES:
	int testa[2][3] = {{1,2,3},{0,0,4}};
   80e18:	00800044 	movi	r2,1
   80e1c:	e0bf9f15 	stw	r2,-388(fp)
   80e20:	00800084 	movi	r2,2
   80e24:	e0bfa015 	stw	r2,-384(fp)
   80e28:	008000c4 	movi	r2,3
   80e2c:	e0bfa115 	stw	r2,-380(fp)
   80e30:	e03fa215 	stw	zero,-376(fp)
   80e34:	e03fa315 	stw	zero,-372(fp)
   80e38:	00800104 	movi	r2,4
   80e3c:	e0bfa415 	stw	r2,-368(fp)
	int testb[3][2] = {{2,3},{2,1},{1,5}};
   80e40:	00800084 	movi	r2,2
   80e44:	e0bfa515 	stw	r2,-364(fp)
   80e48:	008000c4 	movi	r2,3
   80e4c:	e0bfa615 	stw	r2,-360(fp)
   80e50:	00800084 	movi	r2,2
   80e54:	e0bfa715 	stw	r2,-356(fp)
   80e58:	00800044 	movi	r2,1
   80e5c:	e0bfa815 	stw	r2,-352(fp)
   80e60:	00800044 	movi	r2,1
   80e64:	e0bfa915 	stw	r2,-348(fp)
   80e68:	00800144 	movi	r2,5
   80e6c:	e0bfaa15 	stw	r2,-344(fp)
	//printf("Golay Generator Matrix: \n");
	//print(&G,24,12);
	printf("Input Codeword: c:\n");
   80e70:	01000274 	movhi	r4,9
   80e74:	2104f704 	addi	r4,r4,5084
   80e78:	0081ca80 	call	81ca8 <puts>
	print(&a, M,N );
   80e7c:	e0bf6304 	addi	r2,fp,-628
   80e80:	01800304 	movi	r6,12
   80e84:	01400044 	movi	r5,1
   80e88:	1009883a 	mov	r4,r2
   80e8c:	008026c0 	call	8026c <print>

	//ENCODE A USING GOLAY(24,12);
	//c = aG
	matrixMultiply12_24(a,G,c,M,N);
   80e90:	e13f6f04 	addi	r4,fp,-580
   80e94:	e0ff6304 	addi	r3,fp,-628
   80e98:	00800304 	movi	r2,12
   80e9c:	d8800015 	stw	r2,0(sp)
   80ea0:	01c00044 	movi	r7,1
   80ea4:	200d883a 	mov	r6,r4
   80ea8:	01400274 	movhi	r5,9
   80eac:	29460204 	addi	r5,r5,6152
   80eb0:	1809883a 	mov	r4,r3
   80eb4:	00804000 	call	80400 <matrixMultiply12_24>

	printf("Encoded word: \n");
   80eb8:	01000274 	movhi	r4,9
   80ebc:	2104fc04 	addi	r4,r4,5104
   80ec0:	0081ca80 	call	81ca8 <puts>
	print(&c,M,P);
   80ec4:	e0bf6f04 	addi	r2,fp,-580
   80ec8:	01800604 	movi	r6,24
   80ecc:	01400044 	movi	r5,1
   80ed0:	1009883a 	mov	r4,r2
   80ed4:	008026c0 	call	8026c <print>
	clear_display();
   80ed8:	00817ec0 	call	817ec <clear_display>
	set_position(0x40);
   80edc:	01001004 	movi	r4,64
   80ee0:	00819200 	call	81920 <set_position>
	write_string("INPUT WORD");
   80ee4:	01000274 	movhi	r4,9
   80ee8:	21050004 	addi	r4,r4,5120
   80eec:	008189c0 	call	8189c <write_string>
	print2D_toLCD(&c,M,P-12); //just first 12 bits are codeword
   80ef0:	e0bf6f04 	addi	r2,fp,-580
   80ef4:	01800304 	movi	r6,12
   80ef8:	01400044 	movi	r5,1
   80efc:	1009883a 	mov	r4,r2
   80f00:	00803280 	call	80328 <print2D_toLCD>
	delay1ms(40);
   80f04:	01000a04 	movi	r4,40
   80f08:	008167c0 	call	8167c <delay1ms>
	set_position(0x00);
   80f0c:	0009883a 	mov	r4,zero
   80f10:	00819200 	call	81920 <set_position>
	clear_display();
   80f14:	00817ec0 	call	817ec <clear_display>
	write_string("Beginning");
   80f18:	01000274 	movhi	r4,9
   80f1c:	21050304 	addi	r4,r4,5132
   80f20:	008189c0 	call	8189c <write_string>
	set_position(0x40);
   80f24:	01001004 	movi	r4,64
   80f28:	00819200 	call	81920 <set_position>
	write_string("Noise simul");
   80f2c:	01000274 	movhi	r4,9
   80f30:	21050604 	addi	r4,r4,5144
   80f34:	008189c0 	call	8189c <write_string>

  //copy encoded message to copy
  for(int i=0; i<M;i++){
   80f38:	e03f5015 	stw	zero,-704(fp)
   80f3c:	00002506 	br	80fd4 <main+0x420>
	  for(int j=0; j<P;j++)
   80f40:	e03f5115 	stw	zero,-700(fp)
   80f44:	00001d06 	br	80fbc <main+0x408>
		  cop[i][j] = c[i][j];
   80f48:	e0bf5017 	ldw	r2,-704(fp)
   80f4c:	01400604 	movi	r5,24
   80f50:	1009883a 	mov	r4,r2
   80f54:	0081b340 	call	81b34 <__mulsi3>
   80f58:	1007883a 	mov	r3,r2
   80f5c:	e0bf5117 	ldw	r2,-700(fp)
   80f60:	1885883a 	add	r2,r3,r2
   80f64:	1085883a 	add	r2,r2,r2
   80f68:	1085883a 	add	r2,r2,r2
   80f6c:	e13f4a04 	addi	r4,fp,-728
   80f70:	2085883a 	add	r2,r4,r2
   80f74:	10802504 	addi	r2,r2,148
   80f78:	14000017 	ldw	r16,0(r2)
   80f7c:	e0bf5017 	ldw	r2,-704(fp)
   80f80:	01400604 	movi	r5,24
   80f84:	1009883a 	mov	r4,r2
   80f88:	0081b340 	call	81b34 <__mulsi3>
   80f8c:	1007883a 	mov	r3,r2
   80f90:	e0bf5117 	ldw	r2,-700(fp)
   80f94:	1885883a 	add	r2,r3,r2
   80f98:	1085883a 	add	r2,r2,r2
   80f9c:	1085883a 	add	r2,r2,r2
   80fa0:	e0ff4a04 	addi	r3,fp,-728
   80fa4:	1885883a 	add	r2,r3,r2
   80fa8:	10803d04 	addi	r2,r2,244
   80fac:	14000015 	stw	r16,0(r2)
	set_position(0x40);
	write_string("Noise simul");

  //copy encoded message to copy
  for(int i=0; i<M;i++){
	  for(int j=0; j<P;j++)
   80fb0:	e0bf5117 	ldw	r2,-700(fp)
   80fb4:	10800044 	addi	r2,r2,1
   80fb8:	e0bf5115 	stw	r2,-700(fp)
   80fbc:	e0bf5117 	ldw	r2,-700(fp)
   80fc0:	10800610 	cmplti	r2,r2,24
   80fc4:	103fe01e 	bne	r2,zero,80f48 <__alt_data_end+0xfffa0f48>
	write_string("Beginning");
	set_position(0x40);
	write_string("Noise simul");

  //copy encoded message to copy
  for(int i=0; i<M;i++){
   80fc8:	e0bf5017 	ldw	r2,-704(fp)
   80fcc:	10800044 	addi	r2,r2,1
   80fd0:	e0bf5015 	stw	r2,-704(fp)
   80fd4:	e0bf5017 	ldw	r2,-704(fp)
   80fd8:	00bfd90e 	bge	zero,r2,80f40 <__alt_data_end+0xfffa0f40>
		  cop[i][j] = c[i][j];
  }

  //CHANNEL
  //create random errors:
  srand(rand_counter); //time() does not work on this system, seed always same
   80fdc:	e0bf4a17 	ldw	r2,-728(fp)
   80fe0:	1009883a 	mov	r4,r2
   80fe4:	0081cbc0 	call	81cbc <srand>
  for (int i=0; i< switch_data; i++ ){
   80fe8:	e03f5215 	stw	zero,-696(fp)
   80fec:	00001806 	br	81050 <main+0x49c>
	  int r = rand()%24;
   80ff0:	0081cd40 	call	81cd4 <rand>
   80ff4:	01400604 	movi	r5,24
   80ff8:	1009883a 	mov	r4,r2
   80ffc:	0081a040 	call	81a04 <__modsi3>
   81000:	e0bf6115 	stw	r2,-636(fp)
	  //printf("rand = %d",r);
	  c[0][r] = !c[0][r];
   81004:	e0bf6117 	ldw	r2,-636(fp)
   81008:	1085883a 	add	r2,r2,r2
   8100c:	1085883a 	add	r2,r2,r2
   81010:	e13f4a04 	addi	r4,fp,-728
   81014:	2085883a 	add	r2,r4,r2
   81018:	10802504 	addi	r2,r2,148
   8101c:	10800017 	ldw	r2,0(r2)
   81020:	1005003a 	cmpeq	r2,r2,zero
   81024:	10c03fcc 	andi	r3,r2,255
   81028:	e0bf6117 	ldw	r2,-636(fp)
   8102c:	1085883a 	add	r2,r2,r2
   81030:	1085883a 	add	r2,r2,r2
   81034:	e13f4a04 	addi	r4,fp,-728
   81038:	2085883a 	add	r2,r4,r2
   8103c:	10802504 	addi	r2,r2,148
   81040:	10c00015 	stw	r3,0(r2)
  }

  //CHANNEL
  //create random errors:
  srand(rand_counter); //time() does not work on this system, seed always same
  for (int i=0; i< switch_data; i++ ){
   81044:	e0bf5217 	ldw	r2,-696(fp)
   81048:	10800044 	addi	r2,r2,1
   8104c:	e0bf5215 	stw	r2,-696(fp)
   81050:	e0ff5217 	ldw	r3,-696(fp)
   81054:	e0bf6017 	ldw	r2,-640(fp)
   81058:	18bfe516 	blt	r3,r2,80ff0 <__alt_data_end+0xfffa0ff0>
//		  c[0][i] = !c[0][i];
//	  }
  }


  printf("NOISE ADDED\n");
   8105c:	01000274 	movhi	r4,9
   81060:	21050904 	addi	r4,r4,5156
   81064:	0081ca80 	call	81ca8 <puts>
//	  }
//	  else
//		  c[0][i] = 0;
//  }
  //c[1][10] = 0; c[1][12] = 0; c[1][13] = 1; c[1][14] = 0;
  printf("received: \n");
   81068:	01000274 	movhi	r4,9
   8106c:	21050c04 	addi	r4,r4,5168
   81070:	0081ca80 	call	81ca8 <puts>
  print(&c, 1, 24);
   81074:	e0bf6f04 	addi	r2,fp,-580
   81078:	01800604 	movi	r6,24
   8107c:	01400044 	movi	r5,1
   81080:	1009883a 	mov	r4,r2
   81084:	008026c0 	call	8026c <print>
  delay1ms(10);
   81088:	01000284 	movi	r4,10
   8108c:	008167c0 	call	8167c <delay1ms>
  clear_display();
   81090:	00817ec0 	call	817ec <clear_display>
  print2D_toLCD(&c,M,P);
   81094:	e0bf6f04 	addi	r2,fp,-580
   81098:	01800604 	movi	r6,24
   8109c:	01400044 	movi	r5,1
   810a0:	1009883a 	mov	r4,r2
   810a4:	00803280 	call	80328 <print2D_toLCD>
  //clear_display();
  //print2D_toLCD(&c,M,P);
  //END SHOW RECEIVED

  //CALCULATE NUMBER OF ERRORS:
  delay1ms(40);
   810a8:	01000a04 	movi	r4,40
   810ac:	008167c0 	call	8167c <delay1ms>
  int count =0;
   810b0:	e03f5315 	stw	zero,-692(fp)
  for(int i=0; i<M;i++){
   810b4:	e03f5415 	stw	zero,-688(fp)
   810b8:	00002906 	br	81160 <main+0x5ac>
	  for(int j=0; j<P;j++)
   810bc:	e03f5515 	stw	zero,-684(fp)
   810c0:	00002106 	br	81148 <main+0x594>
		  if(cop[i][j] != c[i][j])
   810c4:	e0bf5417 	ldw	r2,-688(fp)
   810c8:	01400604 	movi	r5,24
   810cc:	1009883a 	mov	r4,r2
   810d0:	0081b340 	call	81b34 <__mulsi3>
   810d4:	1007883a 	mov	r3,r2
   810d8:	e0bf5517 	ldw	r2,-684(fp)
   810dc:	1885883a 	add	r2,r3,r2
   810e0:	1085883a 	add	r2,r2,r2
   810e4:	1085883a 	add	r2,r2,r2
   810e8:	e0ff4a04 	addi	r3,fp,-728
   810ec:	1885883a 	add	r2,r3,r2
   810f0:	10803d04 	addi	r2,r2,244
   810f4:	14000017 	ldw	r16,0(r2)
   810f8:	e0bf5417 	ldw	r2,-688(fp)
   810fc:	01400604 	movi	r5,24
   81100:	1009883a 	mov	r4,r2
   81104:	0081b340 	call	81b34 <__mulsi3>
   81108:	1007883a 	mov	r3,r2
   8110c:	e0bf5517 	ldw	r2,-684(fp)
   81110:	1885883a 	add	r2,r3,r2
   81114:	1085883a 	add	r2,r2,r2
   81118:	1085883a 	add	r2,r2,r2
   8111c:	e13f4a04 	addi	r4,fp,-728
   81120:	2085883a 	add	r2,r4,r2
   81124:	10802504 	addi	r2,r2,148
   81128:	10800017 	ldw	r2,0(r2)
   8112c:	80800326 	beq	r16,r2,8113c <main+0x588>
			  count++;
   81130:	e0bf5317 	ldw	r2,-692(fp)
   81134:	10800044 	addi	r2,r2,1
   81138:	e0bf5315 	stw	r2,-692(fp)

  //CALCULATE NUMBER OF ERRORS:
  delay1ms(40);
  int count =0;
  for(int i=0; i<M;i++){
	  for(int j=0; j<P;j++)
   8113c:	e0bf5517 	ldw	r2,-684(fp)
   81140:	10800044 	addi	r2,r2,1
   81144:	e0bf5515 	stw	r2,-684(fp)
   81148:	e0bf5517 	ldw	r2,-684(fp)
   8114c:	10800610 	cmplti	r2,r2,24
   81150:	103fdc1e 	bne	r2,zero,810c4 <__alt_data_end+0xfffa10c4>
  //END SHOW RECEIVED

  //CALCULATE NUMBER OF ERRORS:
  delay1ms(40);
  int count =0;
  for(int i=0; i<M;i++){
   81154:	e0bf5417 	ldw	r2,-688(fp)
   81158:	10800044 	addi	r2,r2,1
   8115c:	e0bf5415 	stw	r2,-688(fp)
   81160:	e0bf5417 	ldw	r2,-688(fp)
   81164:	00bfd50e 	bge	zero,r2,810bc <__alt_data_end+0xfffa10bc>
	  for(int j=0; j<P;j++)
		  if(cop[i][j] != c[i][j])
			  count++;
  }
  set_position(0x00);
   81168:	0009883a 	mov	r4,zero
   8116c:	00819200 	call	81920 <set_position>
  clear_display();
   81170:	00817ec0 	call	817ec <clear_display>
  write_string("# of Error: ");
   81174:	01000274 	movhi	r4,9
   81178:	21050f04 	addi	r4,r4,5180
   8117c:	008189c0 	call	8189c <write_string>
  write_char(count +0x30);
   81180:	e0bf5317 	ldw	r2,-692(fp)
   81184:	10800c04 	addi	r2,r2,48
   81188:	10803fcc 	andi	r2,r2,255
   8118c:	1080201c 	xori	r2,r2,128
   81190:	10bfe004 	addi	r2,r2,-128
   81194:	1009883a 	mov	r4,r2
   81198:	008183c0 	call	8183c <write_char>
  printf("# of Error: %d \n", count);
   8119c:	e17f5317 	ldw	r5,-692(fp)
   811a0:	01000274 	movhi	r4,9
   811a4:	21051304 	addi	r4,r4,5196
   811a8:	0081b8c0 	call	81b8c <printf>
  //END NUMBER OF ERRORS
  delay1ms(40);
   811ac:	01000a04 	movi	r4,40
   811b0:	008167c0 	call	8167c <delay1ms>
  //calculate syndrome:
  int syndrome[1][12];
  int syndrome_2[1][12];


  matrixMultiply24_12(c,H,syndrome,1,24); //this works as expected now
   811b4:	e13fab04 	addi	r4,fp,-340
   811b8:	e0ff6f04 	addi	r3,fp,-580
   811bc:	00800604 	movi	r2,24
   811c0:	d8800015 	stw	r2,0(sp)
   811c4:	01c00044 	movi	r7,1
   811c8:	200d883a 	mov	r6,r4
   811cc:	01400274 	movhi	r5,9
   811d0:	2947b204 	addi	r5,r5,7880
   811d4:	1809883a 	mov	r4,r3
   811d8:	00805800 	call	80580 <matrixMultiply24_12>
  //calculate second syndrome!
  matrixMultiply12_12(syndrome,A,syndrome_2,1,12);
   811dc:	e13fb704 	addi	r4,fp,-292
   811e0:	e0ffab04 	addi	r3,fp,-340
   811e4:	00800304 	movi	r2,12
   811e8:	d8800015 	stw	r2,0(sp)
   811ec:	01c00044 	movi	r7,1
   811f0:	200d883a 	mov	r6,r4
   811f4:	01400274 	movhi	r5,9
   811f8:	29472204 	addi	r5,r5,7304
   811fc:	1809883a 	mov	r4,r3
   81200:	00807000 	call	80700 <matrixMultiply12_12>
  printf("Syndrome\n");
   81204:	01000274 	movhi	r4,9
   81208:	21051804 	addi	r4,r4,5216
   8120c:	0081ca80 	call	81ca8 <puts>
  print(&syndrome, 1, 12);
   81210:	e0bfab04 	addi	r2,fp,-340
   81214:	01800304 	movi	r6,12
   81218:	01400044 	movi	r5,1
   8121c:	1009883a 	mov	r4,r2
   81220:	008026c0 	call	8026c <print>
  printf("Weight of Syndrome: %d", weight(&syndrome,12));
   81224:	e0bfab04 	addi	r2,fp,-340
   81228:	01400304 	movi	r5,12
   8122c:	1009883a 	mov	r4,r2
   81230:	0080b380 	call	80b38 <weight>
   81234:	100b883a 	mov	r5,r2
   81238:	01000274 	movhi	r4,9
   8123c:	21051b04 	addi	r4,r4,5228
   81240:	0081b8c0 	call	81b8c <printf>
  int s1_weight = weight(&syndrome,12);
   81244:	e0bfab04 	addi	r2,fp,-340
   81248:	01400304 	movi	r5,12
   8124c:	1009883a 	mov	r4,r2
   81250:	0080b380 	call	80b38 <weight>
   81254:	e0bf6215 	stw	r2,-632(fp)
  int s2_weight;
  int correction_pattern[1][24];
  int flag =0;
   81258:	e03f5615 	stw	zero,-680(fp)
  for(int i=0;i<24;i++){
   8125c:	e03f5715 	stw	zero,-676(fp)
   81260:	00000a06 	br	8128c <main+0x6d8>
	  correction_pattern[0][i] = 0;
   81264:	e0bf5717 	ldw	r2,-676(fp)
   81268:	1085883a 	add	r2,r2,r2
   8126c:	1085883a 	add	r2,r2,r2
   81270:	e0ff4a04 	addi	r3,fp,-728
   81274:	1885883a 	add	r2,r3,r2
   81278:	10807904 	addi	r2,r2,484
   8127c:	10000015 	stw	zero,0(r2)
  printf("Weight of Syndrome: %d", weight(&syndrome,12));
  int s1_weight = weight(&syndrome,12);
  int s2_weight;
  int correction_pattern[1][24];
  int flag =0;
  for(int i=0;i<24;i++){
   81280:	e0bf5717 	ldw	r2,-676(fp)
   81284:	10800044 	addi	r2,r2,1
   81288:	e0bf5715 	stw	r2,-676(fp)
   8128c:	e0bf5717 	ldw	r2,-676(fp)
   81290:	10800610 	cmplti	r2,r2,24
   81294:	103ff31e 	bne	r2,zero,81264 <__alt_data_end+0xfffa1264>
	  correction_pattern[0][i] = 0;
  }

  //THE GOLAY DECODING ALGORITHM:
  if (s1_weight <=3) //CASE 1 weight <3
   81298:	e0bf6217 	ldw	r2,-632(fp)
   8129c:	10800108 	cmpgei	r2,r2,4
   812a0:	10001a1e 	bne	r2,zero,8130c <main+0x758>
  {
	  printf("\n case 1 \n");
   812a4:	01000274 	movhi	r4,9
   812a8:	21052104 	addi	r4,r4,5252
   812ac:	0081ca80 	call	81ca8 <puts>
	  for(int i=0; i<12;i++){
   812b0:	e03f5815 	stw	zero,-672(fp)
   812b4:	00001106 	br	812fc <main+0x748>
		  correction_pattern[0][i] = syndrome[0][i];
   812b8:	e0bf5817 	ldw	r2,-672(fp)
   812bc:	1085883a 	add	r2,r2,r2
   812c0:	1085883a 	add	r2,r2,r2
   812c4:	e13f4a04 	addi	r4,fp,-728
   812c8:	2085883a 	add	r2,r4,r2
   812cc:	10806104 	addi	r2,r2,388
   812d0:	10c00017 	ldw	r3,0(r2)
   812d4:	e0bf5817 	ldw	r2,-672(fp)
   812d8:	1085883a 	add	r2,r2,r2
   812dc:	1085883a 	add	r2,r2,r2
   812e0:	e13f4a04 	addi	r4,fp,-728
   812e4:	2085883a 	add	r2,r4,r2
   812e8:	10807904 	addi	r2,r2,484
   812ec:	10c00015 	stw	r3,0(r2)

  //THE GOLAY DECODING ALGORITHM:
  if (s1_weight <=3) //CASE 1 weight <3
  {
	  printf("\n case 1 \n");
	  for(int i=0; i<12;i++){
   812f0:	e0bf5817 	ldw	r2,-672(fp)
   812f4:	10800044 	addi	r2,r2,1
   812f8:	e0bf5815 	stw	r2,-672(fp)
   812fc:	e0bf5817 	ldw	r2,-672(fp)
   81300:	10800310 	cmplti	r2,r2,12
   81304:	103fec1e 	bne	r2,zero,812b8 <__alt_data_end+0xfffa12b8>
   81308:	00009d06 	br	81580 <main+0x9cc>
		  correction_pattern[0][i] = syndrome[0][i];
	  }
  }
  else
  {	 //check each row in the A matrix
	  for(int j=0; j<12; j++)
   8130c:	e03f5915 	stw	zero,-668(fp)
   81310:	00003606 	br	813ec <main+0x838>
	  {
		  int result[1][12];
		  Array_Add(syndrome,A,result,j);
   81314:	e0fff304 	addi	r3,fp,-52
   81318:	e0bfab04 	addi	r2,fp,-340
   8131c:	e1ff5917 	ldw	r7,-668(fp)
   81320:	180d883a 	mov	r6,r3
   81324:	01400274 	movhi	r5,9
   81328:	29472204 	addi	r5,r5,7304
   8132c:	1009883a 	mov	r4,r2
   81330:	00808800 	call	80880 <Array_Add>
		  if(weight(&result,12)<=2){
   81334:	e0bff304 	addi	r2,fp,-52
   81338:	01400304 	movi	r5,12
   8133c:	1009883a 	mov	r4,r2
   81340:	0080b380 	call	80b38 <weight>
   81344:	108000c8 	cmpgei	r2,r2,3
   81348:	1000251e 	bne	r2,zero,813e0 <main+0x82c>
			  printf("\n case loop 1 \n");
   8134c:	01000274 	movhi	r4,9
   81350:	21052404 	addi	r4,r4,5264
   81354:	0081ca80 	call	81ca8 <puts>
			  for (int i=0; i<12; i++)
   81358:	e03f5a15 	stw	zero,-664(fp)
   8135c:	00001106 	br	813a4 <main+0x7f0>
			  {
				  correction_pattern[0][i] = result[0][i];
   81360:	e0bf5a17 	ldw	r2,-664(fp)
   81364:	1085883a 	add	r2,r2,r2
   81368:	1085883a 	add	r2,r2,r2
   8136c:	e0ff4a04 	addi	r3,fp,-728
   81370:	1885883a 	add	r2,r3,r2
   81374:	1080a904 	addi	r2,r2,676
   81378:	10c00017 	ldw	r3,0(r2)
   8137c:	e0bf5a17 	ldw	r2,-664(fp)
   81380:	1085883a 	add	r2,r2,r2
   81384:	1085883a 	add	r2,r2,r2
   81388:	e13f4a04 	addi	r4,fp,-728
   8138c:	2085883a 	add	r2,r4,r2
   81390:	10807904 	addi	r2,r2,484
   81394:	10c00015 	stw	r3,0(r2)
	  {
		  int result[1][12];
		  Array_Add(syndrome,A,result,j);
		  if(weight(&result,12)<=2){
			  printf("\n case loop 1 \n");
			  for (int i=0; i<12; i++)
   81398:	e0bf5a17 	ldw	r2,-664(fp)
   8139c:	10800044 	addi	r2,r2,1
   813a0:	e0bf5a15 	stw	r2,-664(fp)
   813a4:	e0bf5a17 	ldw	r2,-664(fp)
   813a8:	10800310 	cmplti	r2,r2,12
   813ac:	103fec1e 	bne	r2,zero,81360 <__alt_data_end+0xfffa1360>
			  {
				  correction_pattern[0][i] = result[0][i];
			  }
			  correction_pattern[0][j+12] = 1;
   813b0:	e0bf5917 	ldw	r2,-668(fp)
   813b4:	10800304 	addi	r2,r2,12
   813b8:	1085883a 	add	r2,r2,r2
   813bc:	1085883a 	add	r2,r2,r2
   813c0:	e0ff4a04 	addi	r3,fp,-728
   813c4:	1885883a 	add	r2,r3,r2
   813c8:	10807904 	addi	r2,r2,484
   813cc:	00c00044 	movi	r3,1
   813d0:	10c00015 	stw	r3,0(r2)
			  flag = 1;
   813d4:	00800044 	movi	r2,1
   813d8:	e0bf5615 	stw	r2,-680(fp)
   813dc:	00000606 	br	813f8 <main+0x844>
		  correction_pattern[0][i] = syndrome[0][i];
	  }
  }
  else
  {	 //check each row in the A matrix
	  for(int j=0; j<12; j++)
   813e0:	e0bf5917 	ldw	r2,-668(fp)
   813e4:	10800044 	addi	r2,r2,1
   813e8:	e0bf5915 	stw	r2,-668(fp)
   813ec:	e0bf5917 	ldw	r2,-668(fp)
   813f0:	10800310 	cmplti	r2,r2,12
   813f4:	103fc71e 	bne	r2,zero,81314 <__alt_data_end+0xfffa1314>
			  correction_pattern[0][j+12] = 1;
			  flag = 1;
			  break;
		  }
	  }
	  if((weight(syndrome_2,12)<=3)&&(flag ==0))
   813f8:	e0bfb704 	addi	r2,fp,-292
   813fc:	01400304 	movi	r5,12
   81400:	1009883a 	mov	r4,r2
   81404:	0080b380 	call	80b38 <weight>
   81408:	10800108 	cmpgei	r2,r2,4
   8140c:	10001e1e 	bne	r2,zero,81488 <main+0x8d4>
   81410:	e0bf5617 	ldw	r2,-680(fp)
   81414:	10001c1e 	bne	r2,zero,81488 <main+0x8d4>
	  {
		  printf("\n case 2 \n");
   81418:	01000274 	movhi	r4,9
   8141c:	21052804 	addi	r4,r4,5280
   81420:	0081ca80 	call	81ca8 <puts>
		  for(int i = 12; i<24; i++)
   81424:	00800304 	movi	r2,12
   81428:	e0bf5b15 	stw	r2,-660(fp)
   8142c:	00001206 	br	81478 <main+0x8c4>
			  correction_pattern[0][i] = syndrome_2[0][i-12];
   81430:	e0bf5b17 	ldw	r2,-660(fp)
   81434:	10bffd04 	addi	r2,r2,-12
   81438:	1085883a 	add	r2,r2,r2
   8143c:	1085883a 	add	r2,r2,r2
   81440:	e13f4a04 	addi	r4,fp,-728
   81444:	2085883a 	add	r2,r4,r2
   81448:	10806d04 	addi	r2,r2,436
   8144c:	10c00017 	ldw	r3,0(r2)
   81450:	e0bf5b17 	ldw	r2,-660(fp)
   81454:	1085883a 	add	r2,r2,r2
   81458:	1085883a 	add	r2,r2,r2
   8145c:	e13f4a04 	addi	r4,fp,-728
   81460:	2085883a 	add	r2,r4,r2
   81464:	10807904 	addi	r2,r2,484
   81468:	10c00015 	stw	r3,0(r2)
		  }
	  }
	  if((weight(syndrome_2,12)<=3)&&(flag ==0))
	  {
		  printf("\n case 2 \n");
		  for(int i = 12; i<24; i++)
   8146c:	e0bf5b17 	ldw	r2,-660(fp)
   81470:	10800044 	addi	r2,r2,1
   81474:	e0bf5b15 	stw	r2,-660(fp)
   81478:	e0bf5b17 	ldw	r2,-660(fp)
   8147c:	10800610 	cmplti	r2,r2,24
   81480:	103feb1e 	bne	r2,zero,81430 <__alt_data_end+0xfffa1430>
   81484:	00003e06 	br	81580 <main+0x9cc>
			  correction_pattern[0][i] = syndrome_2[0][i-12];
	  }
	  else if(flag ==0)
   81488:	e0bf5617 	ldw	r2,-680(fp)
   8148c:	10003c1e 	bne	r2,zero,81580 <main+0x9cc>
	  {			  //check each row in the A matrix again
		  for(int k=0; k<12;k++)
   81490:	e03f5c15 	stw	zero,-656(fp)
   81494:	00003706 	br	81574 <main+0x9c0>
		  {
			  int result[1][12];
			  Array_Add(syndrome_2,A,result,k);
   81498:	e0fff304 	addi	r3,fp,-52
   8149c:	e0bfb704 	addi	r2,fp,-292
   814a0:	e1ff5c17 	ldw	r7,-656(fp)
   814a4:	180d883a 	mov	r6,r3
   814a8:	01400274 	movhi	r5,9
   814ac:	29472204 	addi	r5,r5,7304
   814b0:	1009883a 	mov	r4,r2
   814b4:	00808800 	call	80880 <Array_Add>
			  if(weight(&result,12)<=2){
   814b8:	e0bff304 	addi	r2,fp,-52
   814bc:	01400304 	movi	r5,12
   814c0:	1009883a 	mov	r4,r2
   814c4:	0080b380 	call	80b38 <weight>
   814c8:	108000c8 	cmpgei	r2,r2,3
   814cc:	1000261e 	bne	r2,zero,81568 <main+0x9b4>
				  printf("\n case loop 2 \n");
   814d0:	01000274 	movhi	r4,9
   814d4:	21052b04 	addi	r4,r4,5292
   814d8:	0081ca80 	call	81ca8 <puts>
				  for (int i=12; i<24; i++)
   814dc:	00800304 	movi	r2,12
   814e0:	e0bf5d15 	stw	r2,-652(fp)
   814e4:	00001206 	br	81530 <main+0x97c>
				  {

					  correction_pattern[0][i] = result[0][i-12];
   814e8:	e0bf5d17 	ldw	r2,-652(fp)
   814ec:	10bffd04 	addi	r2,r2,-12
   814f0:	1085883a 	add	r2,r2,r2
   814f4:	1085883a 	add	r2,r2,r2
   814f8:	e0ff4a04 	addi	r3,fp,-728
   814fc:	1885883a 	add	r2,r3,r2
   81500:	1080a904 	addi	r2,r2,676
   81504:	10c00017 	ldw	r3,0(r2)
   81508:	e0bf5d17 	ldw	r2,-652(fp)
   8150c:	1085883a 	add	r2,r2,r2
   81510:	1085883a 	add	r2,r2,r2
   81514:	e13f4a04 	addi	r4,fp,-728
   81518:	2085883a 	add	r2,r4,r2
   8151c:	10807904 	addi	r2,r2,484
   81520:	10c00015 	stw	r3,0(r2)
		  {
			  int result[1][12];
			  Array_Add(syndrome_2,A,result,k);
			  if(weight(&result,12)<=2){
				  printf("\n case loop 2 \n");
				  for (int i=12; i<24; i++)
   81524:	e0bf5d17 	ldw	r2,-652(fp)
   81528:	10800044 	addi	r2,r2,1
   8152c:	e0bf5d15 	stw	r2,-652(fp)
   81530:	e0bf5d17 	ldw	r2,-652(fp)
   81534:	10800610 	cmplti	r2,r2,24
   81538:	103feb1e 	bne	r2,zero,814e8 <__alt_data_end+0xfffa14e8>
				  {

					  correction_pattern[0][i] = result[0][i-12];
				  }
				  correction_pattern[0][k] = 1;
   8153c:	e0bf5c17 	ldw	r2,-656(fp)
   81540:	1085883a 	add	r2,r2,r2
   81544:	1085883a 	add	r2,r2,r2
   81548:	e0ff4a04 	addi	r3,fp,-728
   8154c:	1885883a 	add	r2,r3,r2
   81550:	10807904 	addi	r2,r2,484
   81554:	00c00044 	movi	r3,1
   81558:	10c00015 	stw	r3,0(r2)
				  flag = 1;
   8155c:	00800044 	movi	r2,1
   81560:	e0bf5615 	stw	r2,-680(fp)
   81564:	00000606 	br	81580 <main+0x9cc>
		  for(int i = 12; i<24; i++)
			  correction_pattern[0][i] = syndrome_2[0][i-12];
	  }
	  else if(flag ==0)
	  {			  //check each row in the A matrix again
		  for(int k=0; k<12;k++)
   81568:	e0bf5c17 	ldw	r2,-656(fp)
   8156c:	10800044 	addi	r2,r2,1
   81570:	e0bf5c15 	stw	r2,-656(fp)
   81574:	e0bf5c17 	ldw	r2,-656(fp)
   81578:	10800310 	cmplti	r2,r2,12
   8157c:	103fc61e 	bne	r2,zero,81498 <__alt_data_end+0xfffa1498>
		  }
	  }
  }
  //CORRECTION CODEWORD = correction_pattern + received_codeword in GF(2)
  int corrected[1][24];
  Array_Add24(correction_pattern,c,corrected,0);
   81580:	e13fdb04 	addi	r4,fp,-148
   81584:	e0ff6f04 	addi	r3,fp,-580
   81588:	e0bfc304 	addi	r2,fp,-244
   8158c:	000f883a 	mov	r7,zero
   81590:	200d883a 	mov	r6,r4
   81594:	180b883a 	mov	r5,r3
   81598:	1009883a 	mov	r4,r2
   8159c:	00809680 	call	80968 <Array_Add24>
  //printf("\n");
  printf("Corrected Encoded Word:\n");
   815a0:	01000274 	movhi	r4,9
   815a4:	21052f04 	addi	r4,r4,5308
   815a8:	0081ca80 	call	81ca8 <puts>
  print(&corrected,1,24);
   815ac:	e0bfdb04 	addi	r2,fp,-148
   815b0:	01800604 	movi	r6,24
   815b4:	01400044 	movi	r5,1
   815b8:	1009883a 	mov	r4,r2
   815bc:	008026c0 	call	8026c <print>
  printf("Corrected Codeword:\n");
   815c0:	01000274 	movhi	r4,9
   815c4:	21053504 	addi	r4,r4,5332
   815c8:	0081ca80 	call	81ca8 <puts>
  print(&corrected,1,12);
   815cc:	e0bfdb04 	addi	r2,fp,-148
   815d0:	01800304 	movi	r6,12
   815d4:	01400044 	movi	r5,1
   815d8:	1009883a 	mov	r4,r2
   815dc:	008026c0 	call	8026c <print>

  delay1ms(4);
   815e0:	01000104 	movi	r4,4
   815e4:	008167c0 	call	8167c <delay1ms>
  clear_display();
   815e8:	00817ec0 	call	817ec <clear_display>
  set_position(0x40);
   815ec:	01001004 	movi	r4,64
   815f0:	00819200 	call	81920 <set_position>
  write_string("corrected code");
   815f4:	01000274 	movhi	r4,9
   815f8:	21053a04 	addi	r4,r4,5352
   815fc:	008189c0 	call	8189c <write_string>
  delay1ms(4);
   81600:	01000104 	movi	r4,4
   81604:	008167c0 	call	8167c <delay1ms>
  print2D_toLCD(&corrected,M,P-12);
   81608:	e0bfdb04 	addi	r2,fp,-148
   8160c:	01800304 	movi	r6,12
   81610:	01400044 	movi	r5,1
   81614:	1009883a 	mov	r4,r2
   81618:	00803280 	call	80328 <print2D_toLCD>

while(1) {
	switch_data = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
   8161c:	00800434 	movhi	r2,16
   81620:	10841004 	addi	r2,r2,4160
   81624:	10800037 	ldwio	r2,0(r2)
   81628:	e0bf6015 	stw	r2,-640(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, switch_data & led_pattern);
   8162c:	e0ff6017 	ldw	r3,-640(fp)
   81630:	e0bf4f17 	ldw	r2,-708(fp)
   81634:	1886703a 	and	r3,r3,r2
   81638:	00800434 	movhi	r2,16
   8163c:	10840c04 	addi	r2,r2,4144
   81640:	10c00035 	stwio	r3,0(r2)
	delay = 0;
   81644:	e03f4e15 	stw	zero,-712(fp)
	while(delay < 200000)
   81648:	00000306 	br	81658 <main+0xaa4>
	{
		delay++;
   8164c:	e0bf4e17 	ldw	r2,-712(fp)
   81650:	10800044 	addi	r2,r2,1
   81654:	e0bf4e15 	stw	r2,-712(fp)

while(1) {
	switch_data = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, switch_data & led_pattern);
	delay = 0;
	while(delay < 200000)
   81658:	e0ff4e17 	ldw	r3,-712(fp)
   8165c:	008000f4 	movhi	r2,3
   81660:	10834fc4 	addi	r2,r2,3391
   81664:	10fff90e 	bge	r2,r3,8164c <__alt_data_end+0xfffa164c>
	{
		delay++;
	}
	led_pattern ^= switch_data; // toggle LEDs on selected switches
   81668:	e0ff4f17 	ldw	r3,-708(fp)
   8166c:	e0bf6017 	ldw	r2,-640(fp)
   81670:	1884f03a 	xor	r2,r3,r2
   81674:	e0bf4f15 	stw	r2,-708(fp)
}
   81678:	003fe806 	br	8161c <__alt_data_end+0xfffa161c>

0008167c <delay1ms>:
 *
 *  Created on: Nov 30, 2023
 *      Author: mmadler
 */
#include "lcd.h"
void delay1ms(int loops){
   8167c:	defffc04 	addi	sp,sp,-16
   81680:	df000315 	stw	fp,12(sp)
   81684:	df000304 	addi	fp,sp,12
   81688:	e13fff15 	stw	r4,-4(fp)
	for (int i =0; i<loops; i++)
   8168c:	e03ffd15 	stw	zero,-12(fp)
   81690:	00000b06 	br	816c0 <delay1ms+0x44>
	{
		int count = 0;
   81694:	e03ffe15 	stw	zero,-8(fp)
		while(count < 50000){count++;} //1ms
   81698:	00000306 	br	816a8 <delay1ms+0x2c>
   8169c:	e0bffe17 	ldw	r2,-8(fp)
   816a0:	10800044 	addi	r2,r2,1
   816a4:	e0bffe15 	stw	r2,-8(fp)
   816a8:	e0bffe17 	ldw	r2,-8(fp)
   816ac:	00f0d3d4 	movui	r3,49999
   816b0:	18bffa0e 	bge	r3,r2,8169c <__alt_data_end+0xfffa169c>
 *  Created on: Nov 30, 2023
 *      Author: mmadler
 */
#include "lcd.h"
void delay1ms(int loops){
	for (int i =0; i<loops; i++)
   816b4:	e0bffd17 	ldw	r2,-12(fp)
   816b8:	10800044 	addi	r2,r2,1
   816bc:	e0bffd15 	stw	r2,-12(fp)
   816c0:	e0fffd17 	ldw	r3,-12(fp)
   816c4:	e0bfff17 	ldw	r2,-4(fp)
   816c8:	18bff216 	blt	r3,r2,81694 <__alt_data_end+0xfffa1694>
	{
		int count = 0;
		while(count < 50000){count++;} //1ms
	}
}
   816cc:	0001883a 	nop
   816d0:	e037883a 	mov	sp,fp
   816d4:	df000017 	ldw	fp,0(sp)
   816d8:	dec00104 	addi	sp,sp,4
   816dc:	f800283a 	ret

000816e0 <Init_LCD>:
void Init_LCD(void){
   816e0:	defffd04 	addi	sp,sp,-12
   816e4:	dfc00215 	stw	ra,8(sp)
   816e8:	df000115 	stw	fp,4(sp)
   816ec:	df000104 	addi	fp,sp,4
	for(int i =0; i<4; i++){
   816f0:	e03fff15 	stw	zero,-4(fp)
   816f4:	00000d06 	br	8172c <Init_LCD+0x4c>
		//delay1ms(10);
		IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0b110000111011); //EN = 1
   816f8:	00c30ec4 	movi	r3,3131
   816fc:	00800434 	movhi	r2,16
   81700:	10840804 	addi	r2,r2,4128
   81704:	10c00035 	stwio	r3,0(r2)
		delay1ms(1);
   81708:	01000044 	movi	r4,1
   8170c:	008167c0 	call	8167c <delay1ms>
		IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0x43B);//0b010000111011);//"00111011" then " EN = 0
   81710:	00c10ec4 	movi	r3,1083
   81714:	00800434 	movhi	r2,16
   81718:	10840804 	addi	r2,r2,4128
   8171c:	10c00035 	stwio	r3,0(r2)
		int count = 0;
		while(count < 50000){count++;} //1ms
	}
}
void Init_LCD(void){
	for(int i =0; i<4; i++){
   81720:	e0bfff17 	ldw	r2,-4(fp)
   81724:	10800044 	addi	r2,r2,1
   81728:	e0bfff15 	stw	r2,-4(fp)
   8172c:	e0bfff17 	ldw	r2,-4(fp)
   81730:	10800110 	cmplti	r2,r2,4
   81734:	103ff01e 	bne	r2,zero,816f8 <__alt_data_end+0xfffa16f8>
		IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0b110000111011); //EN = 1
		delay1ms(1);
		IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0x43B);//0b010000111011);//"00111011" then " EN = 0
	}
	//clear disp:
	delay1ms(1);
   81738:	01000044 	movi	r4,1
   8173c:	008167c0 	call	8167c <delay1ms>
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0b1100000000001); //EN = 1
   81740:	00c60044 	movi	r3,6145
   81744:	00800434 	movhi	r2,16
   81748:	10840804 	addi	r2,r2,4128
   8174c:	10c00035 	stwio	r3,0(r2)
	delay1ms(1);
   81750:	01000044 	movi	r4,1
   81754:	008167c0 	call	8167c <delay1ms>
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0x401);//0b010000111011);//"00111011" then "
   81758:	00c10044 	movi	r3,1025
   8175c:	00800434 	movhi	r2,16
   81760:	10840804 	addi	r2,r2,4128
   81764:	10c00035 	stwio	r3,0(r2)
	//DisplayOnOff:

	delay1ms(1);
   81768:	01000044 	movi	r4,1
   8176c:	008167c0 	call	8167c <delay1ms>
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0b110000001100);
   81770:	00c30304 	movi	r3,3084
   81774:	00800434 	movhi	r2,16
   81778:	10840804 	addi	r2,r2,4128
   8177c:	10c00035 	stwio	r3,0(r2)
	delay1ms(1);
   81780:	01000044 	movi	r4,1
   81784:	008167c0 	call	8167c <delay1ms>
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0x40C);//0b010000111011);//"00111011" then " EN = 0
   81788:	00c10304 	movi	r3,1036
   8178c:	00800434 	movhi	r2,16
   81790:	10840804 	addi	r2,r2,4128
   81794:	10c00035 	stwio	r3,0(r2)
	//EntryMode:


	delay1ms(1);
   81798:	01000044 	movi	r4,1
   8179c:	008167c0 	call	8167c <delay1ms>
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0b110000000110); //EN = 1
   817a0:	00c30184 	movi	r3,3078
   817a4:	00800434 	movhi	r2,16
   817a8:	10840804 	addi	r2,r2,4128
   817ac:	10c00035 	stwio	r3,0(r2)
	delay1ms(1);
   817b0:	01000044 	movi	r4,1
   817b4:	008167c0 	call	8167c <delay1ms>
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0x406);//0b010000111011);//"00111011" then " EN = 0
   817b8:	00c10184 	movi	r3,1030
   817bc:	00800434 	movhi	r2,16
   817c0:	10840804 	addi	r2,r2,4128
   817c4:	10c00035 	stwio	r3,0(r2)
	alt_putstr("Initialization Done!\n");
   817c8:	01000274 	movhi	r4,9
   817cc:	21053e04 	addi	r4,r4,5368
   817d0:	008f1b40 	call	8f1b4 <alt_putstr>
}
   817d4:	0001883a 	nop
   817d8:	e037883a 	mov	sp,fp
   817dc:	dfc00117 	ldw	ra,4(sp)
   817e0:	df000017 	ldw	fp,0(sp)
   817e4:	dec00204 	addi	sp,sp,8
   817e8:	f800283a 	ret

000817ec <clear_display>:

//clear the LCD:
void clear_display(void)
{
   817ec:	defffe04 	addi	sp,sp,-8
   817f0:	dfc00115 	stw	ra,4(sp)
   817f4:	df000015 	stw	fp,0(sp)
   817f8:	d839883a 	mov	fp,sp
	//IOWR_ALTERA_AVALON_PIO_DATA(0x101000, 0x401);//0b010000111011);//"00111011" then "
	//delay1ms(5);
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0xC01); //EN = 1
   817fc:	00c30044 	movi	r3,3073
   81800:	00800434 	movhi	r2,16
   81804:	10840804 	addi	r2,r2,4128
   81808:	10c00035 	stwio	r3,0(r2)
	delay1ms(1);
   8180c:	01000044 	movi	r4,1
   81810:	008167c0 	call	8167c <delay1ms>
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0x401); // EN = 0
   81814:	00c10044 	movi	r3,1025
   81818:	00800434 	movhi	r2,16
   8181c:	10840804 	addi	r2,r2,4128
   81820:	10c00035 	stwio	r3,0(r2)
}
   81824:	0001883a 	nop
   81828:	e037883a 	mov	sp,fp
   8182c:	dfc00117 	ldw	ra,4(sp)
   81830:	df000017 	ldw	fp,0(sp)
   81834:	dec00204 	addi	sp,sp,8
   81838:	f800283a 	ret

0008183c <write_char>:

void write_char(char input){
   8183c:	defffd04 	addi	sp,sp,-12
   81840:	dfc00215 	stw	ra,8(sp)
   81844:	df000115 	stw	fp,4(sp)
   81848:	df000104 	addi	fp,sp,4
   8184c:	2005883a 	mov	r2,r4
   81850:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0xE00 + input);
   81854:	e0bfff07 	ldb	r2,-4(fp)
   81858:	10c38004 	addi	r3,r2,3584
   8185c:	00800434 	movhi	r2,16
   81860:	10840804 	addi	r2,r2,4128
   81864:	10c00035 	stwio	r3,0(r2)
	delay1ms(1);
   81868:	01000044 	movi	r4,1
   8186c:	008167c0 	call	8167c <delay1ms>
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020,  0x600 + input);
   81870:	e0bfff07 	ldb	r2,-4(fp)
   81874:	10c18004 	addi	r3,r2,1536
   81878:	00800434 	movhi	r2,16
   8187c:	10840804 	addi	r2,r2,4128
   81880:	10c00035 	stwio	r3,0(r2)
}
   81884:	0001883a 	nop
   81888:	e037883a 	mov	sp,fp
   8188c:	dfc00117 	ldw	ra,4(sp)
   81890:	df000017 	ldw	fp,0(sp)
   81894:	dec00204 	addi	sp,sp,8
   81898:	f800283a 	ret

0008189c <write_string>:

void write_string(char* str)
{
   8189c:	defffc04 	addi	sp,sp,-16
   818a0:	dfc00315 	stw	ra,12(sp)
   818a4:	df000215 	stw	fp,8(sp)
   818a8:	df000204 	addi	fp,sp,8
   818ac:	e13fff15 	stw	r4,-4(fp)
	int i=0;
   818b0:	e03ffe15 	stw	zero,-8(fp)
	while(str[i] != '\0'){
   818b4:	00000c06 	br	818e8 <write_string+0x4c>
		write_char(str[i]);
   818b8:	e0bffe17 	ldw	r2,-8(fp)
   818bc:	e0ffff17 	ldw	r3,-4(fp)
   818c0:	1885883a 	add	r2,r3,r2
   818c4:	10800003 	ldbu	r2,0(r2)
   818c8:	10803fcc 	andi	r2,r2,255
   818cc:	1080201c 	xori	r2,r2,128
   818d0:	10bfe004 	addi	r2,r2,-128
   818d4:	1009883a 	mov	r4,r2
   818d8:	008183c0 	call	8183c <write_char>
		i++;
   818dc:	e0bffe17 	ldw	r2,-8(fp)
   818e0:	10800044 	addi	r2,r2,1
   818e4:	e0bffe15 	stw	r2,-8(fp)
}

void write_string(char* str)
{
	int i=0;
	while(str[i] != '\0'){
   818e8:	e0bffe17 	ldw	r2,-8(fp)
   818ec:	e0ffff17 	ldw	r3,-4(fp)
   818f0:	1885883a 	add	r2,r3,r2
   818f4:	10800003 	ldbu	r2,0(r2)
   818f8:	10803fcc 	andi	r2,r2,255
   818fc:	1080201c 	xori	r2,r2,128
   81900:	10bfe004 	addi	r2,r2,-128
   81904:	103fec1e 	bne	r2,zero,818b8 <__alt_data_end+0xfffa18b8>
		write_char(str[i]);
		i++;
	}
}
   81908:	0001883a 	nop
   8190c:	e037883a 	mov	sp,fp
   81910:	dfc00117 	ldw	ra,4(sp)
   81914:	df000017 	ldw	fp,0(sp)
   81918:	dec00204 	addi	sp,sp,8
   8191c:	f800283a 	ret

00081920 <set_position>:

void set_position(uint8_t pos)
{
   81920:	defffd04 	addi	sp,sp,-12
   81924:	dfc00215 	stw	ra,8(sp)
   81928:	df000115 	stw	fp,4(sp)
   8192c:	df000104 	addi	fp,sp,4
   81930:	2005883a 	mov	r2,r4
   81934:	e0bfff05 	stb	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0xC80 + pos); //EN = 1
   81938:	e0bfff03 	ldbu	r2,-4(fp)
   8193c:	10c32004 	addi	r3,r2,3200
   81940:	00800434 	movhi	r2,16
   81944:	10840804 	addi	r2,r2,4128
   81948:	10c00035 	stwio	r3,0(r2)
	delay1ms(1);
   8194c:	01000044 	movi	r4,1
   81950:	008167c0 	call	8167c <delay1ms>
	IOWR_ALTERA_AVALON_PIO_DATA(0x101020, 0x480 + pos); // EN = 0
   81954:	e0bfff03 	ldbu	r2,-4(fp)
   81958:	10c12004 	addi	r3,r2,1152
   8195c:	00800434 	movhi	r2,16
   81960:	10840804 	addi	r2,r2,4128
   81964:	10c00035 	stwio	r3,0(r2)
}
   81968:	0001883a 	nop
   8196c:	e037883a 	mov	sp,fp
   81970:	dfc00117 	ldw	ra,4(sp)
   81974:	df000017 	ldw	fp,0(sp)
   81978:	dec00204 	addi	sp,sp,8
   8197c:	f800283a 	ret

00081980 <__divsi3>:
   81980:	20001b16 	blt	r4,zero,819f0 <__divsi3+0x70>
   81984:	000f883a 	mov	r7,zero
   81988:	28001616 	blt	r5,zero,819e4 <__divsi3+0x64>
   8198c:	200d883a 	mov	r6,r4
   81990:	29001a2e 	bgeu	r5,r4,819fc <__divsi3+0x7c>
   81994:	00800804 	movi	r2,32
   81998:	00c00044 	movi	r3,1
   8199c:	00000106 	br	819a4 <__divsi3+0x24>
   819a0:	10000d26 	beq	r2,zero,819d8 <__divsi3+0x58>
   819a4:	294b883a 	add	r5,r5,r5
   819a8:	10bfffc4 	addi	r2,r2,-1
   819ac:	18c7883a 	add	r3,r3,r3
   819b0:	293ffb36 	bltu	r5,r4,819a0 <__alt_data_end+0xfffa19a0>
   819b4:	0005883a 	mov	r2,zero
   819b8:	18000726 	beq	r3,zero,819d8 <__divsi3+0x58>
   819bc:	0005883a 	mov	r2,zero
   819c0:	31400236 	bltu	r6,r5,819cc <__divsi3+0x4c>
   819c4:	314dc83a 	sub	r6,r6,r5
   819c8:	10c4b03a 	or	r2,r2,r3
   819cc:	1806d07a 	srli	r3,r3,1
   819d0:	280ad07a 	srli	r5,r5,1
   819d4:	183ffa1e 	bne	r3,zero,819c0 <__alt_data_end+0xfffa19c0>
   819d8:	38000126 	beq	r7,zero,819e0 <__divsi3+0x60>
   819dc:	0085c83a 	sub	r2,zero,r2
   819e0:	f800283a 	ret
   819e4:	014bc83a 	sub	r5,zero,r5
   819e8:	39c0005c 	xori	r7,r7,1
   819ec:	003fe706 	br	8198c <__alt_data_end+0xfffa198c>
   819f0:	0109c83a 	sub	r4,zero,r4
   819f4:	01c00044 	movi	r7,1
   819f8:	003fe306 	br	81988 <__alt_data_end+0xfffa1988>
   819fc:	00c00044 	movi	r3,1
   81a00:	003fee06 	br	819bc <__alt_data_end+0xfffa19bc>

00081a04 <__modsi3>:
   81a04:	20001716 	blt	r4,zero,81a64 <__modsi3+0x60>
   81a08:	000f883a 	mov	r7,zero
   81a0c:	2005883a 	mov	r2,r4
   81a10:	28001216 	blt	r5,zero,81a5c <__modsi3+0x58>
   81a14:	2900162e 	bgeu	r5,r4,81a70 <__modsi3+0x6c>
   81a18:	01800804 	movi	r6,32
   81a1c:	00c00044 	movi	r3,1
   81a20:	00000106 	br	81a28 <__modsi3+0x24>
   81a24:	30000a26 	beq	r6,zero,81a50 <__modsi3+0x4c>
   81a28:	294b883a 	add	r5,r5,r5
   81a2c:	31bfffc4 	addi	r6,r6,-1
   81a30:	18c7883a 	add	r3,r3,r3
   81a34:	293ffb36 	bltu	r5,r4,81a24 <__alt_data_end+0xfffa1a24>
   81a38:	18000526 	beq	r3,zero,81a50 <__modsi3+0x4c>
   81a3c:	1806d07a 	srli	r3,r3,1
   81a40:	11400136 	bltu	r2,r5,81a48 <__modsi3+0x44>
   81a44:	1145c83a 	sub	r2,r2,r5
   81a48:	280ad07a 	srli	r5,r5,1
   81a4c:	183ffb1e 	bne	r3,zero,81a3c <__alt_data_end+0xfffa1a3c>
   81a50:	38000126 	beq	r7,zero,81a58 <__modsi3+0x54>
   81a54:	0085c83a 	sub	r2,zero,r2
   81a58:	f800283a 	ret
   81a5c:	014bc83a 	sub	r5,zero,r5
   81a60:	003fec06 	br	81a14 <__alt_data_end+0xfffa1a14>
   81a64:	0109c83a 	sub	r4,zero,r4
   81a68:	01c00044 	movi	r7,1
   81a6c:	003fe706 	br	81a0c <__alt_data_end+0xfffa1a0c>
   81a70:	00c00044 	movi	r3,1
   81a74:	003ff106 	br	81a3c <__alt_data_end+0xfffa1a3c>

00081a78 <__udivsi3>:
   81a78:	200d883a 	mov	r6,r4
   81a7c:	2900152e 	bgeu	r5,r4,81ad4 <__udivsi3+0x5c>
   81a80:	28001416 	blt	r5,zero,81ad4 <__udivsi3+0x5c>
   81a84:	00800804 	movi	r2,32
   81a88:	00c00044 	movi	r3,1
   81a8c:	00000206 	br	81a98 <__udivsi3+0x20>
   81a90:	10000e26 	beq	r2,zero,81acc <__udivsi3+0x54>
   81a94:	28000516 	blt	r5,zero,81aac <__udivsi3+0x34>
   81a98:	294b883a 	add	r5,r5,r5
   81a9c:	10bfffc4 	addi	r2,r2,-1
   81aa0:	18c7883a 	add	r3,r3,r3
   81aa4:	293ffa36 	bltu	r5,r4,81a90 <__alt_data_end+0xfffa1a90>
   81aa8:	18000826 	beq	r3,zero,81acc <__udivsi3+0x54>
   81aac:	0005883a 	mov	r2,zero
   81ab0:	31400236 	bltu	r6,r5,81abc <__udivsi3+0x44>
   81ab4:	314dc83a 	sub	r6,r6,r5
   81ab8:	10c4b03a 	or	r2,r2,r3
   81abc:	1806d07a 	srli	r3,r3,1
   81ac0:	280ad07a 	srli	r5,r5,1
   81ac4:	183ffa1e 	bne	r3,zero,81ab0 <__alt_data_end+0xfffa1ab0>
   81ac8:	f800283a 	ret
   81acc:	0005883a 	mov	r2,zero
   81ad0:	f800283a 	ret
   81ad4:	00c00044 	movi	r3,1
   81ad8:	003ff406 	br	81aac <__alt_data_end+0xfffa1aac>

00081adc <__umodsi3>:
   81adc:	2005883a 	mov	r2,r4
   81ae0:	2900122e 	bgeu	r5,r4,81b2c <__umodsi3+0x50>
   81ae4:	28001116 	blt	r5,zero,81b2c <__umodsi3+0x50>
   81ae8:	01800804 	movi	r6,32
   81aec:	00c00044 	movi	r3,1
   81af0:	00000206 	br	81afc <__umodsi3+0x20>
   81af4:	30000c26 	beq	r6,zero,81b28 <__umodsi3+0x4c>
   81af8:	28000516 	blt	r5,zero,81b10 <__umodsi3+0x34>
   81afc:	294b883a 	add	r5,r5,r5
   81b00:	31bfffc4 	addi	r6,r6,-1
   81b04:	18c7883a 	add	r3,r3,r3
   81b08:	293ffa36 	bltu	r5,r4,81af4 <__alt_data_end+0xfffa1af4>
   81b0c:	18000626 	beq	r3,zero,81b28 <__umodsi3+0x4c>
   81b10:	1806d07a 	srli	r3,r3,1
   81b14:	11400136 	bltu	r2,r5,81b1c <__umodsi3+0x40>
   81b18:	1145c83a 	sub	r2,r2,r5
   81b1c:	280ad07a 	srli	r5,r5,1
   81b20:	183ffb1e 	bne	r3,zero,81b10 <__alt_data_end+0xfffa1b10>
   81b24:	f800283a 	ret
   81b28:	f800283a 	ret
   81b2c:	00c00044 	movi	r3,1
   81b30:	003ff706 	br	81b10 <__alt_data_end+0xfffa1b10>

00081b34 <__mulsi3>:
   81b34:	0005883a 	mov	r2,zero
   81b38:	20000726 	beq	r4,zero,81b58 <__mulsi3+0x24>
   81b3c:	20c0004c 	andi	r3,r4,1
   81b40:	2008d07a 	srli	r4,r4,1
   81b44:	18000126 	beq	r3,zero,81b4c <__mulsi3+0x18>
   81b48:	1145883a 	add	r2,r2,r5
   81b4c:	294b883a 	add	r5,r5,r5
   81b50:	203ffa1e 	bne	r4,zero,81b3c <__alt_data_end+0xfffa1b3c>
   81b54:	f800283a 	ret
   81b58:	f800283a 	ret

00081b5c <_printf_r>:
   81b5c:	defffd04 	addi	sp,sp,-12
   81b60:	2805883a 	mov	r2,r5
   81b64:	dfc00015 	stw	ra,0(sp)
   81b68:	d9800115 	stw	r6,4(sp)
   81b6c:	d9c00215 	stw	r7,8(sp)
   81b70:	21400217 	ldw	r5,8(r4)
   81b74:	d9c00104 	addi	r7,sp,4
   81b78:	100d883a 	mov	r6,r2
   81b7c:	0081dd00 	call	81dd0 <___vfprintf_internal_r>
   81b80:	dfc00017 	ldw	ra,0(sp)
   81b84:	dec00304 	addi	sp,sp,12
   81b88:	f800283a 	ret

00081b8c <printf>:
   81b8c:	defffc04 	addi	sp,sp,-16
   81b90:	dfc00015 	stw	ra,0(sp)
   81b94:	d9400115 	stw	r5,4(sp)
   81b98:	d9800215 	stw	r6,8(sp)
   81b9c:	d9c00315 	stw	r7,12(sp)
   81ba0:	00800274 	movhi	r2,9
   81ba4:	108f7e04 	addi	r2,r2,15864
   81ba8:	10800017 	ldw	r2,0(r2)
   81bac:	200b883a 	mov	r5,r4
   81bb0:	d9800104 	addi	r6,sp,4
   81bb4:	11000217 	ldw	r4,8(r2)
   81bb8:	00840ac0 	call	840ac <__vfprintf_internal>
   81bbc:	dfc00017 	ldw	ra,0(sp)
   81bc0:	dec00404 	addi	sp,sp,16
   81bc4:	f800283a 	ret

00081bc8 <_putchar_r>:
   81bc8:	21800217 	ldw	r6,8(r4)
   81bcc:	0088c701 	jmpi	88c70 <_putc_r>

00081bd0 <putchar>:
   81bd0:	00800274 	movhi	r2,9
   81bd4:	108f7e04 	addi	r2,r2,15864
   81bd8:	200b883a 	mov	r5,r4
   81bdc:	11000017 	ldw	r4,0(r2)
   81be0:	21800217 	ldw	r6,8(r4)
   81be4:	0088c701 	jmpi	88c70 <_putc_r>

00081be8 <_puts_r>:
   81be8:	defff604 	addi	sp,sp,-40
   81bec:	dc000715 	stw	r16,28(sp)
   81bf0:	2021883a 	mov	r16,r4
   81bf4:	2809883a 	mov	r4,r5
   81bf8:	dc400815 	stw	r17,32(sp)
   81bfc:	dfc00915 	stw	ra,36(sp)
   81c00:	2823883a 	mov	r17,r5
   81c04:	0081d380 	call	81d38 <strlen>
   81c08:	10c00044 	addi	r3,r2,1
   81c0c:	d8800115 	stw	r2,4(sp)
   81c10:	00800274 	movhi	r2,9
   81c14:	10854404 	addi	r2,r2,5392
   81c18:	d8800215 	stw	r2,8(sp)
   81c1c:	00800044 	movi	r2,1
   81c20:	d8800315 	stw	r2,12(sp)
   81c24:	00800084 	movi	r2,2
   81c28:	dc400015 	stw	r17,0(sp)
   81c2c:	d8c00615 	stw	r3,24(sp)
   81c30:	dec00415 	stw	sp,16(sp)
   81c34:	d8800515 	stw	r2,20(sp)
   81c38:	80000226 	beq	r16,zero,81c44 <_puts_r+0x5c>
   81c3c:	80800e17 	ldw	r2,56(r16)
   81c40:	10001426 	beq	r2,zero,81c94 <_puts_r+0xac>
   81c44:	81400217 	ldw	r5,8(r16)
   81c48:	2880030b 	ldhu	r2,12(r5)
   81c4c:	10c8000c 	andi	r3,r2,8192
   81c50:	1800061e 	bne	r3,zero,81c6c <_puts_r+0x84>
   81c54:	29001917 	ldw	r4,100(r5)
   81c58:	00f7ffc4 	movi	r3,-8193
   81c5c:	10880014 	ori	r2,r2,8192
   81c60:	20c6703a 	and	r3,r4,r3
   81c64:	2880030d 	sth	r2,12(r5)
   81c68:	28c01915 	stw	r3,100(r5)
   81c6c:	d9800404 	addi	r6,sp,16
   81c70:	8009883a 	mov	r4,r16
   81c74:	00866140 	call	86614 <__sfvwrite_r>
   81c78:	1000091e 	bne	r2,zero,81ca0 <_puts_r+0xb8>
   81c7c:	00800284 	movi	r2,10
   81c80:	dfc00917 	ldw	ra,36(sp)
   81c84:	dc400817 	ldw	r17,32(sp)
   81c88:	dc000717 	ldw	r16,28(sp)
   81c8c:	dec00a04 	addi	sp,sp,40
   81c90:	f800283a 	ret
   81c94:	8009883a 	mov	r4,r16
   81c98:	00861900 	call	86190 <__sinit>
   81c9c:	003fe906 	br	81c44 <__alt_data_end+0xfffa1c44>
   81ca0:	00bfffc4 	movi	r2,-1
   81ca4:	003ff606 	br	81c80 <__alt_data_end+0xfffa1c80>

00081ca8 <puts>:
   81ca8:	00800274 	movhi	r2,9
   81cac:	108f7e04 	addi	r2,r2,15864
   81cb0:	200b883a 	mov	r5,r4
   81cb4:	11000017 	ldw	r4,0(r2)
   81cb8:	0081be81 	jmpi	81be8 <_puts_r>

00081cbc <srand>:
   81cbc:	00800274 	movhi	r2,9
   81cc0:	108f7e04 	addi	r2,r2,15864
   81cc4:	10800017 	ldw	r2,0(r2)
   81cc8:	11002915 	stw	r4,164(r2)
   81ccc:	10002a15 	stw	zero,168(r2)
   81cd0:	f800283a 	ret

00081cd4 <rand>:
   81cd4:	00800274 	movhi	r2,9
   81cd8:	defffe04 	addi	sp,sp,-8
   81cdc:	108f7e04 	addi	r2,r2,15864
   81ce0:	dc000015 	stw	r16,0(sp)
   81ce4:	14000017 	ldw	r16,0(r2)
   81ce8:	dfc00115 	stw	ra,4(sp)
   81cec:	01932574 	movhi	r6,19605
   81cf0:	81002917 	ldw	r4,164(r16)
   81cf4:	81402a17 	ldw	r5,168(r16)
   81cf8:	01d614b4 	movhi	r7,22610
   81cfc:	319fcb44 	addi	r6,r6,32557
   81d00:	39fd0b44 	addi	r7,r7,-3027
   81d04:	008b6600 	call	8b660 <__muldi3>
   81d08:	11000044 	addi	r4,r2,1
   81d0c:	2085803a 	cmpltu	r2,r4,r2
   81d10:	10c7883a 	add	r3,r2,r3
   81d14:	00a00034 	movhi	r2,32768
   81d18:	10bfffc4 	addi	r2,r2,-1
   81d1c:	1884703a 	and	r2,r3,r2
   81d20:	81002915 	stw	r4,164(r16)
   81d24:	80c02a15 	stw	r3,168(r16)
   81d28:	dfc00117 	ldw	ra,4(sp)
   81d2c:	dc000017 	ldw	r16,0(sp)
   81d30:	dec00204 	addi	sp,sp,8
   81d34:	f800283a 	ret

00081d38 <strlen>:
   81d38:	208000cc 	andi	r2,r4,3
   81d3c:	10002026 	beq	r2,zero,81dc0 <strlen+0x88>
   81d40:	20800007 	ldb	r2,0(r4)
   81d44:	10002026 	beq	r2,zero,81dc8 <strlen+0x90>
   81d48:	2005883a 	mov	r2,r4
   81d4c:	00000206 	br	81d58 <strlen+0x20>
   81d50:	10c00007 	ldb	r3,0(r2)
   81d54:	18001826 	beq	r3,zero,81db8 <strlen+0x80>
   81d58:	10800044 	addi	r2,r2,1
   81d5c:	10c000cc 	andi	r3,r2,3
   81d60:	183ffb1e 	bne	r3,zero,81d50 <__alt_data_end+0xfffa1d50>
   81d64:	10c00017 	ldw	r3,0(r2)
   81d68:	01ffbff4 	movhi	r7,65279
   81d6c:	39ffbfc4 	addi	r7,r7,-257
   81d70:	00ca303a 	nor	r5,zero,r3
   81d74:	01a02074 	movhi	r6,32897
   81d78:	19c7883a 	add	r3,r3,r7
   81d7c:	31a02004 	addi	r6,r6,-32640
   81d80:	1946703a 	and	r3,r3,r5
   81d84:	1986703a 	and	r3,r3,r6
   81d88:	1800091e 	bne	r3,zero,81db0 <strlen+0x78>
   81d8c:	10800104 	addi	r2,r2,4
   81d90:	10c00017 	ldw	r3,0(r2)
   81d94:	19cb883a 	add	r5,r3,r7
   81d98:	00c6303a 	nor	r3,zero,r3
   81d9c:	28c6703a 	and	r3,r5,r3
   81da0:	1986703a 	and	r3,r3,r6
   81da4:	183ff926 	beq	r3,zero,81d8c <__alt_data_end+0xfffa1d8c>
   81da8:	00000106 	br	81db0 <strlen+0x78>
   81dac:	10800044 	addi	r2,r2,1
   81db0:	10c00007 	ldb	r3,0(r2)
   81db4:	183ffd1e 	bne	r3,zero,81dac <__alt_data_end+0xfffa1dac>
   81db8:	1105c83a 	sub	r2,r2,r4
   81dbc:	f800283a 	ret
   81dc0:	2005883a 	mov	r2,r4
   81dc4:	003fe706 	br	81d64 <__alt_data_end+0xfffa1d64>
   81dc8:	0005883a 	mov	r2,zero
   81dcc:	f800283a 	ret

00081dd0 <___vfprintf_internal_r>:
   81dd0:	deffb804 	addi	sp,sp,-288
   81dd4:	dfc04715 	stw	ra,284(sp)
   81dd8:	ddc04515 	stw	r23,276(sp)
   81ddc:	dd404315 	stw	r21,268(sp)
   81de0:	d9002d15 	stw	r4,180(sp)
   81de4:	282f883a 	mov	r23,r5
   81de8:	302b883a 	mov	r21,r6
   81dec:	d9c02e15 	stw	r7,184(sp)
   81df0:	df004615 	stw	fp,280(sp)
   81df4:	dd804415 	stw	r22,272(sp)
   81df8:	dd004215 	stw	r20,264(sp)
   81dfc:	dcc04115 	stw	r19,260(sp)
   81e00:	dc804015 	stw	r18,256(sp)
   81e04:	dc403f15 	stw	r17,252(sp)
   81e08:	dc003e15 	stw	r16,248(sp)
   81e0c:	0086d100 	call	86d10 <_localeconv_r>
   81e10:	10800017 	ldw	r2,0(r2)
   81e14:	1009883a 	mov	r4,r2
   81e18:	d8803415 	stw	r2,208(sp)
   81e1c:	0081d380 	call	81d38 <strlen>
   81e20:	d8803715 	stw	r2,220(sp)
   81e24:	d8802d17 	ldw	r2,180(sp)
   81e28:	10000226 	beq	r2,zero,81e34 <___vfprintf_internal_r+0x64>
   81e2c:	10800e17 	ldw	r2,56(r2)
   81e30:	1000fb26 	beq	r2,zero,82220 <___vfprintf_internal_r+0x450>
   81e34:	b880030b 	ldhu	r2,12(r23)
   81e38:	10c8000c 	andi	r3,r2,8192
   81e3c:	1800061e 	bne	r3,zero,81e58 <___vfprintf_internal_r+0x88>
   81e40:	b9001917 	ldw	r4,100(r23)
   81e44:	00f7ffc4 	movi	r3,-8193
   81e48:	10880014 	ori	r2,r2,8192
   81e4c:	20c6703a 	and	r3,r4,r3
   81e50:	b880030d 	sth	r2,12(r23)
   81e54:	b8c01915 	stw	r3,100(r23)
   81e58:	10c0020c 	andi	r3,r2,8
   81e5c:	1800c326 	beq	r3,zero,8216c <___vfprintf_internal_r+0x39c>
   81e60:	b8c00417 	ldw	r3,16(r23)
   81e64:	1800c126 	beq	r3,zero,8216c <___vfprintf_internal_r+0x39c>
   81e68:	1080068c 	andi	r2,r2,26
   81e6c:	00c00284 	movi	r3,10
   81e70:	10c0c626 	beq	r2,r3,8218c <___vfprintf_internal_r+0x3bc>
   81e74:	d8c00404 	addi	r3,sp,16
   81e78:	05000274 	movhi	r20,9
   81e7c:	d9001e04 	addi	r4,sp,120
   81e80:	a5055584 	addi	r20,r20,5462
   81e84:	d8c01e15 	stw	r3,120(sp)
   81e88:	d8002015 	stw	zero,128(sp)
   81e8c:	d8001f15 	stw	zero,124(sp)
   81e90:	d8003315 	stw	zero,204(sp)
   81e94:	d8003615 	stw	zero,216(sp)
   81e98:	d8003815 	stw	zero,224(sp)
   81e9c:	1811883a 	mov	r8,r3
   81ea0:	d8003915 	stw	zero,228(sp)
   81ea4:	d8003a15 	stw	zero,232(sp)
   81ea8:	d8002f15 	stw	zero,188(sp)
   81eac:	d9002815 	stw	r4,160(sp)
   81eb0:	a8800007 	ldb	r2,0(r21)
   81eb4:	10028b26 	beq	r2,zero,828e4 <___vfprintf_internal_r+0xb14>
   81eb8:	00c00944 	movi	r3,37
   81ebc:	a823883a 	mov	r17,r21
   81ec0:	10c0021e 	bne	r2,r3,81ecc <___vfprintf_internal_r+0xfc>
   81ec4:	00001406 	br	81f18 <___vfprintf_internal_r+0x148>
   81ec8:	10c00326 	beq	r2,r3,81ed8 <___vfprintf_internal_r+0x108>
   81ecc:	8c400044 	addi	r17,r17,1
   81ed0:	88800007 	ldb	r2,0(r17)
   81ed4:	103ffc1e 	bne	r2,zero,81ec8 <__alt_data_end+0xfffa1ec8>
   81ed8:	8d61c83a 	sub	r16,r17,r21
   81edc:	80000e26 	beq	r16,zero,81f18 <___vfprintf_internal_r+0x148>
   81ee0:	d8c02017 	ldw	r3,128(sp)
   81ee4:	d8801f17 	ldw	r2,124(sp)
   81ee8:	45400015 	stw	r21,0(r8)
   81eec:	1c07883a 	add	r3,r3,r16
   81ef0:	10800044 	addi	r2,r2,1
   81ef4:	d8c02015 	stw	r3,128(sp)
   81ef8:	44000115 	stw	r16,4(r8)
   81efc:	d8801f15 	stw	r2,124(sp)
   81f00:	00c001c4 	movi	r3,7
   81f04:	1880a916 	blt	r3,r2,821ac <___vfprintf_internal_r+0x3dc>
   81f08:	42000204 	addi	r8,r8,8
   81f0c:	d9402f17 	ldw	r5,188(sp)
   81f10:	2c0b883a 	add	r5,r5,r16
   81f14:	d9402f15 	stw	r5,188(sp)
   81f18:	88800007 	ldb	r2,0(r17)
   81f1c:	1000aa26 	beq	r2,zero,821c8 <___vfprintf_internal_r+0x3f8>
   81f20:	8d400044 	addi	r21,r17,1
   81f24:	8c400047 	ldb	r17,1(r17)
   81f28:	0021883a 	mov	r16,zero
   81f2c:	00bfffc4 	movi	r2,-1
   81f30:	0025883a 	mov	r18,zero
   81f34:	dc002905 	stb	r16,164(sp)
   81f38:	d8002785 	stb	zero,158(sp)
   81f3c:	d8002b05 	stb	zero,172(sp)
   81f40:	d8802a15 	stw	r2,168(sp)
   81f44:	d8003115 	stw	zero,196(sp)
   81f48:	04c01604 	movi	r19,88
   81f4c:	05800244 	movi	r22,9
   81f50:	9021883a 	mov	r16,r18
   81f54:	4039883a 	mov	fp,r8
   81f58:	ad400044 	addi	r21,r21,1
   81f5c:	88bff804 	addi	r2,r17,-32
   81f60:	98833236 	bltu	r19,r2,82c2c <___vfprintf_internal_r+0xe5c>
   81f64:	100490ba 	slli	r2,r2,2
   81f68:	00c00234 	movhi	r3,8
   81f6c:	18c7df04 	addi	r3,r3,8060
   81f70:	10c5883a 	add	r2,r2,r3
   81f74:	10800017 	ldw	r2,0(r2)
   81f78:	1000683a 	jmp	r2
   81f7c:	00082b24 	muli	zero,zero,8364
   81f80:	00082c2c 	andhi	zero,zero,8368
   81f84:	00082c2c 	andhi	zero,zero,8368
   81f88:	00082b44 	movi	zero,8365
   81f8c:	00082c2c 	andhi	zero,zero,8368
   81f90:	00082c2c 	andhi	zero,zero,8368
   81f94:	00082c2c 	andhi	zero,zero,8368
   81f98:	00082c2c 	andhi	zero,zero,8368
   81f9c:	00082c2c 	andhi	zero,zero,8368
   81fa0:	00082c2c 	andhi	zero,zero,8368
   81fa4:	0008222c 	andhi	zero,zero,8328
   81fa8:	00082a34 	movhi	zero,8360
   81fac:	00082c2c 	andhi	zero,zero,8368
   81fb0:	000820f0 	cmpltui	zero,zero,8323
   81fb4:	00082250 	cmplti	zero,zero,8329
   81fb8:	00082c2c 	andhi	zero,zero,8368
   81fbc:	000822a0 	cmpeqi	zero,zero,8330
   81fc0:	000822ac 	andhi	zero,zero,8330
   81fc4:	000822ac 	andhi	zero,zero,8330
   81fc8:	000822ac 	andhi	zero,zero,8330
   81fcc:	000822ac 	andhi	zero,zero,8330
   81fd0:	000822ac 	andhi	zero,zero,8330
   81fd4:	000822ac 	andhi	zero,zero,8330
   81fd8:	000822ac 	andhi	zero,zero,8330
   81fdc:	000822ac 	andhi	zero,zero,8330
   81fe0:	000822ac 	andhi	zero,zero,8330
   81fe4:	00082c2c 	andhi	zero,zero,8368
   81fe8:	00082c2c 	andhi	zero,zero,8368
   81fec:	00082c2c 	andhi	zero,zero,8368
   81ff0:	00082c2c 	andhi	zero,zero,8368
   81ff4:	00082c2c 	andhi	zero,zero,8368
   81ff8:	00082c2c 	andhi	zero,zero,8368
   81ffc:	00082c2c 	andhi	zero,zero,8368
   82000:	00082c2c 	andhi	zero,zero,8368
   82004:	00082c2c 	andhi	zero,zero,8368
   82008:	00082c2c 	andhi	zero,zero,8368
   8200c:	000822e8 	cmpgeui	zero,zero,8331
   82010:	000823b0 	cmpltui	zero,zero,8334
   82014:	00082c2c 	andhi	zero,zero,8368
   82018:	000823b0 	cmpltui	zero,zero,8334
   8201c:	00082c2c 	andhi	zero,zero,8368
   82020:	00082c2c 	andhi	zero,zero,8368
   82024:	00082c2c 	andhi	zero,zero,8368
   82028:	00082c2c 	andhi	zero,zero,8368
   8202c:	0008245c 	xori	zero,zero,8337
   82030:	00082c2c 	andhi	zero,zero,8368
   82034:	00082c2c 	andhi	zero,zero,8368
   82038:	00082468 	cmpgeui	zero,zero,8337
   8203c:	00082c2c 	andhi	zero,zero,8368
   82040:	00082c2c 	andhi	zero,zero,8368
   82044:	00082c2c 	andhi	zero,zero,8368
   82048:	00082c2c 	andhi	zero,zero,8368
   8204c:	00082c2c 	andhi	zero,zero,8368
   82050:	000828ec 	andhi	zero,zero,8355
   82054:	00082c2c 	andhi	zero,zero,8368
   82058:	00082c2c 	andhi	zero,zero,8368
   8205c:	00082958 	cmpnei	zero,zero,8357
   82060:	00082c2c 	andhi	zero,zero,8368
   82064:	00082c2c 	andhi	zero,zero,8368
   82068:	00082c2c 	andhi	zero,zero,8368
   8206c:	00082c2c 	andhi	zero,zero,8368
   82070:	00082c2c 	andhi	zero,zero,8368
   82074:	00082c2c 	andhi	zero,zero,8368
   82078:	00082c2c 	andhi	zero,zero,8368
   8207c:	00082c2c 	andhi	zero,zero,8368
   82080:	00082c2c 	andhi	zero,zero,8368
   82084:	00082c2c 	andhi	zero,zero,8368
   82088:	00082bd0 	cmplti	zero,zero,8367
   8208c:	00082b50 	cmplti	zero,zero,8365
   82090:	000823b0 	cmpltui	zero,zero,8334
   82094:	000823b0 	cmpltui	zero,zero,8334
   82098:	000823b0 	cmpltui	zero,zero,8334
   8209c:	00082b70 	cmpltui	zero,zero,8365
   820a0:	00082b50 	cmplti	zero,zero,8365
   820a4:	00082c2c 	andhi	zero,zero,8368
   820a8:	00082c2c 	andhi	zero,zero,8368
   820ac:	00082b7c 	xorhi	zero,zero,8365
   820b0:	00082c2c 	andhi	zero,zero,8368
   820b4:	00082b90 	cmplti	zero,zero,8366
   820b8:	00082a14 	movui	zero,8360
   820bc:	000820fc 	xorhi	zero,zero,8323
   820c0:	00082a4c 	andi	zero,zero,8361
   820c4:	00082c2c 	andhi	zero,zero,8368
   820c8:	00082a58 	cmpnei	zero,zero,8361
   820cc:	00082c2c 	andhi	zero,zero,8368
   820d0:	00082abc 	xorhi	zero,zero,8362
   820d4:	00082c2c 	andhi	zero,zero,8368
   820d8:	00082c2c 	andhi	zero,zero,8368
   820dc:	00082adc 	xori	zero,zero,8363
   820e0:	d8c03117 	ldw	r3,196(sp)
   820e4:	d8802e15 	stw	r2,184(sp)
   820e8:	00c7c83a 	sub	r3,zero,r3
   820ec:	d8c03115 	stw	r3,196(sp)
   820f0:	84000114 	ori	r16,r16,4
   820f4:	ac400007 	ldb	r17,0(r21)
   820f8:	003f9706 	br	81f58 <__alt_data_end+0xfffa1f58>
   820fc:	00800c04 	movi	r2,48
   82100:	d8802705 	stb	r2,156(sp)
   82104:	00801e04 	movi	r2,120
   82108:	d8802745 	stb	r2,157(sp)
   8210c:	d9002a17 	ldw	r4,168(sp)
   82110:	d8802e17 	ldw	r2,184(sp)
   82114:	d8002785 	stb	zero,158(sp)
   82118:	e011883a 	mov	r8,fp
   8211c:	10c00104 	addi	r3,r2,4
   82120:	14c00017 	ldw	r19,0(r2)
   82124:	002d883a 	mov	r22,zero
   82128:	80800094 	ori	r2,r16,2
   8212c:	2002ca16 	blt	r4,zero,82c58 <___vfprintf_internal_r+0xe88>
   82130:	00bfdfc4 	movi	r2,-129
   82134:	80a4703a 	and	r18,r16,r2
   82138:	d8c02e15 	stw	r3,184(sp)
   8213c:	94800094 	ori	r18,r18,2
   82140:	9802b41e 	bne	r19,zero,82c14 <___vfprintf_internal_r+0xe44>
   82144:	01400274 	movhi	r5,9
   82148:	29454e04 	addi	r5,r5,5432
   8214c:	d9403915 	stw	r5,228(sp)
   82150:	04401e04 	movi	r17,120
   82154:	d8802a17 	ldw	r2,168(sp)
   82158:	0039883a 	mov	fp,zero
   8215c:	1001fa26 	beq	r2,zero,82948 <___vfprintf_internal_r+0xb78>
   82160:	0027883a 	mov	r19,zero
   82164:	002d883a 	mov	r22,zero
   82168:	00021906 	br	829d0 <___vfprintf_internal_r+0xc00>
   8216c:	d9002d17 	ldw	r4,180(sp)
   82170:	b80b883a 	mov	r5,r23
   82174:	00841840 	call	84184 <__swsetup_r>
   82178:	1005dc1e 	bne	r2,zero,838ec <___vfprintf_internal_r+0x1b1c>
   8217c:	b880030b 	ldhu	r2,12(r23)
   82180:	00c00284 	movi	r3,10
   82184:	1080068c 	andi	r2,r2,26
   82188:	10ff3a1e 	bne	r2,r3,81e74 <__alt_data_end+0xfffa1e74>
   8218c:	b880038f 	ldh	r2,14(r23)
   82190:	103f3816 	blt	r2,zero,81e74 <__alt_data_end+0xfffa1e74>
   82194:	d9c02e17 	ldw	r7,184(sp)
   82198:	d9002d17 	ldw	r4,180(sp)
   8219c:	a80d883a 	mov	r6,r21
   821a0:	b80b883a 	mov	r5,r23
   821a4:	00840c80 	call	840c8 <__sbprintf>
   821a8:	00001106 	br	821f0 <___vfprintf_internal_r+0x420>
   821ac:	d9002d17 	ldw	r4,180(sp)
   821b0:	d9801e04 	addi	r6,sp,120
   821b4:	b80b883a 	mov	r5,r23
   821b8:	00897180 	call	89718 <__sprint_r>
   821bc:	1000081e 	bne	r2,zero,821e0 <___vfprintf_internal_r+0x410>
   821c0:	da000404 	addi	r8,sp,16
   821c4:	003f5106 	br	81f0c <__alt_data_end+0xfffa1f0c>
   821c8:	d8802017 	ldw	r2,128(sp)
   821cc:	10000426 	beq	r2,zero,821e0 <___vfprintf_internal_r+0x410>
   821d0:	d9002d17 	ldw	r4,180(sp)
   821d4:	d9801e04 	addi	r6,sp,120
   821d8:	b80b883a 	mov	r5,r23
   821dc:	00897180 	call	89718 <__sprint_r>
   821e0:	b880030b 	ldhu	r2,12(r23)
   821e4:	1080100c 	andi	r2,r2,64
   821e8:	1005c01e 	bne	r2,zero,838ec <___vfprintf_internal_r+0x1b1c>
   821ec:	d8802f17 	ldw	r2,188(sp)
   821f0:	dfc04717 	ldw	ra,284(sp)
   821f4:	df004617 	ldw	fp,280(sp)
   821f8:	ddc04517 	ldw	r23,276(sp)
   821fc:	dd804417 	ldw	r22,272(sp)
   82200:	dd404317 	ldw	r21,268(sp)
   82204:	dd004217 	ldw	r20,264(sp)
   82208:	dcc04117 	ldw	r19,260(sp)
   8220c:	dc804017 	ldw	r18,256(sp)
   82210:	dc403f17 	ldw	r17,252(sp)
   82214:	dc003e17 	ldw	r16,248(sp)
   82218:	dec04804 	addi	sp,sp,288
   8221c:	f800283a 	ret
   82220:	d9002d17 	ldw	r4,180(sp)
   82224:	00861900 	call	86190 <__sinit>
   82228:	003f0206 	br	81e34 <__alt_data_end+0xfffa1e34>
   8222c:	d9002e17 	ldw	r4,184(sp)
   82230:	d9402e17 	ldw	r5,184(sp)
   82234:	21000017 	ldw	r4,0(r4)
   82238:	28800104 	addi	r2,r5,4
   8223c:	d9003115 	stw	r4,196(sp)
   82240:	203fa716 	blt	r4,zero,820e0 <__alt_data_end+0xfffa20e0>
   82244:	d8802e15 	stw	r2,184(sp)
   82248:	ac400007 	ldb	r17,0(r21)
   8224c:	003f4206 	br	81f58 <__alt_data_end+0xfffa1f58>
   82250:	ac400007 	ldb	r17,0(r21)
   82254:	01000a84 	movi	r4,42
   82258:	a8c00044 	addi	r3,r21,1
   8225c:	89075826 	beq	r17,r4,83fc0 <___vfprintf_internal_r+0x21f0>
   82260:	8cbff404 	addi	r18,r17,-48
   82264:	b486ae36 	bltu	r22,r18,83d20 <___vfprintf_internal_r+0x1f50>
   82268:	0009883a 	mov	r4,zero
   8226c:	1823883a 	mov	r17,r3
   82270:	01400284 	movi	r5,10
   82274:	0081b340 	call	81b34 <__mulsi3>
   82278:	88c00007 	ldb	r3,0(r17)
   8227c:	1489883a 	add	r4,r2,r18
   82280:	8d400044 	addi	r21,r17,1
   82284:	1cbff404 	addi	r18,r3,-48
   82288:	a823883a 	mov	r17,r21
   8228c:	b4bff82e 	bgeu	r22,r18,82270 <__alt_data_end+0xfffa2270>
   82290:	1823883a 	mov	r17,r3
   82294:	2005f616 	blt	r4,zero,83a70 <___vfprintf_internal_r+0x1ca0>
   82298:	d9002a15 	stw	r4,168(sp)
   8229c:	003f2f06 	br	81f5c <__alt_data_end+0xfffa1f5c>
   822a0:	84002014 	ori	r16,r16,128
   822a4:	ac400007 	ldb	r17,0(r21)
   822a8:	003f2b06 	br	81f58 <__alt_data_end+0xfffa1f58>
   822ac:	8cbff404 	addi	r18,r17,-48
   822b0:	d8003115 	stw	zero,196(sp)
   822b4:	0009883a 	mov	r4,zero
   822b8:	a823883a 	mov	r17,r21
   822bc:	01400284 	movi	r5,10
   822c0:	0081b340 	call	81b34 <__mulsi3>
   822c4:	88c00007 	ldb	r3,0(r17)
   822c8:	9089883a 	add	r4,r18,r2
   822cc:	ad400044 	addi	r21,r21,1
   822d0:	1cbff404 	addi	r18,r3,-48
   822d4:	a823883a 	mov	r17,r21
   822d8:	b4bff82e 	bgeu	r22,r18,822bc <__alt_data_end+0xfffa22bc>
   822dc:	1823883a 	mov	r17,r3
   822e0:	d9003115 	stw	r4,196(sp)
   822e4:	003f1d06 	br	81f5c <__alt_data_end+0xfffa1f5c>
   822e8:	8025883a 	mov	r18,r16
   822ec:	dc002903 	ldbu	r16,164(sp)
   822f0:	e011883a 	mov	r8,fp
   822f4:	84003fcc 	andi	r16,r16,255
   822f8:	8007531e 	bne	r16,zero,84048 <___vfprintf_internal_r+0x2278>
   822fc:	94800414 	ori	r18,r18,16
   82300:	9080080c 	andi	r2,r18,32
   82304:	1003a326 	beq	r2,zero,83194 <___vfprintf_internal_r+0x13c4>
   82308:	d9002e17 	ldw	r4,184(sp)
   8230c:	20800117 	ldw	r2,4(r4)
   82310:	24c00017 	ldw	r19,0(r4)
   82314:	21000204 	addi	r4,r4,8
   82318:	d9002e15 	stw	r4,184(sp)
   8231c:	102d883a 	mov	r22,r2
   82320:	10047316 	blt	r2,zero,834f0 <___vfprintf_internal_r+0x1720>
   82324:	d9002a17 	ldw	r4,168(sp)
   82328:	df002783 	ldbu	fp,158(sp)
   8232c:	2003e416 	blt	r4,zero,832c0 <___vfprintf_internal_r+0x14f0>
   82330:	00ffdfc4 	movi	r3,-129
   82334:	9d84b03a 	or	r2,r19,r22
   82338:	90e4703a 	and	r18,r18,r3
   8233c:	10018026 	beq	r2,zero,82940 <___vfprintf_internal_r+0xb70>
   82340:	b003ab26 	beq	r22,zero,831f0 <___vfprintf_internal_r+0x1420>
   82344:	dc402915 	stw	r17,164(sp)
   82348:	dc001e04 	addi	r16,sp,120
   8234c:	b023883a 	mov	r17,r22
   82350:	402d883a 	mov	r22,r8
   82354:	9809883a 	mov	r4,r19
   82358:	880b883a 	mov	r5,r17
   8235c:	01800284 	movi	r6,10
   82360:	000f883a 	mov	r7,zero
   82364:	008bd680 	call	8bd68 <__umoddi3>
   82368:	10800c04 	addi	r2,r2,48
   8236c:	843fffc4 	addi	r16,r16,-1
   82370:	9809883a 	mov	r4,r19
   82374:	880b883a 	mov	r5,r17
   82378:	80800005 	stb	r2,0(r16)
   8237c:	01800284 	movi	r6,10
   82380:	000f883a 	mov	r7,zero
   82384:	008b76c0 	call	8b76c <__udivdi3>
   82388:	1027883a 	mov	r19,r2
   8238c:	10c4b03a 	or	r2,r2,r3
   82390:	1823883a 	mov	r17,r3
   82394:	103fef1e 	bne	r2,zero,82354 <__alt_data_end+0xfffa2354>
   82398:	d8c02817 	ldw	r3,160(sp)
   8239c:	dc402917 	ldw	r17,164(sp)
   823a0:	b011883a 	mov	r8,r22
   823a4:	1c07c83a 	sub	r3,r3,r16
   823a8:	d8c02b15 	stw	r3,172(sp)
   823ac:	00005f06 	br	8252c <___vfprintf_internal_r+0x75c>
   823b0:	8025883a 	mov	r18,r16
   823b4:	dc002903 	ldbu	r16,164(sp)
   823b8:	e011883a 	mov	r8,fp
   823bc:	84003fcc 	andi	r16,r16,255
   823c0:	80071e1e 	bne	r16,zero,8403c <___vfprintf_internal_r+0x226c>
   823c4:	9080020c 	andi	r2,r18,8
   823c8:	1004af26 	beq	r2,zero,83688 <___vfprintf_internal_r+0x18b8>
   823cc:	d9002e17 	ldw	r4,184(sp)
   823d0:	d9402e17 	ldw	r5,184(sp)
   823d4:	d8802e17 	ldw	r2,184(sp)
   823d8:	21000017 	ldw	r4,0(r4)
   823dc:	29400117 	ldw	r5,4(r5)
   823e0:	10800204 	addi	r2,r2,8
   823e4:	d9003615 	stw	r4,216(sp)
   823e8:	d9403815 	stw	r5,224(sp)
   823ec:	d8802e15 	stw	r2,184(sp)
   823f0:	d9003617 	ldw	r4,216(sp)
   823f4:	d9403817 	ldw	r5,224(sp)
   823f8:	da003d15 	stw	r8,244(sp)
   823fc:	04000044 	movi	r16,1
   82400:	008933c0 	call	8933c <__fpclassifyd>
   82404:	da003d17 	ldw	r8,244(sp)
   82408:	1404441e 	bne	r2,r16,8351c <___vfprintf_internal_r+0x174c>
   8240c:	d9003617 	ldw	r4,216(sp)
   82410:	d9403817 	ldw	r5,224(sp)
   82414:	000d883a 	mov	r6,zero
   82418:	000f883a 	mov	r7,zero
   8241c:	008d70c0 	call	8d70c <__ledf2>
   82420:	da003d17 	ldw	r8,244(sp)
   82424:	1005e316 	blt	r2,zero,83bb4 <___vfprintf_internal_r+0x1de4>
   82428:	df002783 	ldbu	fp,158(sp)
   8242c:	008011c4 	movi	r2,71
   82430:	1445580e 	bge	r2,r17,83994 <___vfprintf_internal_r+0x1bc4>
   82434:	04000274 	movhi	r16,9
   82438:	84054604 	addi	r16,r16,5400
   8243c:	00c000c4 	movi	r3,3
   82440:	00bfdfc4 	movi	r2,-129
   82444:	d8c02915 	stw	r3,164(sp)
   82448:	90a4703a 	and	r18,r18,r2
   8244c:	d8c02b15 	stw	r3,172(sp)
   82450:	d8002a15 	stw	zero,168(sp)
   82454:	d8003215 	stw	zero,200(sp)
   82458:	00003a06 	br	82544 <___vfprintf_internal_r+0x774>
   8245c:	84000214 	ori	r16,r16,8
   82460:	ac400007 	ldb	r17,0(r21)
   82464:	003ebc06 	br	81f58 <__alt_data_end+0xfffa1f58>
   82468:	8025883a 	mov	r18,r16
   8246c:	dc002903 	ldbu	r16,164(sp)
   82470:	e011883a 	mov	r8,fp
   82474:	84003fcc 	andi	r16,r16,255
   82478:	8007001e 	bne	r16,zero,8407c <___vfprintf_internal_r+0x22ac>
   8247c:	94800414 	ori	r18,r18,16
   82480:	9080080c 	andi	r2,r18,32
   82484:	1002fa26 	beq	r2,zero,83070 <___vfprintf_internal_r+0x12a0>
   82488:	d9002e17 	ldw	r4,184(sp)
   8248c:	d9402a17 	ldw	r5,168(sp)
   82490:	d8002785 	stb	zero,158(sp)
   82494:	20800204 	addi	r2,r4,8
   82498:	24c00017 	ldw	r19,0(r4)
   8249c:	25800117 	ldw	r22,4(r4)
   824a0:	2804b116 	blt	r5,zero,83768 <___vfprintf_internal_r+0x1998>
   824a4:	013fdfc4 	movi	r4,-129
   824a8:	9d86b03a 	or	r3,r19,r22
   824ac:	d8802e15 	stw	r2,184(sp)
   824b0:	9124703a 	and	r18,r18,r4
   824b4:	1802fb1e 	bne	r3,zero,830a4 <___vfprintf_internal_r+0x12d4>
   824b8:	d8c02a17 	ldw	r3,168(sp)
   824bc:	0039883a 	mov	fp,zero
   824c0:	1805e526 	beq	r3,zero,83c58 <___vfprintf_internal_r+0x1e88>
   824c4:	0027883a 	mov	r19,zero
   824c8:	002d883a 	mov	r22,zero
   824cc:	dc001e04 	addi	r16,sp,120
   824d0:	9806d0fa 	srli	r3,r19,3
   824d4:	b008977a 	slli	r4,r22,29
   824d8:	b02cd0fa 	srli	r22,r22,3
   824dc:	9cc001cc 	andi	r19,r19,7
   824e0:	98800c04 	addi	r2,r19,48
   824e4:	843fffc4 	addi	r16,r16,-1
   824e8:	20e6b03a 	or	r19,r4,r3
   824ec:	80800005 	stb	r2,0(r16)
   824f0:	9d86b03a 	or	r3,r19,r22
   824f4:	183ff61e 	bne	r3,zero,824d0 <__alt_data_end+0xfffa24d0>
   824f8:	90c0004c 	andi	r3,r18,1
   824fc:	18014126 	beq	r3,zero,82a04 <___vfprintf_internal_r+0xc34>
   82500:	10803fcc 	andi	r2,r2,255
   82504:	1080201c 	xori	r2,r2,128
   82508:	10bfe004 	addi	r2,r2,-128
   8250c:	00c00c04 	movi	r3,48
   82510:	10c13c26 	beq	r2,r3,82a04 <___vfprintf_internal_r+0xc34>
   82514:	80ffffc5 	stb	r3,-1(r16)
   82518:	d8c02817 	ldw	r3,160(sp)
   8251c:	80bfffc4 	addi	r2,r16,-1
   82520:	1021883a 	mov	r16,r2
   82524:	1887c83a 	sub	r3,r3,r2
   82528:	d8c02b15 	stw	r3,172(sp)
   8252c:	d8802b17 	ldw	r2,172(sp)
   82530:	d9002a17 	ldw	r4,168(sp)
   82534:	1100010e 	bge	r2,r4,8253c <___vfprintf_internal_r+0x76c>
   82538:	2005883a 	mov	r2,r4
   8253c:	d8802915 	stw	r2,164(sp)
   82540:	d8003215 	stw	zero,200(sp)
   82544:	e7003fcc 	andi	fp,fp,255
   82548:	e700201c 	xori	fp,fp,128
   8254c:	e73fe004 	addi	fp,fp,-128
   82550:	e0000326 	beq	fp,zero,82560 <___vfprintf_internal_r+0x790>
   82554:	d8c02917 	ldw	r3,164(sp)
   82558:	18c00044 	addi	r3,r3,1
   8255c:	d8c02915 	stw	r3,164(sp)
   82560:	90c0008c 	andi	r3,r18,2
   82564:	d8c02c15 	stw	r3,176(sp)
   82568:	18000326 	beq	r3,zero,82578 <___vfprintf_internal_r+0x7a8>
   8256c:	d8c02917 	ldw	r3,164(sp)
   82570:	18c00084 	addi	r3,r3,2
   82574:	d8c02915 	stw	r3,164(sp)
   82578:	90c0210c 	andi	r3,r18,132
   8257c:	d8c03015 	stw	r3,192(sp)
   82580:	1801c51e 	bne	r3,zero,82c98 <___vfprintf_internal_r+0xec8>
   82584:	d9003117 	ldw	r4,196(sp)
   82588:	d8c02917 	ldw	r3,164(sp)
   8258c:	20e7c83a 	sub	r19,r4,r3
   82590:	04c1c10e 	bge	zero,r19,82c98 <___vfprintf_internal_r+0xec8>
   82594:	02400404 	movi	r9,16
   82598:	d8c02017 	ldw	r3,128(sp)
   8259c:	d8801f17 	ldw	r2,124(sp)
   825a0:	4cc52f0e 	bge	r9,r19,83a60 <___vfprintf_internal_r+0x1c90>
   825a4:	01400274 	movhi	r5,9
   825a8:	29455984 	addi	r5,r5,5478
   825ac:	dc403b15 	stw	r17,236(sp)
   825b0:	d9403515 	stw	r5,212(sp)
   825b4:	9823883a 	mov	r17,r19
   825b8:	482d883a 	mov	r22,r9
   825bc:	9027883a 	mov	r19,r18
   825c0:	070001c4 	movi	fp,7
   825c4:	8025883a 	mov	r18,r16
   825c8:	dc002d17 	ldw	r16,180(sp)
   825cc:	00000306 	br	825dc <___vfprintf_internal_r+0x80c>
   825d0:	8c7ffc04 	addi	r17,r17,-16
   825d4:	42000204 	addi	r8,r8,8
   825d8:	b440130e 	bge	r22,r17,82628 <___vfprintf_internal_r+0x858>
   825dc:	01000274 	movhi	r4,9
   825e0:	18c00404 	addi	r3,r3,16
   825e4:	10800044 	addi	r2,r2,1
   825e8:	21055984 	addi	r4,r4,5478
   825ec:	41000015 	stw	r4,0(r8)
   825f0:	45800115 	stw	r22,4(r8)
   825f4:	d8c02015 	stw	r3,128(sp)
   825f8:	d8801f15 	stw	r2,124(sp)
   825fc:	e0bff40e 	bge	fp,r2,825d0 <__alt_data_end+0xfffa25d0>
   82600:	d9801e04 	addi	r6,sp,120
   82604:	b80b883a 	mov	r5,r23
   82608:	8009883a 	mov	r4,r16
   8260c:	00897180 	call	89718 <__sprint_r>
   82610:	103ef31e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   82614:	8c7ffc04 	addi	r17,r17,-16
   82618:	d8c02017 	ldw	r3,128(sp)
   8261c:	d8801f17 	ldw	r2,124(sp)
   82620:	da000404 	addi	r8,sp,16
   82624:	b47fed16 	blt	r22,r17,825dc <__alt_data_end+0xfffa25dc>
   82628:	9021883a 	mov	r16,r18
   8262c:	9825883a 	mov	r18,r19
   82630:	8827883a 	mov	r19,r17
   82634:	dc403b17 	ldw	r17,236(sp)
   82638:	d9403517 	ldw	r5,212(sp)
   8263c:	98c7883a 	add	r3,r19,r3
   82640:	10800044 	addi	r2,r2,1
   82644:	41400015 	stw	r5,0(r8)
   82648:	44c00115 	stw	r19,4(r8)
   8264c:	d8c02015 	stw	r3,128(sp)
   82650:	d8801f15 	stw	r2,124(sp)
   82654:	010001c4 	movi	r4,7
   82658:	2082c516 	blt	r4,r2,83170 <___vfprintf_internal_r+0x13a0>
   8265c:	df002787 	ldb	fp,158(sp)
   82660:	42000204 	addi	r8,r8,8
   82664:	e0000c26 	beq	fp,zero,82698 <___vfprintf_internal_r+0x8c8>
   82668:	d8801f17 	ldw	r2,124(sp)
   8266c:	d9002784 	addi	r4,sp,158
   82670:	18c00044 	addi	r3,r3,1
   82674:	10800044 	addi	r2,r2,1
   82678:	41000015 	stw	r4,0(r8)
   8267c:	01000044 	movi	r4,1
   82680:	41000115 	stw	r4,4(r8)
   82684:	d8c02015 	stw	r3,128(sp)
   82688:	d8801f15 	stw	r2,124(sp)
   8268c:	010001c4 	movi	r4,7
   82690:	20825e16 	blt	r4,r2,8300c <___vfprintf_internal_r+0x123c>
   82694:	42000204 	addi	r8,r8,8
   82698:	d8802c17 	ldw	r2,176(sp)
   8269c:	10000c26 	beq	r2,zero,826d0 <___vfprintf_internal_r+0x900>
   826a0:	d8801f17 	ldw	r2,124(sp)
   826a4:	d9002704 	addi	r4,sp,156
   826a8:	18c00084 	addi	r3,r3,2
   826ac:	10800044 	addi	r2,r2,1
   826b0:	41000015 	stw	r4,0(r8)
   826b4:	01000084 	movi	r4,2
   826b8:	41000115 	stw	r4,4(r8)
   826bc:	d8c02015 	stw	r3,128(sp)
   826c0:	d8801f15 	stw	r2,124(sp)
   826c4:	010001c4 	movi	r4,7
   826c8:	20825816 	blt	r4,r2,8302c <___vfprintf_internal_r+0x125c>
   826cc:	42000204 	addi	r8,r8,8
   826d0:	d9003017 	ldw	r4,192(sp)
   826d4:	00802004 	movi	r2,128
   826d8:	2081bb26 	beq	r4,r2,82dc8 <___vfprintf_internal_r+0xff8>
   826dc:	d9402a17 	ldw	r5,168(sp)
   826e0:	d8802b17 	ldw	r2,172(sp)
   826e4:	28adc83a 	sub	r22,r5,r2
   826e8:	0580310e 	bge	zero,r22,827b0 <___vfprintf_internal_r+0x9e0>
   826ec:	07000404 	movi	fp,16
   826f0:	d8801f17 	ldw	r2,124(sp)
   826f4:	e584360e 	bge	fp,r22,837d0 <___vfprintf_internal_r+0x1a00>
   826f8:	01400274 	movhi	r5,9
   826fc:	29455584 	addi	r5,r5,5462
   82700:	dc402a15 	stw	r17,168(sp)
   82704:	d9402c15 	stw	r5,176(sp)
   82708:	b023883a 	mov	r17,r22
   8270c:	04c001c4 	movi	r19,7
   82710:	a82d883a 	mov	r22,r21
   82714:	902b883a 	mov	r21,r18
   82718:	8025883a 	mov	r18,r16
   8271c:	dc002d17 	ldw	r16,180(sp)
   82720:	00000306 	br	82730 <___vfprintf_internal_r+0x960>
   82724:	8c7ffc04 	addi	r17,r17,-16
   82728:	42000204 	addi	r8,r8,8
   8272c:	e440110e 	bge	fp,r17,82774 <___vfprintf_internal_r+0x9a4>
   82730:	18c00404 	addi	r3,r3,16
   82734:	10800044 	addi	r2,r2,1
   82738:	45000015 	stw	r20,0(r8)
   8273c:	47000115 	stw	fp,4(r8)
   82740:	d8c02015 	stw	r3,128(sp)
   82744:	d8801f15 	stw	r2,124(sp)
   82748:	98bff60e 	bge	r19,r2,82724 <__alt_data_end+0xfffa2724>
   8274c:	d9801e04 	addi	r6,sp,120
   82750:	b80b883a 	mov	r5,r23
   82754:	8009883a 	mov	r4,r16
   82758:	00897180 	call	89718 <__sprint_r>
   8275c:	103ea01e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   82760:	8c7ffc04 	addi	r17,r17,-16
   82764:	d8c02017 	ldw	r3,128(sp)
   82768:	d8801f17 	ldw	r2,124(sp)
   8276c:	da000404 	addi	r8,sp,16
   82770:	e47fef16 	blt	fp,r17,82730 <__alt_data_end+0xfffa2730>
   82774:	9021883a 	mov	r16,r18
   82778:	a825883a 	mov	r18,r21
   8277c:	b02b883a 	mov	r21,r22
   82780:	882d883a 	mov	r22,r17
   82784:	dc402a17 	ldw	r17,168(sp)
   82788:	d9002c17 	ldw	r4,176(sp)
   8278c:	1d87883a 	add	r3,r3,r22
   82790:	10800044 	addi	r2,r2,1
   82794:	41000015 	stw	r4,0(r8)
   82798:	45800115 	stw	r22,4(r8)
   8279c:	d8c02015 	stw	r3,128(sp)
   827a0:	d8801f15 	stw	r2,124(sp)
   827a4:	010001c4 	movi	r4,7
   827a8:	20821016 	blt	r4,r2,82fec <___vfprintf_internal_r+0x121c>
   827ac:	42000204 	addi	r8,r8,8
   827b0:	9080400c 	andi	r2,r18,256
   827b4:	10013a1e 	bne	r2,zero,82ca0 <___vfprintf_internal_r+0xed0>
   827b8:	d9402b17 	ldw	r5,172(sp)
   827bc:	d8801f17 	ldw	r2,124(sp)
   827c0:	44000015 	stw	r16,0(r8)
   827c4:	1947883a 	add	r3,r3,r5
   827c8:	10800044 	addi	r2,r2,1
   827cc:	41400115 	stw	r5,4(r8)
   827d0:	d8c02015 	stw	r3,128(sp)
   827d4:	d8801f15 	stw	r2,124(sp)
   827d8:	010001c4 	movi	r4,7
   827dc:	2081f516 	blt	r4,r2,82fb4 <___vfprintf_internal_r+0x11e4>
   827e0:	42000204 	addi	r8,r8,8
   827e4:	9480010c 	andi	r18,r18,4
   827e8:	90003226 	beq	r18,zero,828b4 <___vfprintf_internal_r+0xae4>
   827ec:	d9403117 	ldw	r5,196(sp)
   827f0:	d8802917 	ldw	r2,164(sp)
   827f4:	28a1c83a 	sub	r16,r5,r2
   827f8:	04002e0e 	bge	zero,r16,828b4 <___vfprintf_internal_r+0xae4>
   827fc:	04400404 	movi	r17,16
   82800:	d8801f17 	ldw	r2,124(sp)
   82804:	8c04c40e 	bge	r17,r16,83b18 <___vfprintf_internal_r+0x1d48>
   82808:	01400274 	movhi	r5,9
   8280c:	29455984 	addi	r5,r5,5478
   82810:	d9403515 	stw	r5,212(sp)
   82814:	048001c4 	movi	r18,7
   82818:	dcc02d17 	ldw	r19,180(sp)
   8281c:	00000306 	br	8282c <___vfprintf_internal_r+0xa5c>
   82820:	843ffc04 	addi	r16,r16,-16
   82824:	42000204 	addi	r8,r8,8
   82828:	8c00130e 	bge	r17,r16,82878 <___vfprintf_internal_r+0xaa8>
   8282c:	01000274 	movhi	r4,9
   82830:	18c00404 	addi	r3,r3,16
   82834:	10800044 	addi	r2,r2,1
   82838:	21055984 	addi	r4,r4,5478
   8283c:	41000015 	stw	r4,0(r8)
   82840:	44400115 	stw	r17,4(r8)
   82844:	d8c02015 	stw	r3,128(sp)
   82848:	d8801f15 	stw	r2,124(sp)
   8284c:	90bff40e 	bge	r18,r2,82820 <__alt_data_end+0xfffa2820>
   82850:	d9801e04 	addi	r6,sp,120
   82854:	b80b883a 	mov	r5,r23
   82858:	9809883a 	mov	r4,r19
   8285c:	00897180 	call	89718 <__sprint_r>
   82860:	103e5f1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   82864:	843ffc04 	addi	r16,r16,-16
   82868:	d8c02017 	ldw	r3,128(sp)
   8286c:	d8801f17 	ldw	r2,124(sp)
   82870:	da000404 	addi	r8,sp,16
   82874:	8c3fed16 	blt	r17,r16,8282c <__alt_data_end+0xfffa282c>
   82878:	d9403517 	ldw	r5,212(sp)
   8287c:	1c07883a 	add	r3,r3,r16
   82880:	10800044 	addi	r2,r2,1
   82884:	41400015 	stw	r5,0(r8)
   82888:	44000115 	stw	r16,4(r8)
   8288c:	d8c02015 	stw	r3,128(sp)
   82890:	d8801f15 	stw	r2,124(sp)
   82894:	010001c4 	movi	r4,7
   82898:	2080060e 	bge	r4,r2,828b4 <___vfprintf_internal_r+0xae4>
   8289c:	d9002d17 	ldw	r4,180(sp)
   828a0:	d9801e04 	addi	r6,sp,120
   828a4:	b80b883a 	mov	r5,r23
   828a8:	00897180 	call	89718 <__sprint_r>
   828ac:	103e4c1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   828b0:	d8c02017 	ldw	r3,128(sp)
   828b4:	d8803117 	ldw	r2,196(sp)
   828b8:	d9002917 	ldw	r4,164(sp)
   828bc:	1100010e 	bge	r2,r4,828c4 <___vfprintf_internal_r+0xaf4>
   828c0:	2005883a 	mov	r2,r4
   828c4:	d9402f17 	ldw	r5,188(sp)
   828c8:	288b883a 	add	r5,r5,r2
   828cc:	d9402f15 	stw	r5,188(sp)
   828d0:	1801c01e 	bne	r3,zero,82fd4 <___vfprintf_internal_r+0x1204>
   828d4:	a8800007 	ldb	r2,0(r21)
   828d8:	d8001f15 	stw	zero,124(sp)
   828dc:	da000404 	addi	r8,sp,16
   828e0:	103d751e 	bne	r2,zero,81eb8 <__alt_data_end+0xfffa1eb8>
   828e4:	a823883a 	mov	r17,r21
   828e8:	003d8b06 	br	81f18 <__alt_data_end+0xfffa1f18>
   828ec:	8025883a 	mov	r18,r16
   828f0:	dc002903 	ldbu	r16,164(sp)
   828f4:	e011883a 	mov	r8,fp
   828f8:	84003fcc 	andi	r16,r16,255
   828fc:	8005e51e 	bne	r16,zero,84094 <___vfprintf_internal_r+0x22c4>
   82900:	94800414 	ori	r18,r18,16
   82904:	9080080c 	andi	r2,r18,32
   82908:	10022b26 	beq	r2,zero,831b8 <___vfprintf_internal_r+0x13e8>
   8290c:	d9002e17 	ldw	r4,184(sp)
   82910:	d9402a17 	ldw	r5,168(sp)
   82914:	d8002785 	stb	zero,158(sp)
   82918:	20c00204 	addi	r3,r4,8
   8291c:	24c00017 	ldw	r19,0(r4)
   82920:	25800117 	ldw	r22,4(r4)
   82924:	28042e16 	blt	r5,zero,839e0 <___vfprintf_internal_r+0x1c10>
   82928:	013fdfc4 	movi	r4,-129
   8292c:	9d84b03a 	or	r2,r19,r22
   82930:	d8c02e15 	stw	r3,184(sp)
   82934:	9124703a 	and	r18,r18,r4
   82938:	0039883a 	mov	fp,zero
   8293c:	103e801e 	bne	r2,zero,82340 <__alt_data_end+0xfffa2340>
   82940:	d9002a17 	ldw	r4,168(sp)
   82944:	2002e01e 	bne	r4,zero,834c8 <___vfprintf_internal_r+0x16f8>
   82948:	d8002a15 	stw	zero,168(sp)
   8294c:	d8002b15 	stw	zero,172(sp)
   82950:	dc001e04 	addi	r16,sp,120
   82954:	003ef506 	br	8252c <__alt_data_end+0xfffa252c>
   82958:	8025883a 	mov	r18,r16
   8295c:	dc002903 	ldbu	r16,164(sp)
   82960:	e011883a 	mov	r8,fp
   82964:	84003fcc 	andi	r16,r16,255
   82968:	8005ba1e 	bne	r16,zero,84054 <___vfprintf_internal_r+0x2284>
   8296c:	01000274 	movhi	r4,9
   82970:	21054904 	addi	r4,r4,5412
   82974:	d9003915 	stw	r4,228(sp)
   82978:	9080080c 	andi	r2,r18,32
   8297c:	10006126 	beq	r2,zero,82b04 <___vfprintf_internal_r+0xd34>
   82980:	d9402e17 	ldw	r5,184(sp)
   82984:	2cc00017 	ldw	r19,0(r5)
   82988:	2d800117 	ldw	r22,4(r5)
   8298c:	29400204 	addi	r5,r5,8
   82990:	d9402e15 	stw	r5,184(sp)
   82994:	9080004c 	andi	r2,r18,1
   82998:	1001ac26 	beq	r2,zero,8304c <___vfprintf_internal_r+0x127c>
   8299c:	9d84b03a 	or	r2,r19,r22
   829a0:	10038526 	beq	r2,zero,837b8 <___vfprintf_internal_r+0x19e8>
   829a4:	d8c02a17 	ldw	r3,168(sp)
   829a8:	00800c04 	movi	r2,48
   829ac:	d8802705 	stb	r2,156(sp)
   829b0:	dc402745 	stb	r17,157(sp)
   829b4:	d8002785 	stb	zero,158(sp)
   829b8:	90800094 	ori	r2,r18,2
   829bc:	18047916 	blt	r3,zero,83ba4 <___vfprintf_internal_r+0x1dd4>
   829c0:	00bfdfc4 	movi	r2,-129
   829c4:	90a4703a 	and	r18,r18,r2
   829c8:	94800094 	ori	r18,r18,2
   829cc:	0039883a 	mov	fp,zero
   829d0:	d9003917 	ldw	r4,228(sp)
   829d4:	dc001e04 	addi	r16,sp,120
   829d8:	988003cc 	andi	r2,r19,15
   829dc:	b006973a 	slli	r3,r22,28
   829e0:	2085883a 	add	r2,r4,r2
   829e4:	9826d13a 	srli	r19,r19,4
   829e8:	10800003 	ldbu	r2,0(r2)
   829ec:	b02cd13a 	srli	r22,r22,4
   829f0:	843fffc4 	addi	r16,r16,-1
   829f4:	1ce6b03a 	or	r19,r3,r19
   829f8:	80800005 	stb	r2,0(r16)
   829fc:	9d84b03a 	or	r2,r19,r22
   82a00:	103ff51e 	bne	r2,zero,829d8 <__alt_data_end+0xfffa29d8>
   82a04:	d8c02817 	ldw	r3,160(sp)
   82a08:	1c07c83a 	sub	r3,r3,r16
   82a0c:	d8c02b15 	stw	r3,172(sp)
   82a10:	003ec606 	br	8252c <__alt_data_end+0xfffa252c>
   82a14:	8025883a 	mov	r18,r16
   82a18:	dc002903 	ldbu	r16,164(sp)
   82a1c:	e011883a 	mov	r8,fp
   82a20:	84003fcc 	andi	r16,r16,255
   82a24:	803e9626 	beq	r16,zero,82480 <__alt_data_end+0xfffa2480>
   82a28:	d8c02b03 	ldbu	r3,172(sp)
   82a2c:	d8c02785 	stb	r3,158(sp)
   82a30:	003e9306 	br	82480 <__alt_data_end+0xfffa2480>
   82a34:	00c00044 	movi	r3,1
   82a38:	d8c02905 	stb	r3,164(sp)
   82a3c:	00c00ac4 	movi	r3,43
   82a40:	d8c02b05 	stb	r3,172(sp)
   82a44:	ac400007 	ldb	r17,0(r21)
   82a48:	003d4306 	br	81f58 <__alt_data_end+0xfffa1f58>
   82a4c:	84000814 	ori	r16,r16,32
   82a50:	ac400007 	ldb	r17,0(r21)
   82a54:	003d4006 	br	81f58 <__alt_data_end+0xfffa1f58>
   82a58:	d8802e17 	ldw	r2,184(sp)
   82a5c:	8025883a 	mov	r18,r16
   82a60:	d8002785 	stb	zero,158(sp)
   82a64:	14000017 	ldw	r16,0(r2)
   82a68:	e011883a 	mov	r8,fp
   82a6c:	14c00104 	addi	r19,r2,4
   82a70:	80042d26 	beq	r16,zero,83b28 <___vfprintf_internal_r+0x1d58>
   82a74:	d8c02a17 	ldw	r3,168(sp)
   82a78:	1803e416 	blt	r3,zero,83a0c <___vfprintf_internal_r+0x1c3c>
   82a7c:	180d883a 	mov	r6,r3
   82a80:	000b883a 	mov	r5,zero
   82a84:	8009883a 	mov	r4,r16
   82a88:	df003d15 	stw	fp,244(sp)
   82a8c:	00877080 	call	87708 <memchr>
   82a90:	da003d17 	ldw	r8,244(sp)
   82a94:	10046826 	beq	r2,zero,83c38 <___vfprintf_internal_r+0x1e68>
   82a98:	1405c83a 	sub	r2,r2,r16
   82a9c:	d8802b15 	stw	r2,172(sp)
   82aa0:	1003e016 	blt	r2,zero,83a24 <___vfprintf_internal_r+0x1c54>
   82aa4:	df002783 	ldbu	fp,158(sp)
   82aa8:	d8802915 	stw	r2,164(sp)
   82aac:	dcc02e15 	stw	r19,184(sp)
   82ab0:	d8002a15 	stw	zero,168(sp)
   82ab4:	d8003215 	stw	zero,200(sp)
   82ab8:	003ea206 	br	82544 <__alt_data_end+0xfffa2544>
   82abc:	8025883a 	mov	r18,r16
   82ac0:	dc002903 	ldbu	r16,164(sp)
   82ac4:	e011883a 	mov	r8,fp
   82ac8:	84003fcc 	andi	r16,r16,255
   82acc:	803f8d26 	beq	r16,zero,82904 <__alt_data_end+0xfffa2904>
   82ad0:	d8c02b03 	ldbu	r3,172(sp)
   82ad4:	d8c02785 	stb	r3,158(sp)
   82ad8:	003f8a06 	br	82904 <__alt_data_end+0xfffa2904>
   82adc:	8025883a 	mov	r18,r16
   82ae0:	dc002903 	ldbu	r16,164(sp)
   82ae4:	e011883a 	mov	r8,fp
   82ae8:	84003fcc 	andi	r16,r16,255
   82aec:	8005661e 	bne	r16,zero,84088 <___vfprintf_internal_r+0x22b8>
   82af0:	01000274 	movhi	r4,9
   82af4:	21054e04 	addi	r4,r4,5432
   82af8:	d9003915 	stw	r4,228(sp)
   82afc:	9080080c 	andi	r2,r18,32
   82b00:	103f9f1e 	bne	r2,zero,82980 <__alt_data_end+0xfffa2980>
   82b04:	9080040c 	andi	r2,r18,16
   82b08:	1002eb26 	beq	r2,zero,836b8 <___vfprintf_internal_r+0x18e8>
   82b0c:	d8802e17 	ldw	r2,184(sp)
   82b10:	002d883a 	mov	r22,zero
   82b14:	14c00017 	ldw	r19,0(r2)
   82b18:	10800104 	addi	r2,r2,4
   82b1c:	d8802e15 	stw	r2,184(sp)
   82b20:	003f9c06 	br	82994 <__alt_data_end+0xfffa2994>
   82b24:	d8802b07 	ldb	r2,172(sp)
   82b28:	1002e11e 	bne	r2,zero,836b0 <___vfprintf_internal_r+0x18e0>
   82b2c:	00c00044 	movi	r3,1
   82b30:	d8c02905 	stb	r3,164(sp)
   82b34:	00c00804 	movi	r3,32
   82b38:	d8c02b05 	stb	r3,172(sp)
   82b3c:	ac400007 	ldb	r17,0(r21)
   82b40:	003d0506 	br	81f58 <__alt_data_end+0xfffa1f58>
   82b44:	84000054 	ori	r16,r16,1
   82b48:	ac400007 	ldb	r17,0(r21)
   82b4c:	003d0206 	br	81f58 <__alt_data_end+0xfffa1f58>
   82b50:	8025883a 	mov	r18,r16
   82b54:	dc002903 	ldbu	r16,164(sp)
   82b58:	e011883a 	mov	r8,fp
   82b5c:	84003fcc 	andi	r16,r16,255
   82b60:	803de726 	beq	r16,zero,82300 <__alt_data_end+0xfffa2300>
   82b64:	d8c02b03 	ldbu	r3,172(sp)
   82b68:	d8c02785 	stb	r3,158(sp)
   82b6c:	003de406 	br	82300 <__alt_data_end+0xfffa2300>
   82b70:	84001014 	ori	r16,r16,64
   82b74:	ac400007 	ldb	r17,0(r21)
   82b78:	003cf706 	br	81f58 <__alt_data_end+0xfffa1f58>
   82b7c:	ac400007 	ldb	r17,0(r21)
   82b80:	00801b04 	movi	r2,108
   82b84:	88838f26 	beq	r17,r2,839c4 <___vfprintf_internal_r+0x1bf4>
   82b88:	84000414 	ori	r16,r16,16
   82b8c:	003cf206 	br	81f58 <__alt_data_end+0xfffa1f58>
   82b90:	8025883a 	mov	r18,r16
   82b94:	dc002903 	ldbu	r16,164(sp)
   82b98:	e011883a 	mov	r8,fp
   82b9c:	84003fcc 	andi	r16,r16,255
   82ba0:	80053f1e 	bne	r16,zero,840a0 <___vfprintf_internal_r+0x22d0>
   82ba4:	9080080c 	andi	r2,r18,32
   82ba8:	1002d226 	beq	r2,zero,836f4 <___vfprintf_internal_r+0x1924>
   82bac:	d9002e17 	ldw	r4,184(sp)
   82bb0:	d9402f17 	ldw	r5,188(sp)
   82bb4:	20800017 	ldw	r2,0(r4)
   82bb8:	2807d7fa 	srai	r3,r5,31
   82bbc:	21000104 	addi	r4,r4,4
   82bc0:	d9002e15 	stw	r4,184(sp)
   82bc4:	11400015 	stw	r5,0(r2)
   82bc8:	10c00115 	stw	r3,4(r2)
   82bcc:	003cb806 	br	81eb0 <__alt_data_end+0xfffa1eb0>
   82bd0:	d8c02e17 	ldw	r3,184(sp)
   82bd4:	d9002e17 	ldw	r4,184(sp)
   82bd8:	8025883a 	mov	r18,r16
   82bdc:	18800017 	ldw	r2,0(r3)
   82be0:	21000104 	addi	r4,r4,4
   82be4:	00c00044 	movi	r3,1
   82be8:	e011883a 	mov	r8,fp
   82bec:	d8c02915 	stw	r3,164(sp)
   82bf0:	d8002785 	stb	zero,158(sp)
   82bf4:	d8801405 	stb	r2,80(sp)
   82bf8:	d9002e15 	stw	r4,184(sp)
   82bfc:	d8c02b15 	stw	r3,172(sp)
   82c00:	d8002a15 	stw	zero,168(sp)
   82c04:	d8003215 	stw	zero,200(sp)
   82c08:	dc001404 	addi	r16,sp,80
   82c0c:	0039883a 	mov	fp,zero
   82c10:	003e5306 	br	82560 <__alt_data_end+0xfffa2560>
   82c14:	01000274 	movhi	r4,9
   82c18:	21054e04 	addi	r4,r4,5432
   82c1c:	0039883a 	mov	fp,zero
   82c20:	d9003915 	stw	r4,228(sp)
   82c24:	04401e04 	movi	r17,120
   82c28:	003f6906 	br	829d0 <__alt_data_end+0xfffa29d0>
   82c2c:	8025883a 	mov	r18,r16
   82c30:	dc002903 	ldbu	r16,164(sp)
   82c34:	e011883a 	mov	r8,fp
   82c38:	84003fcc 	andi	r16,r16,255
   82c3c:	8005081e 	bne	r16,zero,84060 <___vfprintf_internal_r+0x2290>
   82c40:	883d6126 	beq	r17,zero,821c8 <__alt_data_end+0xfffa21c8>
   82c44:	00c00044 	movi	r3,1
   82c48:	d8c02915 	stw	r3,164(sp)
   82c4c:	dc401405 	stb	r17,80(sp)
   82c50:	d8002785 	stb	zero,158(sp)
   82c54:	003fe906 	br	82bfc <__alt_data_end+0xfffa2bfc>
   82c58:	01400274 	movhi	r5,9
   82c5c:	29454e04 	addi	r5,r5,5432
   82c60:	d9403915 	stw	r5,228(sp)
   82c64:	d8c02e15 	stw	r3,184(sp)
   82c68:	1025883a 	mov	r18,r2
   82c6c:	04401e04 	movi	r17,120
   82c70:	9d84b03a 	or	r2,r19,r22
   82c74:	1000fc1e 	bne	r2,zero,83068 <___vfprintf_internal_r+0x1298>
   82c78:	0039883a 	mov	fp,zero
   82c7c:	00800084 	movi	r2,2
   82c80:	10803fcc 	andi	r2,r2,255
   82c84:	00c00044 	movi	r3,1
   82c88:	10c20f26 	beq	r2,r3,834c8 <___vfprintf_internal_r+0x16f8>
   82c8c:	00c00084 	movi	r3,2
   82c90:	10fd3326 	beq	r2,r3,82160 <__alt_data_end+0xfffa2160>
   82c94:	003e0b06 	br	824c4 <__alt_data_end+0xfffa24c4>
   82c98:	d8c02017 	ldw	r3,128(sp)
   82c9c:	003e7106 	br	82664 <__alt_data_end+0xfffa2664>
   82ca0:	00801944 	movi	r2,101
   82ca4:	14407e0e 	bge	r2,r17,82ea0 <___vfprintf_internal_r+0x10d0>
   82ca8:	d9003617 	ldw	r4,216(sp)
   82cac:	d9403817 	ldw	r5,224(sp)
   82cb0:	000d883a 	mov	r6,zero
   82cb4:	000f883a 	mov	r7,zero
   82cb8:	d8c03c15 	stw	r3,240(sp)
   82cbc:	da003d15 	stw	r8,244(sp)
   82cc0:	008d5a80 	call	8d5a8 <__eqdf2>
   82cc4:	d8c03c17 	ldw	r3,240(sp)
   82cc8:	da003d17 	ldw	r8,244(sp)
   82ccc:	1000f71e 	bne	r2,zero,830ac <___vfprintf_internal_r+0x12dc>
   82cd0:	d8801f17 	ldw	r2,124(sp)
   82cd4:	01000274 	movhi	r4,9
   82cd8:	21055504 	addi	r4,r4,5460
   82cdc:	18c00044 	addi	r3,r3,1
   82ce0:	10800044 	addi	r2,r2,1
   82ce4:	41000015 	stw	r4,0(r8)
   82ce8:	01000044 	movi	r4,1
   82cec:	41000115 	stw	r4,4(r8)
   82cf0:	d8c02015 	stw	r3,128(sp)
   82cf4:	d8801f15 	stw	r2,124(sp)
   82cf8:	010001c4 	movi	r4,7
   82cfc:	2082b816 	blt	r4,r2,837e0 <___vfprintf_internal_r+0x1a10>
   82d00:	42000204 	addi	r8,r8,8
   82d04:	d8802617 	ldw	r2,152(sp)
   82d08:	d9403317 	ldw	r5,204(sp)
   82d0c:	11400216 	blt	r2,r5,82d18 <___vfprintf_internal_r+0xf48>
   82d10:	9080004c 	andi	r2,r18,1
   82d14:	103eb326 	beq	r2,zero,827e4 <__alt_data_end+0xfffa27e4>
   82d18:	d8803717 	ldw	r2,220(sp)
   82d1c:	d9003417 	ldw	r4,208(sp)
   82d20:	d9403717 	ldw	r5,220(sp)
   82d24:	1887883a 	add	r3,r3,r2
   82d28:	d8801f17 	ldw	r2,124(sp)
   82d2c:	41000015 	stw	r4,0(r8)
   82d30:	41400115 	stw	r5,4(r8)
   82d34:	10800044 	addi	r2,r2,1
   82d38:	d8c02015 	stw	r3,128(sp)
   82d3c:	d8801f15 	stw	r2,124(sp)
   82d40:	010001c4 	movi	r4,7
   82d44:	20832916 	blt	r4,r2,839ec <___vfprintf_internal_r+0x1c1c>
   82d48:	42000204 	addi	r8,r8,8
   82d4c:	d8803317 	ldw	r2,204(sp)
   82d50:	143fffc4 	addi	r16,r2,-1
   82d54:	043ea30e 	bge	zero,r16,827e4 <__alt_data_end+0xfffa27e4>
   82d58:	04400404 	movi	r17,16
   82d5c:	d8801f17 	ldw	r2,124(sp)
   82d60:	8c00880e 	bge	r17,r16,82f84 <___vfprintf_internal_r+0x11b4>
   82d64:	01400274 	movhi	r5,9
   82d68:	29455584 	addi	r5,r5,5462
   82d6c:	d9402c15 	stw	r5,176(sp)
   82d70:	058001c4 	movi	r22,7
   82d74:	dcc02d17 	ldw	r19,180(sp)
   82d78:	00000306 	br	82d88 <___vfprintf_internal_r+0xfb8>
   82d7c:	42000204 	addi	r8,r8,8
   82d80:	843ffc04 	addi	r16,r16,-16
   82d84:	8c00820e 	bge	r17,r16,82f90 <___vfprintf_internal_r+0x11c0>
   82d88:	18c00404 	addi	r3,r3,16
   82d8c:	10800044 	addi	r2,r2,1
   82d90:	45000015 	stw	r20,0(r8)
   82d94:	44400115 	stw	r17,4(r8)
   82d98:	d8c02015 	stw	r3,128(sp)
   82d9c:	d8801f15 	stw	r2,124(sp)
   82da0:	b0bff60e 	bge	r22,r2,82d7c <__alt_data_end+0xfffa2d7c>
   82da4:	d9801e04 	addi	r6,sp,120
   82da8:	b80b883a 	mov	r5,r23
   82dac:	9809883a 	mov	r4,r19
   82db0:	00897180 	call	89718 <__sprint_r>
   82db4:	103d0a1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   82db8:	d8c02017 	ldw	r3,128(sp)
   82dbc:	d8801f17 	ldw	r2,124(sp)
   82dc0:	da000404 	addi	r8,sp,16
   82dc4:	003fee06 	br	82d80 <__alt_data_end+0xfffa2d80>
   82dc8:	d9403117 	ldw	r5,196(sp)
   82dcc:	d8802917 	ldw	r2,164(sp)
   82dd0:	28adc83a 	sub	r22,r5,r2
   82dd4:	05be410e 	bge	zero,r22,826dc <__alt_data_end+0xfffa26dc>
   82dd8:	07000404 	movi	fp,16
   82ddc:	d8801f17 	ldw	r2,124(sp)
   82de0:	e5838f0e 	bge	fp,r22,83c20 <___vfprintf_internal_r+0x1e50>
   82de4:	01400274 	movhi	r5,9
   82de8:	29455584 	addi	r5,r5,5462
   82dec:	dc403015 	stw	r17,192(sp)
   82df0:	d9402c15 	stw	r5,176(sp)
   82df4:	b023883a 	mov	r17,r22
   82df8:	04c001c4 	movi	r19,7
   82dfc:	a82d883a 	mov	r22,r21
   82e00:	902b883a 	mov	r21,r18
   82e04:	8025883a 	mov	r18,r16
   82e08:	dc002d17 	ldw	r16,180(sp)
   82e0c:	00000306 	br	82e1c <___vfprintf_internal_r+0x104c>
   82e10:	8c7ffc04 	addi	r17,r17,-16
   82e14:	42000204 	addi	r8,r8,8
   82e18:	e440110e 	bge	fp,r17,82e60 <___vfprintf_internal_r+0x1090>
   82e1c:	18c00404 	addi	r3,r3,16
   82e20:	10800044 	addi	r2,r2,1
   82e24:	45000015 	stw	r20,0(r8)
   82e28:	47000115 	stw	fp,4(r8)
   82e2c:	d8c02015 	stw	r3,128(sp)
   82e30:	d8801f15 	stw	r2,124(sp)
   82e34:	98bff60e 	bge	r19,r2,82e10 <__alt_data_end+0xfffa2e10>
   82e38:	d9801e04 	addi	r6,sp,120
   82e3c:	b80b883a 	mov	r5,r23
   82e40:	8009883a 	mov	r4,r16
   82e44:	00897180 	call	89718 <__sprint_r>
   82e48:	103ce51e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   82e4c:	8c7ffc04 	addi	r17,r17,-16
   82e50:	d8c02017 	ldw	r3,128(sp)
   82e54:	d8801f17 	ldw	r2,124(sp)
   82e58:	da000404 	addi	r8,sp,16
   82e5c:	e47fef16 	blt	fp,r17,82e1c <__alt_data_end+0xfffa2e1c>
   82e60:	9021883a 	mov	r16,r18
   82e64:	a825883a 	mov	r18,r21
   82e68:	b02b883a 	mov	r21,r22
   82e6c:	882d883a 	mov	r22,r17
   82e70:	dc403017 	ldw	r17,192(sp)
   82e74:	d9002c17 	ldw	r4,176(sp)
   82e78:	1d87883a 	add	r3,r3,r22
   82e7c:	10800044 	addi	r2,r2,1
   82e80:	41000015 	stw	r4,0(r8)
   82e84:	45800115 	stw	r22,4(r8)
   82e88:	d8c02015 	stw	r3,128(sp)
   82e8c:	d8801f15 	stw	r2,124(sp)
   82e90:	010001c4 	movi	r4,7
   82e94:	20818e16 	blt	r4,r2,834d0 <___vfprintf_internal_r+0x1700>
   82e98:	42000204 	addi	r8,r8,8
   82e9c:	003e0f06 	br	826dc <__alt_data_end+0xfffa26dc>
   82ea0:	d9403317 	ldw	r5,204(sp)
   82ea4:	00800044 	movi	r2,1
   82ea8:	18c00044 	addi	r3,r3,1
   82eac:	1141530e 	bge	r2,r5,833fc <___vfprintf_internal_r+0x162c>
   82eb0:	dc401f17 	ldw	r17,124(sp)
   82eb4:	00800044 	movi	r2,1
   82eb8:	40800115 	stw	r2,4(r8)
   82ebc:	8c400044 	addi	r17,r17,1
   82ec0:	44000015 	stw	r16,0(r8)
   82ec4:	d8c02015 	stw	r3,128(sp)
   82ec8:	dc401f15 	stw	r17,124(sp)
   82ecc:	008001c4 	movi	r2,7
   82ed0:	14416b16 	blt	r2,r17,83480 <___vfprintf_internal_r+0x16b0>
   82ed4:	42000204 	addi	r8,r8,8
   82ed8:	d8803717 	ldw	r2,220(sp)
   82edc:	d9003417 	ldw	r4,208(sp)
   82ee0:	8c400044 	addi	r17,r17,1
   82ee4:	10c7883a 	add	r3,r2,r3
   82ee8:	40800115 	stw	r2,4(r8)
   82eec:	41000015 	stw	r4,0(r8)
   82ef0:	d8c02015 	stw	r3,128(sp)
   82ef4:	dc401f15 	stw	r17,124(sp)
   82ef8:	008001c4 	movi	r2,7
   82efc:	14416916 	blt	r2,r17,834a4 <___vfprintf_internal_r+0x16d4>
   82f00:	45800204 	addi	r22,r8,8
   82f04:	d9003617 	ldw	r4,216(sp)
   82f08:	d9403817 	ldw	r5,224(sp)
   82f0c:	000d883a 	mov	r6,zero
   82f10:	000f883a 	mov	r7,zero
   82f14:	d8c03c15 	stw	r3,240(sp)
   82f18:	008d5a80 	call	8d5a8 <__eqdf2>
   82f1c:	d8c03c17 	ldw	r3,240(sp)
   82f20:	1000bc26 	beq	r2,zero,83214 <___vfprintf_internal_r+0x1444>
   82f24:	d9403317 	ldw	r5,204(sp)
   82f28:	84000044 	addi	r16,r16,1
   82f2c:	8c400044 	addi	r17,r17,1
   82f30:	28bfffc4 	addi	r2,r5,-1
   82f34:	1887883a 	add	r3,r3,r2
   82f38:	b0800115 	stw	r2,4(r22)
   82f3c:	b4000015 	stw	r16,0(r22)
   82f40:	d8c02015 	stw	r3,128(sp)
   82f44:	dc401f15 	stw	r17,124(sp)
   82f48:	008001c4 	movi	r2,7
   82f4c:	14414316 	blt	r2,r17,8345c <___vfprintf_internal_r+0x168c>
   82f50:	b5800204 	addi	r22,r22,8
   82f54:	d9003a17 	ldw	r4,232(sp)
   82f58:	df0022c4 	addi	fp,sp,139
   82f5c:	8c400044 	addi	r17,r17,1
   82f60:	20c7883a 	add	r3,r4,r3
   82f64:	b7000015 	stw	fp,0(r22)
   82f68:	b1000115 	stw	r4,4(r22)
   82f6c:	d8c02015 	stw	r3,128(sp)
   82f70:	dc401f15 	stw	r17,124(sp)
   82f74:	008001c4 	movi	r2,7
   82f78:	14400e16 	blt	r2,r17,82fb4 <___vfprintf_internal_r+0x11e4>
   82f7c:	b2000204 	addi	r8,r22,8
   82f80:	003e1806 	br	827e4 <__alt_data_end+0xfffa27e4>
   82f84:	01000274 	movhi	r4,9
   82f88:	21055584 	addi	r4,r4,5462
   82f8c:	d9002c15 	stw	r4,176(sp)
   82f90:	d9002c17 	ldw	r4,176(sp)
   82f94:	1c07883a 	add	r3,r3,r16
   82f98:	44000115 	stw	r16,4(r8)
   82f9c:	41000015 	stw	r4,0(r8)
   82fa0:	10800044 	addi	r2,r2,1
   82fa4:	d8c02015 	stw	r3,128(sp)
   82fa8:	d8801f15 	stw	r2,124(sp)
   82fac:	010001c4 	movi	r4,7
   82fb0:	20be0b0e 	bge	r4,r2,827e0 <__alt_data_end+0xfffa27e0>
   82fb4:	d9002d17 	ldw	r4,180(sp)
   82fb8:	d9801e04 	addi	r6,sp,120
   82fbc:	b80b883a 	mov	r5,r23
   82fc0:	00897180 	call	89718 <__sprint_r>
   82fc4:	103c861e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   82fc8:	d8c02017 	ldw	r3,128(sp)
   82fcc:	da000404 	addi	r8,sp,16
   82fd0:	003e0406 	br	827e4 <__alt_data_end+0xfffa27e4>
   82fd4:	d9002d17 	ldw	r4,180(sp)
   82fd8:	d9801e04 	addi	r6,sp,120
   82fdc:	b80b883a 	mov	r5,r23
   82fe0:	00897180 	call	89718 <__sprint_r>
   82fe4:	103e3b26 	beq	r2,zero,828d4 <__alt_data_end+0xfffa28d4>
   82fe8:	003c7d06 	br	821e0 <__alt_data_end+0xfffa21e0>
   82fec:	d9002d17 	ldw	r4,180(sp)
   82ff0:	d9801e04 	addi	r6,sp,120
   82ff4:	b80b883a 	mov	r5,r23
   82ff8:	00897180 	call	89718 <__sprint_r>
   82ffc:	103c781e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83000:	d8c02017 	ldw	r3,128(sp)
   83004:	da000404 	addi	r8,sp,16
   83008:	003de906 	br	827b0 <__alt_data_end+0xfffa27b0>
   8300c:	d9002d17 	ldw	r4,180(sp)
   83010:	d9801e04 	addi	r6,sp,120
   83014:	b80b883a 	mov	r5,r23
   83018:	00897180 	call	89718 <__sprint_r>
   8301c:	103c701e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83020:	d8c02017 	ldw	r3,128(sp)
   83024:	da000404 	addi	r8,sp,16
   83028:	003d9b06 	br	82698 <__alt_data_end+0xfffa2698>
   8302c:	d9002d17 	ldw	r4,180(sp)
   83030:	d9801e04 	addi	r6,sp,120
   83034:	b80b883a 	mov	r5,r23
   83038:	00897180 	call	89718 <__sprint_r>
   8303c:	103c681e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83040:	d8c02017 	ldw	r3,128(sp)
   83044:	da000404 	addi	r8,sp,16
   83048:	003da106 	br	826d0 <__alt_data_end+0xfffa26d0>
   8304c:	d9402a17 	ldw	r5,168(sp)
   83050:	d8002785 	stb	zero,158(sp)
   83054:	283f0616 	blt	r5,zero,82c70 <__alt_data_end+0xfffa2c70>
   83058:	00ffdfc4 	movi	r3,-129
   8305c:	9d84b03a 	or	r2,r19,r22
   83060:	90e4703a 	and	r18,r18,r3
   83064:	103c3b26 	beq	r2,zero,82154 <__alt_data_end+0xfffa2154>
   83068:	0039883a 	mov	fp,zero
   8306c:	003e5806 	br	829d0 <__alt_data_end+0xfffa29d0>
   83070:	9080040c 	andi	r2,r18,16
   83074:	1001b326 	beq	r2,zero,83744 <___vfprintf_internal_r+0x1974>
   83078:	d8c02e17 	ldw	r3,184(sp)
   8307c:	d9002a17 	ldw	r4,168(sp)
   83080:	d8002785 	stb	zero,158(sp)
   83084:	18800104 	addi	r2,r3,4
   83088:	1cc00017 	ldw	r19,0(r3)
   8308c:	002d883a 	mov	r22,zero
   83090:	2001b516 	blt	r4,zero,83768 <___vfprintf_internal_r+0x1998>
   83094:	00ffdfc4 	movi	r3,-129
   83098:	d8802e15 	stw	r2,184(sp)
   8309c:	90e4703a 	and	r18,r18,r3
   830a0:	983d0526 	beq	r19,zero,824b8 <__alt_data_end+0xfffa24b8>
   830a4:	0039883a 	mov	fp,zero
   830a8:	003d0806 	br	824cc <__alt_data_end+0xfffa24cc>
   830ac:	dc402617 	ldw	r17,152(sp)
   830b0:	0441d30e 	bge	zero,r17,83800 <___vfprintf_internal_r+0x1a30>
   830b4:	dc403217 	ldw	r17,200(sp)
   830b8:	d8803317 	ldw	r2,204(sp)
   830bc:	1440010e 	bge	r2,r17,830c4 <___vfprintf_internal_r+0x12f4>
   830c0:	1023883a 	mov	r17,r2
   830c4:	04400a0e 	bge	zero,r17,830f0 <___vfprintf_internal_r+0x1320>
   830c8:	d8801f17 	ldw	r2,124(sp)
   830cc:	1c47883a 	add	r3,r3,r17
   830d0:	44000015 	stw	r16,0(r8)
   830d4:	10800044 	addi	r2,r2,1
   830d8:	44400115 	stw	r17,4(r8)
   830dc:	d8c02015 	stw	r3,128(sp)
   830e0:	d8801f15 	stw	r2,124(sp)
   830e4:	010001c4 	movi	r4,7
   830e8:	20826516 	blt	r4,r2,83a80 <___vfprintf_internal_r+0x1cb0>
   830ec:	42000204 	addi	r8,r8,8
   830f0:	88026116 	blt	r17,zero,83a78 <___vfprintf_internal_r+0x1ca8>
   830f4:	d9003217 	ldw	r4,200(sp)
   830f8:	2463c83a 	sub	r17,r4,r17
   830fc:	04407b0e 	bge	zero,r17,832ec <___vfprintf_internal_r+0x151c>
   83100:	05800404 	movi	r22,16
   83104:	d8801f17 	ldw	r2,124(sp)
   83108:	b4419d0e 	bge	r22,r17,83780 <___vfprintf_internal_r+0x19b0>
   8310c:	01000274 	movhi	r4,9
   83110:	21055584 	addi	r4,r4,5462
   83114:	d9002c15 	stw	r4,176(sp)
   83118:	070001c4 	movi	fp,7
   8311c:	dcc02d17 	ldw	r19,180(sp)
   83120:	00000306 	br	83130 <___vfprintf_internal_r+0x1360>
   83124:	42000204 	addi	r8,r8,8
   83128:	8c7ffc04 	addi	r17,r17,-16
   8312c:	b441970e 	bge	r22,r17,8378c <___vfprintf_internal_r+0x19bc>
   83130:	18c00404 	addi	r3,r3,16
   83134:	10800044 	addi	r2,r2,1
   83138:	45000015 	stw	r20,0(r8)
   8313c:	45800115 	stw	r22,4(r8)
   83140:	d8c02015 	stw	r3,128(sp)
   83144:	d8801f15 	stw	r2,124(sp)
   83148:	e0bff60e 	bge	fp,r2,83124 <__alt_data_end+0xfffa3124>
   8314c:	d9801e04 	addi	r6,sp,120
   83150:	b80b883a 	mov	r5,r23
   83154:	9809883a 	mov	r4,r19
   83158:	00897180 	call	89718 <__sprint_r>
   8315c:	103c201e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83160:	d8c02017 	ldw	r3,128(sp)
   83164:	d8801f17 	ldw	r2,124(sp)
   83168:	da000404 	addi	r8,sp,16
   8316c:	003fee06 	br	83128 <__alt_data_end+0xfffa3128>
   83170:	d9002d17 	ldw	r4,180(sp)
   83174:	d9801e04 	addi	r6,sp,120
   83178:	b80b883a 	mov	r5,r23
   8317c:	00897180 	call	89718 <__sprint_r>
   83180:	103c171e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83184:	d8c02017 	ldw	r3,128(sp)
   83188:	df002787 	ldb	fp,158(sp)
   8318c:	da000404 	addi	r8,sp,16
   83190:	003d3406 	br	82664 <__alt_data_end+0xfffa2664>
   83194:	9080040c 	andi	r2,r18,16
   83198:	10016126 	beq	r2,zero,83720 <___vfprintf_internal_r+0x1950>
   8319c:	d9402e17 	ldw	r5,184(sp)
   831a0:	2cc00017 	ldw	r19,0(r5)
   831a4:	29400104 	addi	r5,r5,4
   831a8:	d9402e15 	stw	r5,184(sp)
   831ac:	982dd7fa 	srai	r22,r19,31
   831b0:	b005883a 	mov	r2,r22
   831b4:	003c5a06 	br	82320 <__alt_data_end+0xfffa2320>
   831b8:	9080040c 	andi	r2,r18,16
   831bc:	10003526 	beq	r2,zero,83294 <___vfprintf_internal_r+0x14c4>
   831c0:	d8c02e17 	ldw	r3,184(sp)
   831c4:	d9002a17 	ldw	r4,168(sp)
   831c8:	d8002785 	stb	zero,158(sp)
   831cc:	18800104 	addi	r2,r3,4
   831d0:	1cc00017 	ldw	r19,0(r3)
   831d4:	002d883a 	mov	r22,zero
   831d8:	20003716 	blt	r4,zero,832b8 <___vfprintf_internal_r+0x14e8>
   831dc:	00ffdfc4 	movi	r3,-129
   831e0:	d8802e15 	stw	r2,184(sp)
   831e4:	90e4703a 	and	r18,r18,r3
   831e8:	0039883a 	mov	fp,zero
   831ec:	983dd426 	beq	r19,zero,82940 <__alt_data_end+0xfffa2940>
   831f0:	00800244 	movi	r2,9
   831f4:	14fc5336 	bltu	r2,r19,82344 <__alt_data_end+0xfffa2344>
   831f8:	d8c02817 	ldw	r3,160(sp)
   831fc:	dc001dc4 	addi	r16,sp,119
   83200:	9cc00c04 	addi	r19,r19,48
   83204:	1c07c83a 	sub	r3,r3,r16
   83208:	dcc01dc5 	stb	r19,119(sp)
   8320c:	d8c02b15 	stw	r3,172(sp)
   83210:	003cc606 	br	8252c <__alt_data_end+0xfffa252c>
   83214:	d8803317 	ldw	r2,204(sp)
   83218:	143fffc4 	addi	r16,r2,-1
   8321c:	043f4d0e 	bge	zero,r16,82f54 <__alt_data_end+0xfffa2f54>
   83220:	07000404 	movi	fp,16
   83224:	e400810e 	bge	fp,r16,8342c <___vfprintf_internal_r+0x165c>
   83228:	01400274 	movhi	r5,9
   8322c:	29455584 	addi	r5,r5,5462
   83230:	d9402c15 	stw	r5,176(sp)
   83234:	01c001c4 	movi	r7,7
   83238:	dcc02d17 	ldw	r19,180(sp)
   8323c:	00000306 	br	8324c <___vfprintf_internal_r+0x147c>
   83240:	b5800204 	addi	r22,r22,8
   83244:	843ffc04 	addi	r16,r16,-16
   83248:	e4007b0e 	bge	fp,r16,83438 <___vfprintf_internal_r+0x1668>
   8324c:	18c00404 	addi	r3,r3,16
   83250:	8c400044 	addi	r17,r17,1
   83254:	b5000015 	stw	r20,0(r22)
   83258:	b7000115 	stw	fp,4(r22)
   8325c:	d8c02015 	stw	r3,128(sp)
   83260:	dc401f15 	stw	r17,124(sp)
   83264:	3c7ff60e 	bge	r7,r17,83240 <__alt_data_end+0xfffa3240>
   83268:	d9801e04 	addi	r6,sp,120
   8326c:	b80b883a 	mov	r5,r23
   83270:	9809883a 	mov	r4,r19
   83274:	d9c03c15 	stw	r7,240(sp)
   83278:	00897180 	call	89718 <__sprint_r>
   8327c:	d9c03c17 	ldw	r7,240(sp)
   83280:	103bd71e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83284:	d8c02017 	ldw	r3,128(sp)
   83288:	dc401f17 	ldw	r17,124(sp)
   8328c:	dd800404 	addi	r22,sp,16
   83290:	003fec06 	br	83244 <__alt_data_end+0xfffa3244>
   83294:	9080100c 	andi	r2,r18,64
   83298:	d8002785 	stb	zero,158(sp)
   8329c:	10010e26 	beq	r2,zero,836d8 <___vfprintf_internal_r+0x1908>
   832a0:	d9402e17 	ldw	r5,184(sp)
   832a4:	d8c02a17 	ldw	r3,168(sp)
   832a8:	002d883a 	mov	r22,zero
   832ac:	28800104 	addi	r2,r5,4
   832b0:	2cc0000b 	ldhu	r19,0(r5)
   832b4:	183fc90e 	bge	r3,zero,831dc <__alt_data_end+0xfffa31dc>
   832b8:	d8802e15 	stw	r2,184(sp)
   832bc:	0039883a 	mov	fp,zero
   832c0:	9d84b03a 	or	r2,r19,r22
   832c4:	103c1e1e 	bne	r2,zero,82340 <__alt_data_end+0xfffa2340>
   832c8:	00800044 	movi	r2,1
   832cc:	003e6c06 	br	82c80 <__alt_data_end+0xfffa2c80>
   832d0:	d9002d17 	ldw	r4,180(sp)
   832d4:	d9801e04 	addi	r6,sp,120
   832d8:	b80b883a 	mov	r5,r23
   832dc:	00897180 	call	89718 <__sprint_r>
   832e0:	103bbf1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   832e4:	d8c02017 	ldw	r3,128(sp)
   832e8:	da000404 	addi	r8,sp,16
   832ec:	d9003217 	ldw	r4,200(sp)
   832f0:	d8802617 	ldw	r2,152(sp)
   832f4:	d9403317 	ldw	r5,204(sp)
   832f8:	8123883a 	add	r17,r16,r4
   832fc:	11400216 	blt	r2,r5,83308 <___vfprintf_internal_r+0x1538>
   83300:	9100004c 	andi	r4,r18,1
   83304:	20000d26 	beq	r4,zero,8333c <___vfprintf_internal_r+0x156c>
   83308:	d9003717 	ldw	r4,220(sp)
   8330c:	d9403417 	ldw	r5,208(sp)
   83310:	1907883a 	add	r3,r3,r4
   83314:	d9001f17 	ldw	r4,124(sp)
   83318:	41400015 	stw	r5,0(r8)
   8331c:	d9403717 	ldw	r5,220(sp)
   83320:	21000044 	addi	r4,r4,1
   83324:	d8c02015 	stw	r3,128(sp)
   83328:	41400115 	stw	r5,4(r8)
   8332c:	d9001f15 	stw	r4,124(sp)
   83330:	014001c4 	movi	r5,7
   83334:	2901e816 	blt	r5,r4,83ad8 <___vfprintf_internal_r+0x1d08>
   83338:	42000204 	addi	r8,r8,8
   8333c:	d9003317 	ldw	r4,204(sp)
   83340:	8121883a 	add	r16,r16,r4
   83344:	2085c83a 	sub	r2,r4,r2
   83348:	8461c83a 	sub	r16,r16,r17
   8334c:	1400010e 	bge	r2,r16,83354 <___vfprintf_internal_r+0x1584>
   83350:	1021883a 	mov	r16,r2
   83354:	04000a0e 	bge	zero,r16,83380 <___vfprintf_internal_r+0x15b0>
   83358:	d9001f17 	ldw	r4,124(sp)
   8335c:	1c07883a 	add	r3,r3,r16
   83360:	44400015 	stw	r17,0(r8)
   83364:	21000044 	addi	r4,r4,1
   83368:	44000115 	stw	r16,4(r8)
   8336c:	d8c02015 	stw	r3,128(sp)
   83370:	d9001f15 	stw	r4,124(sp)
   83374:	014001c4 	movi	r5,7
   83378:	2901fb16 	blt	r5,r4,83b68 <___vfprintf_internal_r+0x1d98>
   8337c:	42000204 	addi	r8,r8,8
   83380:	8001f716 	blt	r16,zero,83b60 <___vfprintf_internal_r+0x1d90>
   83384:	1421c83a 	sub	r16,r2,r16
   83388:	043d160e 	bge	zero,r16,827e4 <__alt_data_end+0xfffa27e4>
   8338c:	04400404 	movi	r17,16
   83390:	d8801f17 	ldw	r2,124(sp)
   83394:	8c3efb0e 	bge	r17,r16,82f84 <__alt_data_end+0xfffa2f84>
   83398:	01400274 	movhi	r5,9
   8339c:	29455584 	addi	r5,r5,5462
   833a0:	d9402c15 	stw	r5,176(sp)
   833a4:	058001c4 	movi	r22,7
   833a8:	dcc02d17 	ldw	r19,180(sp)
   833ac:	00000306 	br	833bc <___vfprintf_internal_r+0x15ec>
   833b0:	42000204 	addi	r8,r8,8
   833b4:	843ffc04 	addi	r16,r16,-16
   833b8:	8c3ef50e 	bge	r17,r16,82f90 <__alt_data_end+0xfffa2f90>
   833bc:	18c00404 	addi	r3,r3,16
   833c0:	10800044 	addi	r2,r2,1
   833c4:	45000015 	stw	r20,0(r8)
   833c8:	44400115 	stw	r17,4(r8)
   833cc:	d8c02015 	stw	r3,128(sp)
   833d0:	d8801f15 	stw	r2,124(sp)
   833d4:	b0bff60e 	bge	r22,r2,833b0 <__alt_data_end+0xfffa33b0>
   833d8:	d9801e04 	addi	r6,sp,120
   833dc:	b80b883a 	mov	r5,r23
   833e0:	9809883a 	mov	r4,r19
   833e4:	00897180 	call	89718 <__sprint_r>
   833e8:	103b7d1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   833ec:	d8c02017 	ldw	r3,128(sp)
   833f0:	d8801f17 	ldw	r2,124(sp)
   833f4:	da000404 	addi	r8,sp,16
   833f8:	003fee06 	br	833b4 <__alt_data_end+0xfffa33b4>
   833fc:	9088703a 	and	r4,r18,r2
   83400:	203eab1e 	bne	r4,zero,82eb0 <__alt_data_end+0xfffa2eb0>
   83404:	dc401f17 	ldw	r17,124(sp)
   83408:	40800115 	stw	r2,4(r8)
   8340c:	44000015 	stw	r16,0(r8)
   83410:	8c400044 	addi	r17,r17,1
   83414:	d8c02015 	stw	r3,128(sp)
   83418:	dc401f15 	stw	r17,124(sp)
   8341c:	008001c4 	movi	r2,7
   83420:	14400e16 	blt	r2,r17,8345c <___vfprintf_internal_r+0x168c>
   83424:	45800204 	addi	r22,r8,8
   83428:	003eca06 	br	82f54 <__alt_data_end+0xfffa2f54>
   8342c:	01000274 	movhi	r4,9
   83430:	21055584 	addi	r4,r4,5462
   83434:	d9002c15 	stw	r4,176(sp)
   83438:	d8802c17 	ldw	r2,176(sp)
   8343c:	1c07883a 	add	r3,r3,r16
   83440:	8c400044 	addi	r17,r17,1
   83444:	b0800015 	stw	r2,0(r22)
   83448:	b4000115 	stw	r16,4(r22)
   8344c:	d8c02015 	stw	r3,128(sp)
   83450:	dc401f15 	stw	r17,124(sp)
   83454:	008001c4 	movi	r2,7
   83458:	147ebd0e 	bge	r2,r17,82f50 <__alt_data_end+0xfffa2f50>
   8345c:	d9002d17 	ldw	r4,180(sp)
   83460:	d9801e04 	addi	r6,sp,120
   83464:	b80b883a 	mov	r5,r23
   83468:	00897180 	call	89718 <__sprint_r>
   8346c:	103b5c1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83470:	d8c02017 	ldw	r3,128(sp)
   83474:	dc401f17 	ldw	r17,124(sp)
   83478:	dd800404 	addi	r22,sp,16
   8347c:	003eb506 	br	82f54 <__alt_data_end+0xfffa2f54>
   83480:	d9002d17 	ldw	r4,180(sp)
   83484:	d9801e04 	addi	r6,sp,120
   83488:	b80b883a 	mov	r5,r23
   8348c:	00897180 	call	89718 <__sprint_r>
   83490:	103b531e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83494:	d8c02017 	ldw	r3,128(sp)
   83498:	dc401f17 	ldw	r17,124(sp)
   8349c:	da000404 	addi	r8,sp,16
   834a0:	003e8d06 	br	82ed8 <__alt_data_end+0xfffa2ed8>
   834a4:	d9002d17 	ldw	r4,180(sp)
   834a8:	d9801e04 	addi	r6,sp,120
   834ac:	b80b883a 	mov	r5,r23
   834b0:	00897180 	call	89718 <__sprint_r>
   834b4:	103b4a1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   834b8:	d8c02017 	ldw	r3,128(sp)
   834bc:	dc401f17 	ldw	r17,124(sp)
   834c0:	dd800404 	addi	r22,sp,16
   834c4:	003e8f06 	br	82f04 <__alt_data_end+0xfffa2f04>
   834c8:	0027883a 	mov	r19,zero
   834cc:	003f4a06 	br	831f8 <__alt_data_end+0xfffa31f8>
   834d0:	d9002d17 	ldw	r4,180(sp)
   834d4:	d9801e04 	addi	r6,sp,120
   834d8:	b80b883a 	mov	r5,r23
   834dc:	00897180 	call	89718 <__sprint_r>
   834e0:	103b3f1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   834e4:	d8c02017 	ldw	r3,128(sp)
   834e8:	da000404 	addi	r8,sp,16
   834ec:	003c7b06 	br	826dc <__alt_data_end+0xfffa26dc>
   834f0:	d9402a17 	ldw	r5,168(sp)
   834f4:	04e7c83a 	sub	r19,zero,r19
   834f8:	07000b44 	movi	fp,45
   834fc:	9804c03a 	cmpne	r2,r19,zero
   83500:	05adc83a 	sub	r22,zero,r22
   83504:	df002785 	stb	fp,158(sp)
   83508:	b0adc83a 	sub	r22,r22,r2
   8350c:	28017b16 	blt	r5,zero,83afc <___vfprintf_internal_r+0x1d2c>
   83510:	00bfdfc4 	movi	r2,-129
   83514:	90a4703a 	and	r18,r18,r2
   83518:	003b8906 	br	82340 <__alt_data_end+0xfffa2340>
   8351c:	d9003617 	ldw	r4,216(sp)
   83520:	d9403817 	ldw	r5,224(sp)
   83524:	da003d15 	stw	r8,244(sp)
   83528:	008933c0 	call	8933c <__fpclassifyd>
   8352c:	da003d17 	ldw	r8,244(sp)
   83530:	1000f026 	beq	r2,zero,838f4 <___vfprintf_internal_r+0x1b24>
   83534:	d9002a17 	ldw	r4,168(sp)
   83538:	05bff7c4 	movi	r22,-33
   8353c:	00bfffc4 	movi	r2,-1
   83540:	8dac703a 	and	r22,r17,r22
   83544:	20820026 	beq	r4,r2,83d48 <___vfprintf_internal_r+0x1f78>
   83548:	008011c4 	movi	r2,71
   8354c:	b081f726 	beq	r22,r2,83d2c <___vfprintf_internal_r+0x1f5c>
   83550:	d9003817 	ldw	r4,224(sp)
   83554:	90c04014 	ori	r3,r18,256
   83558:	d8c02c15 	stw	r3,176(sp)
   8355c:	20021516 	blt	r4,zero,83db4 <___vfprintf_internal_r+0x1fe4>
   83560:	dcc03817 	ldw	r19,224(sp)
   83564:	d8002905 	stb	zero,164(sp)
   83568:	00801984 	movi	r2,102
   8356c:	8881f926 	beq	r17,r2,83d54 <___vfprintf_internal_r+0x1f84>
   83570:	00801184 	movi	r2,70
   83574:	88821c26 	beq	r17,r2,83de8 <___vfprintf_internal_r+0x2018>
   83578:	00801144 	movi	r2,69
   8357c:	b081ef26 	beq	r22,r2,83d3c <___vfprintf_internal_r+0x1f6c>
   83580:	d8c02a17 	ldw	r3,168(sp)
   83584:	d8802104 	addi	r2,sp,132
   83588:	d8800315 	stw	r2,12(sp)
   8358c:	d9403617 	ldw	r5,216(sp)
   83590:	d8802504 	addi	r2,sp,148
   83594:	d9002d17 	ldw	r4,180(sp)
   83598:	d8800215 	stw	r2,8(sp)
   8359c:	d8802604 	addi	r2,sp,152
   835a0:	d8c00015 	stw	r3,0(sp)
   835a4:	d8800115 	stw	r2,4(sp)
   835a8:	01c00084 	movi	r7,2
   835ac:	980d883a 	mov	r6,r19
   835b0:	d8c03c15 	stw	r3,240(sp)
   835b4:	da003d15 	stw	r8,244(sp)
   835b8:	00845000 	call	84500 <_dtoa_r>
   835bc:	1021883a 	mov	r16,r2
   835c0:	008019c4 	movi	r2,103
   835c4:	d8c03c17 	ldw	r3,240(sp)
   835c8:	da003d17 	ldw	r8,244(sp)
   835cc:	88817126 	beq	r17,r2,83b94 <___vfprintf_internal_r+0x1dc4>
   835d0:	008011c4 	movi	r2,71
   835d4:	88829126 	beq	r17,r2,8401c <___vfprintf_internal_r+0x224c>
   835d8:	80f9883a 	add	fp,r16,r3
   835dc:	d9003617 	ldw	r4,216(sp)
   835e0:	000d883a 	mov	r6,zero
   835e4:	000f883a 	mov	r7,zero
   835e8:	980b883a 	mov	r5,r19
   835ec:	da003d15 	stw	r8,244(sp)
   835f0:	008d5a80 	call	8d5a8 <__eqdf2>
   835f4:	da003d17 	ldw	r8,244(sp)
   835f8:	10018d26 	beq	r2,zero,83c30 <___vfprintf_internal_r+0x1e60>
   835fc:	d8802117 	ldw	r2,132(sp)
   83600:	1700062e 	bgeu	r2,fp,8361c <___vfprintf_internal_r+0x184c>
   83604:	01000c04 	movi	r4,48
   83608:	10c00044 	addi	r3,r2,1
   8360c:	d8c02115 	stw	r3,132(sp)
   83610:	11000005 	stb	r4,0(r2)
   83614:	d8802117 	ldw	r2,132(sp)
   83618:	173ffb36 	bltu	r2,fp,83608 <__alt_data_end+0xfffa3608>
   8361c:	1405c83a 	sub	r2,r2,r16
   83620:	d8803315 	stw	r2,204(sp)
   83624:	008011c4 	movi	r2,71
   83628:	b0817626 	beq	r22,r2,83c04 <___vfprintf_internal_r+0x1e34>
   8362c:	00801944 	movi	r2,101
   83630:	1442800e 	bge	r2,r17,84034 <___vfprintf_internal_r+0x2264>
   83634:	d8c02617 	ldw	r3,152(sp)
   83638:	00801984 	movi	r2,102
   8363c:	d8c03215 	stw	r3,200(sp)
   83640:	8881fe26 	beq	r17,r2,83e3c <___vfprintf_internal_r+0x206c>
   83644:	d8c03217 	ldw	r3,200(sp)
   83648:	d9003317 	ldw	r4,204(sp)
   8364c:	1901dd16 	blt	r3,r4,83dc4 <___vfprintf_internal_r+0x1ff4>
   83650:	9480004c 	andi	r18,r18,1
   83654:	90022b1e 	bne	r18,zero,83f04 <___vfprintf_internal_r+0x2134>
   83658:	1805883a 	mov	r2,r3
   8365c:	18028316 	blt	r3,zero,8406c <___vfprintf_internal_r+0x229c>
   83660:	d8c03217 	ldw	r3,200(sp)
   83664:	044019c4 	movi	r17,103
   83668:	d8c02b15 	stw	r3,172(sp)
   8366c:	df002907 	ldb	fp,164(sp)
   83670:	e001531e 	bne	fp,zero,83bc0 <___vfprintf_internal_r+0x1df0>
   83674:	df002783 	ldbu	fp,158(sp)
   83678:	d8802915 	stw	r2,164(sp)
   8367c:	dc802c17 	ldw	r18,176(sp)
   83680:	d8002a15 	stw	zero,168(sp)
   83684:	003baf06 	br	82544 <__alt_data_end+0xfffa2544>
   83688:	d8c02e17 	ldw	r3,184(sp)
   8368c:	d9002e17 	ldw	r4,184(sp)
   83690:	d9402e17 	ldw	r5,184(sp)
   83694:	18c00017 	ldw	r3,0(r3)
   83698:	21000117 	ldw	r4,4(r4)
   8369c:	29400204 	addi	r5,r5,8
   836a0:	d8c03615 	stw	r3,216(sp)
   836a4:	d9003815 	stw	r4,224(sp)
   836a8:	d9402e15 	stw	r5,184(sp)
   836ac:	003b5006 	br	823f0 <__alt_data_end+0xfffa23f0>
   836b0:	ac400007 	ldb	r17,0(r21)
   836b4:	003a2806 	br	81f58 <__alt_data_end+0xfffa1f58>
   836b8:	9080100c 	andi	r2,r18,64
   836bc:	1000a826 	beq	r2,zero,83960 <___vfprintf_internal_r+0x1b90>
   836c0:	d8c02e17 	ldw	r3,184(sp)
   836c4:	002d883a 	mov	r22,zero
   836c8:	1cc0000b 	ldhu	r19,0(r3)
   836cc:	18c00104 	addi	r3,r3,4
   836d0:	d8c02e15 	stw	r3,184(sp)
   836d4:	003caf06 	br	82994 <__alt_data_end+0xfffa2994>
   836d8:	d9002e17 	ldw	r4,184(sp)
   836dc:	d9402a17 	ldw	r5,168(sp)
   836e0:	002d883a 	mov	r22,zero
   836e4:	20800104 	addi	r2,r4,4
   836e8:	24c00017 	ldw	r19,0(r4)
   836ec:	283ebb0e 	bge	r5,zero,831dc <__alt_data_end+0xfffa31dc>
   836f0:	003ef106 	br	832b8 <__alt_data_end+0xfffa32b8>
   836f4:	9080040c 	andi	r2,r18,16
   836f8:	1000921e 	bne	r2,zero,83944 <___vfprintf_internal_r+0x1b74>
   836fc:	9480100c 	andi	r18,r18,64
   83700:	90013926 	beq	r18,zero,83be8 <___vfprintf_internal_r+0x1e18>
   83704:	d9402e17 	ldw	r5,184(sp)
   83708:	d8c02f17 	ldw	r3,188(sp)
   8370c:	28800017 	ldw	r2,0(r5)
   83710:	29400104 	addi	r5,r5,4
   83714:	d9402e15 	stw	r5,184(sp)
   83718:	10c0000d 	sth	r3,0(r2)
   8371c:	0039e406 	br	81eb0 <__alt_data_end+0xfffa1eb0>
   83720:	9080100c 	andi	r2,r18,64
   83724:	10008026 	beq	r2,zero,83928 <___vfprintf_internal_r+0x1b58>
   83728:	d8802e17 	ldw	r2,184(sp)
   8372c:	14c0000f 	ldh	r19,0(r2)
   83730:	10800104 	addi	r2,r2,4
   83734:	d8802e15 	stw	r2,184(sp)
   83738:	982dd7fa 	srai	r22,r19,31
   8373c:	b005883a 	mov	r2,r22
   83740:	003af706 	br	82320 <__alt_data_end+0xfffa2320>
   83744:	9080100c 	andi	r2,r18,64
   83748:	d8002785 	stb	zero,158(sp)
   8374c:	10008a1e 	bne	r2,zero,83978 <___vfprintf_internal_r+0x1ba8>
   83750:	d9002e17 	ldw	r4,184(sp)
   83754:	d9402a17 	ldw	r5,168(sp)
   83758:	002d883a 	mov	r22,zero
   8375c:	20800104 	addi	r2,r4,4
   83760:	24c00017 	ldw	r19,0(r4)
   83764:	283e4b0e 	bge	r5,zero,83094 <__alt_data_end+0xfffa3094>
   83768:	9d86b03a 	or	r3,r19,r22
   8376c:	d8802e15 	stw	r2,184(sp)
   83770:	183e4c1e 	bne	r3,zero,830a4 <__alt_data_end+0xfffa30a4>
   83774:	0039883a 	mov	fp,zero
   83778:	0005883a 	mov	r2,zero
   8377c:	003d4006 	br	82c80 <__alt_data_end+0xfffa2c80>
   83780:	01400274 	movhi	r5,9
   83784:	29455584 	addi	r5,r5,5462
   83788:	d9402c15 	stw	r5,176(sp)
   8378c:	d9402c17 	ldw	r5,176(sp)
   83790:	1c47883a 	add	r3,r3,r17
   83794:	10800044 	addi	r2,r2,1
   83798:	41400015 	stw	r5,0(r8)
   8379c:	44400115 	stw	r17,4(r8)
   837a0:	d8c02015 	stw	r3,128(sp)
   837a4:	d8801f15 	stw	r2,124(sp)
   837a8:	010001c4 	movi	r4,7
   837ac:	20bec816 	blt	r4,r2,832d0 <__alt_data_end+0xfffa32d0>
   837b0:	42000204 	addi	r8,r8,8
   837b4:	003ecd06 	br	832ec <__alt_data_end+0xfffa32ec>
   837b8:	d9002a17 	ldw	r4,168(sp)
   837bc:	d8002785 	stb	zero,158(sp)
   837c0:	203d2d16 	blt	r4,zero,82c78 <__alt_data_end+0xfffa2c78>
   837c4:	00bfdfc4 	movi	r2,-129
   837c8:	90a4703a 	and	r18,r18,r2
   837cc:	003a6106 	br	82154 <__alt_data_end+0xfffa2154>
   837d0:	01000274 	movhi	r4,9
   837d4:	21055584 	addi	r4,r4,5462
   837d8:	d9002c15 	stw	r4,176(sp)
   837dc:	003bea06 	br	82788 <__alt_data_end+0xfffa2788>
   837e0:	d9002d17 	ldw	r4,180(sp)
   837e4:	d9801e04 	addi	r6,sp,120
   837e8:	b80b883a 	mov	r5,r23
   837ec:	00897180 	call	89718 <__sprint_r>
   837f0:	103a7b1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   837f4:	d8c02017 	ldw	r3,128(sp)
   837f8:	da000404 	addi	r8,sp,16
   837fc:	003d4106 	br	82d04 <__alt_data_end+0xfffa2d04>
   83800:	d8801f17 	ldw	r2,124(sp)
   83804:	01400274 	movhi	r5,9
   83808:	01000044 	movi	r4,1
   8380c:	18c00044 	addi	r3,r3,1
   83810:	10800044 	addi	r2,r2,1
   83814:	29455504 	addi	r5,r5,5460
   83818:	41000115 	stw	r4,4(r8)
   8381c:	41400015 	stw	r5,0(r8)
   83820:	d8c02015 	stw	r3,128(sp)
   83824:	d8801f15 	stw	r2,124(sp)
   83828:	010001c4 	movi	r4,7
   8382c:	20805c16 	blt	r4,r2,839a0 <___vfprintf_internal_r+0x1bd0>
   83830:	42000204 	addi	r8,r8,8
   83834:	8800041e 	bne	r17,zero,83848 <___vfprintf_internal_r+0x1a78>
   83838:	d8803317 	ldw	r2,204(sp)
   8383c:	1000021e 	bne	r2,zero,83848 <___vfprintf_internal_r+0x1a78>
   83840:	9080004c 	andi	r2,r18,1
   83844:	103be726 	beq	r2,zero,827e4 <__alt_data_end+0xfffa27e4>
   83848:	d9003717 	ldw	r4,220(sp)
   8384c:	d8801f17 	ldw	r2,124(sp)
   83850:	d9403417 	ldw	r5,208(sp)
   83854:	20c7883a 	add	r3,r4,r3
   83858:	10800044 	addi	r2,r2,1
   8385c:	41000115 	stw	r4,4(r8)
   83860:	41400015 	stw	r5,0(r8)
   83864:	d8c02015 	stw	r3,128(sp)
   83868:	d8801f15 	stw	r2,124(sp)
   8386c:	010001c4 	movi	r4,7
   83870:	20812116 	blt	r4,r2,83cf8 <___vfprintf_internal_r+0x1f28>
   83874:	42000204 	addi	r8,r8,8
   83878:	0463c83a 	sub	r17,zero,r17
   8387c:	0440730e 	bge	zero,r17,83a4c <___vfprintf_internal_r+0x1c7c>
   83880:	05800404 	movi	r22,16
   83884:	b440860e 	bge	r22,r17,83aa0 <___vfprintf_internal_r+0x1cd0>
   83888:	01400274 	movhi	r5,9
   8388c:	29455584 	addi	r5,r5,5462
   83890:	d9402c15 	stw	r5,176(sp)
   83894:	070001c4 	movi	fp,7
   83898:	dcc02d17 	ldw	r19,180(sp)
   8389c:	00000306 	br	838ac <___vfprintf_internal_r+0x1adc>
   838a0:	42000204 	addi	r8,r8,8
   838a4:	8c7ffc04 	addi	r17,r17,-16
   838a8:	b440800e 	bge	r22,r17,83aac <___vfprintf_internal_r+0x1cdc>
   838ac:	18c00404 	addi	r3,r3,16
   838b0:	10800044 	addi	r2,r2,1
   838b4:	45000015 	stw	r20,0(r8)
   838b8:	45800115 	stw	r22,4(r8)
   838bc:	d8c02015 	stw	r3,128(sp)
   838c0:	d8801f15 	stw	r2,124(sp)
   838c4:	e0bff60e 	bge	fp,r2,838a0 <__alt_data_end+0xfffa38a0>
   838c8:	d9801e04 	addi	r6,sp,120
   838cc:	b80b883a 	mov	r5,r23
   838d0:	9809883a 	mov	r4,r19
   838d4:	00897180 	call	89718 <__sprint_r>
   838d8:	103a411e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   838dc:	d8c02017 	ldw	r3,128(sp)
   838e0:	d8801f17 	ldw	r2,124(sp)
   838e4:	da000404 	addi	r8,sp,16
   838e8:	003fee06 	br	838a4 <__alt_data_end+0xfffa38a4>
   838ec:	00bfffc4 	movi	r2,-1
   838f0:	003a3f06 	br	821f0 <__alt_data_end+0xfffa21f0>
   838f4:	008011c4 	movi	r2,71
   838f8:	1440b816 	blt	r2,r17,83bdc <___vfprintf_internal_r+0x1e0c>
   838fc:	04000274 	movhi	r16,9
   83900:	84054704 	addi	r16,r16,5404
   83904:	00c000c4 	movi	r3,3
   83908:	00bfdfc4 	movi	r2,-129
   8390c:	d8c02915 	stw	r3,164(sp)
   83910:	90a4703a 	and	r18,r18,r2
   83914:	df002783 	ldbu	fp,158(sp)
   83918:	d8c02b15 	stw	r3,172(sp)
   8391c:	d8002a15 	stw	zero,168(sp)
   83920:	d8003215 	stw	zero,200(sp)
   83924:	003b0706 	br	82544 <__alt_data_end+0xfffa2544>
   83928:	d8c02e17 	ldw	r3,184(sp)
   8392c:	1cc00017 	ldw	r19,0(r3)
   83930:	18c00104 	addi	r3,r3,4
   83934:	d8c02e15 	stw	r3,184(sp)
   83938:	982dd7fa 	srai	r22,r19,31
   8393c:	b005883a 	mov	r2,r22
   83940:	003a7706 	br	82320 <__alt_data_end+0xfffa2320>
   83944:	d8c02e17 	ldw	r3,184(sp)
   83948:	d9002f17 	ldw	r4,188(sp)
   8394c:	18800017 	ldw	r2,0(r3)
   83950:	18c00104 	addi	r3,r3,4
   83954:	d8c02e15 	stw	r3,184(sp)
   83958:	11000015 	stw	r4,0(r2)
   8395c:	00395406 	br	81eb0 <__alt_data_end+0xfffa1eb0>
   83960:	d9002e17 	ldw	r4,184(sp)
   83964:	002d883a 	mov	r22,zero
   83968:	24c00017 	ldw	r19,0(r4)
   8396c:	21000104 	addi	r4,r4,4
   83970:	d9002e15 	stw	r4,184(sp)
   83974:	003c0706 	br	82994 <__alt_data_end+0xfffa2994>
   83978:	d9402e17 	ldw	r5,184(sp)
   8397c:	d8c02a17 	ldw	r3,168(sp)
   83980:	002d883a 	mov	r22,zero
   83984:	28800104 	addi	r2,r5,4
   83988:	2cc0000b 	ldhu	r19,0(r5)
   8398c:	183dc10e 	bge	r3,zero,83094 <__alt_data_end+0xfffa3094>
   83990:	003f7506 	br	83768 <__alt_data_end+0xfffa3768>
   83994:	04000274 	movhi	r16,9
   83998:	84054504 	addi	r16,r16,5396
   8399c:	003aa706 	br	8243c <__alt_data_end+0xfffa243c>
   839a0:	d9002d17 	ldw	r4,180(sp)
   839a4:	d9801e04 	addi	r6,sp,120
   839a8:	b80b883a 	mov	r5,r23
   839ac:	00897180 	call	89718 <__sprint_r>
   839b0:	103a0b1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   839b4:	dc402617 	ldw	r17,152(sp)
   839b8:	d8c02017 	ldw	r3,128(sp)
   839bc:	da000404 	addi	r8,sp,16
   839c0:	003f9c06 	br	83834 <__alt_data_end+0xfffa3834>
   839c4:	ac400043 	ldbu	r17,1(r21)
   839c8:	84000814 	ori	r16,r16,32
   839cc:	ad400044 	addi	r21,r21,1
   839d0:	8c403fcc 	andi	r17,r17,255
   839d4:	8c40201c 	xori	r17,r17,128
   839d8:	8c7fe004 	addi	r17,r17,-128
   839dc:	00395e06 	br	81f58 <__alt_data_end+0xfffa1f58>
   839e0:	d8c02e15 	stw	r3,184(sp)
   839e4:	0039883a 	mov	fp,zero
   839e8:	003e3506 	br	832c0 <__alt_data_end+0xfffa32c0>
   839ec:	d9002d17 	ldw	r4,180(sp)
   839f0:	d9801e04 	addi	r6,sp,120
   839f4:	b80b883a 	mov	r5,r23
   839f8:	00897180 	call	89718 <__sprint_r>
   839fc:	1039f81e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83a00:	d8c02017 	ldw	r3,128(sp)
   83a04:	da000404 	addi	r8,sp,16
   83a08:	003cd006 	br	82d4c <__alt_data_end+0xfffa2d4c>
   83a0c:	8009883a 	mov	r4,r16
   83a10:	df003d15 	stw	fp,244(sp)
   83a14:	0081d380 	call	81d38 <strlen>
   83a18:	d8802b15 	stw	r2,172(sp)
   83a1c:	da003d17 	ldw	r8,244(sp)
   83a20:	103c200e 	bge	r2,zero,82aa4 <__alt_data_end+0xfffa2aa4>
   83a24:	0005883a 	mov	r2,zero
   83a28:	003c1e06 	br	82aa4 <__alt_data_end+0xfffa2aa4>
   83a2c:	d9002d17 	ldw	r4,180(sp)
   83a30:	d9801e04 	addi	r6,sp,120
   83a34:	b80b883a 	mov	r5,r23
   83a38:	00897180 	call	89718 <__sprint_r>
   83a3c:	1039e81e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83a40:	d8c02017 	ldw	r3,128(sp)
   83a44:	d8801f17 	ldw	r2,124(sp)
   83a48:	da000404 	addi	r8,sp,16
   83a4c:	d9403317 	ldw	r5,204(sp)
   83a50:	10800044 	addi	r2,r2,1
   83a54:	44000015 	stw	r16,0(r8)
   83a58:	28c7883a 	add	r3,r5,r3
   83a5c:	003b5b06 	br	827cc <__alt_data_end+0xfffa27cc>
   83a60:	01000274 	movhi	r4,9
   83a64:	21055984 	addi	r4,r4,5478
   83a68:	d9003515 	stw	r4,212(sp)
   83a6c:	003af206 	br	82638 <__alt_data_end+0xfffa2638>
   83a70:	013fffc4 	movi	r4,-1
   83a74:	003a0806 	br	82298 <__alt_data_end+0xfffa2298>
   83a78:	0023883a 	mov	r17,zero
   83a7c:	003d9d06 	br	830f4 <__alt_data_end+0xfffa30f4>
   83a80:	d9002d17 	ldw	r4,180(sp)
   83a84:	d9801e04 	addi	r6,sp,120
   83a88:	b80b883a 	mov	r5,r23
   83a8c:	00897180 	call	89718 <__sprint_r>
   83a90:	1039d31e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83a94:	d8c02017 	ldw	r3,128(sp)
   83a98:	da000404 	addi	r8,sp,16
   83a9c:	003d9406 	br	830f0 <__alt_data_end+0xfffa30f0>
   83aa0:	01000274 	movhi	r4,9
   83aa4:	21055584 	addi	r4,r4,5462
   83aa8:	d9002c15 	stw	r4,176(sp)
   83aac:	d9002c17 	ldw	r4,176(sp)
   83ab0:	1c47883a 	add	r3,r3,r17
   83ab4:	10800044 	addi	r2,r2,1
   83ab8:	41000015 	stw	r4,0(r8)
   83abc:	44400115 	stw	r17,4(r8)
   83ac0:	d8c02015 	stw	r3,128(sp)
   83ac4:	d8801f15 	stw	r2,124(sp)
   83ac8:	010001c4 	movi	r4,7
   83acc:	20bfd716 	blt	r4,r2,83a2c <__alt_data_end+0xfffa3a2c>
   83ad0:	42000204 	addi	r8,r8,8
   83ad4:	003fdd06 	br	83a4c <__alt_data_end+0xfffa3a4c>
   83ad8:	d9002d17 	ldw	r4,180(sp)
   83adc:	d9801e04 	addi	r6,sp,120
   83ae0:	b80b883a 	mov	r5,r23
   83ae4:	00897180 	call	89718 <__sprint_r>
   83ae8:	1039bd1e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83aec:	d8802617 	ldw	r2,152(sp)
   83af0:	d8c02017 	ldw	r3,128(sp)
   83af4:	da000404 	addi	r8,sp,16
   83af8:	003e1006 	br	8333c <__alt_data_end+0xfffa333c>
   83afc:	00800044 	movi	r2,1
   83b00:	10803fcc 	andi	r2,r2,255
   83b04:	00c00044 	movi	r3,1
   83b08:	10fa0d26 	beq	r2,r3,82340 <__alt_data_end+0xfffa2340>
   83b0c:	00c00084 	movi	r3,2
   83b10:	10fbaf26 	beq	r2,r3,829d0 <__alt_data_end+0xfffa29d0>
   83b14:	003a6d06 	br	824cc <__alt_data_end+0xfffa24cc>
   83b18:	01000274 	movhi	r4,9
   83b1c:	21055984 	addi	r4,r4,5478
   83b20:	d9003515 	stw	r4,212(sp)
   83b24:	003b5406 	br	82878 <__alt_data_end+0xfffa2878>
   83b28:	d8802a17 	ldw	r2,168(sp)
   83b2c:	00c00184 	movi	r3,6
   83b30:	1880012e 	bgeu	r3,r2,83b38 <___vfprintf_internal_r+0x1d68>
   83b34:	1805883a 	mov	r2,r3
   83b38:	d8802b15 	stw	r2,172(sp)
   83b3c:	1000ef16 	blt	r2,zero,83efc <___vfprintf_internal_r+0x212c>
   83b40:	04000274 	movhi	r16,9
   83b44:	d8802915 	stw	r2,164(sp)
   83b48:	dcc02e15 	stw	r19,184(sp)
   83b4c:	d8002a15 	stw	zero,168(sp)
   83b50:	d8003215 	stw	zero,200(sp)
   83b54:	84055304 	addi	r16,r16,5452
   83b58:	0039883a 	mov	fp,zero
   83b5c:	003a8006 	br	82560 <__alt_data_end+0xfffa2560>
   83b60:	0021883a 	mov	r16,zero
   83b64:	003e0706 	br	83384 <__alt_data_end+0xfffa3384>
   83b68:	d9002d17 	ldw	r4,180(sp)
   83b6c:	d9801e04 	addi	r6,sp,120
   83b70:	b80b883a 	mov	r5,r23
   83b74:	00897180 	call	89718 <__sprint_r>
   83b78:	1039991e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83b7c:	d8802617 	ldw	r2,152(sp)
   83b80:	d9403317 	ldw	r5,204(sp)
   83b84:	d8c02017 	ldw	r3,128(sp)
   83b88:	da000404 	addi	r8,sp,16
   83b8c:	2885c83a 	sub	r2,r5,r2
   83b90:	003dfb06 	br	83380 <__alt_data_end+0xfffa3380>
   83b94:	9080004c 	andi	r2,r18,1
   83b98:	103e8f1e 	bne	r2,zero,835d8 <__alt_data_end+0xfffa35d8>
   83b9c:	d8802117 	ldw	r2,132(sp)
   83ba0:	003e9e06 	br	8361c <__alt_data_end+0xfffa361c>
   83ba4:	1025883a 	mov	r18,r2
   83ba8:	0039883a 	mov	fp,zero
   83bac:	00800084 	movi	r2,2
   83bb0:	003fd306 	br	83b00 <__alt_data_end+0xfffa3b00>
   83bb4:	07000b44 	movi	fp,45
   83bb8:	df002785 	stb	fp,158(sp)
   83bbc:	003a1b06 	br	8242c <__alt_data_end+0xfffa242c>
   83bc0:	00c00b44 	movi	r3,45
   83bc4:	d8c02785 	stb	r3,158(sp)
   83bc8:	d8802915 	stw	r2,164(sp)
   83bcc:	dc802c17 	ldw	r18,176(sp)
   83bd0:	d8002a15 	stw	zero,168(sp)
   83bd4:	07000b44 	movi	fp,45
   83bd8:	003a5e06 	br	82554 <__alt_data_end+0xfffa2554>
   83bdc:	04000274 	movhi	r16,9
   83be0:	84054804 	addi	r16,r16,5408
   83be4:	003f4706 	br	83904 <__alt_data_end+0xfffa3904>
   83be8:	d9002e17 	ldw	r4,184(sp)
   83bec:	d9402f17 	ldw	r5,188(sp)
   83bf0:	20800017 	ldw	r2,0(r4)
   83bf4:	21000104 	addi	r4,r4,4
   83bf8:	d9002e15 	stw	r4,184(sp)
   83bfc:	11400015 	stw	r5,0(r2)
   83c00:	0038ab06 	br	81eb0 <__alt_data_end+0xfffa1eb0>
   83c04:	dd802617 	ldw	r22,152(sp)
   83c08:	00bfff44 	movi	r2,-3
   83c0c:	b0801c16 	blt	r22,r2,83c80 <___vfprintf_internal_r+0x1eb0>
   83c10:	d9402a17 	ldw	r5,168(sp)
   83c14:	2d801a16 	blt	r5,r22,83c80 <___vfprintf_internal_r+0x1eb0>
   83c18:	dd803215 	stw	r22,200(sp)
   83c1c:	003e8906 	br	83644 <__alt_data_end+0xfffa3644>
   83c20:	01000274 	movhi	r4,9
   83c24:	21055584 	addi	r4,r4,5462
   83c28:	d9002c15 	stw	r4,176(sp)
   83c2c:	003c9106 	br	82e74 <__alt_data_end+0xfffa2e74>
   83c30:	e005883a 	mov	r2,fp
   83c34:	003e7906 	br	8361c <__alt_data_end+0xfffa361c>
   83c38:	d9002a17 	ldw	r4,168(sp)
   83c3c:	df002783 	ldbu	fp,158(sp)
   83c40:	dcc02e15 	stw	r19,184(sp)
   83c44:	d9002915 	stw	r4,164(sp)
   83c48:	d9002b15 	stw	r4,172(sp)
   83c4c:	d8002a15 	stw	zero,168(sp)
   83c50:	d8003215 	stw	zero,200(sp)
   83c54:	003a3b06 	br	82544 <__alt_data_end+0xfffa2544>
   83c58:	9080004c 	andi	r2,r18,1
   83c5c:	0039883a 	mov	fp,zero
   83c60:	10000426 	beq	r2,zero,83c74 <___vfprintf_internal_r+0x1ea4>
   83c64:	00800c04 	movi	r2,48
   83c68:	dc001dc4 	addi	r16,sp,119
   83c6c:	d8801dc5 	stb	r2,119(sp)
   83c70:	003b6406 	br	82a04 <__alt_data_end+0xfffa2a04>
   83c74:	d8002b15 	stw	zero,172(sp)
   83c78:	dc001e04 	addi	r16,sp,120
   83c7c:	003a2b06 	br	8252c <__alt_data_end+0xfffa252c>
   83c80:	8c7fff84 	addi	r17,r17,-2
   83c84:	b5bfffc4 	addi	r22,r22,-1
   83c88:	dd802615 	stw	r22,152(sp)
   83c8c:	dc4022c5 	stb	r17,139(sp)
   83c90:	b000bf16 	blt	r22,zero,83f90 <___vfprintf_internal_r+0x21c0>
   83c94:	00800ac4 	movi	r2,43
   83c98:	d8802305 	stb	r2,140(sp)
   83c9c:	00800244 	movi	r2,9
   83ca0:	15807016 	blt	r2,r22,83e64 <___vfprintf_internal_r+0x2094>
   83ca4:	00800c04 	movi	r2,48
   83ca8:	b5800c04 	addi	r22,r22,48
   83cac:	d8802345 	stb	r2,141(sp)
   83cb0:	dd802385 	stb	r22,142(sp)
   83cb4:	d88023c4 	addi	r2,sp,143
   83cb8:	df0022c4 	addi	fp,sp,139
   83cbc:	d8c03317 	ldw	r3,204(sp)
   83cc0:	1739c83a 	sub	fp,r2,fp
   83cc4:	d9003317 	ldw	r4,204(sp)
   83cc8:	e0c7883a 	add	r3,fp,r3
   83ccc:	df003a15 	stw	fp,232(sp)
   83cd0:	d8c02b15 	stw	r3,172(sp)
   83cd4:	00800044 	movi	r2,1
   83cd8:	1100b30e 	bge	r2,r4,83fa8 <___vfprintf_internal_r+0x21d8>
   83cdc:	d8c02b17 	ldw	r3,172(sp)
   83ce0:	18c00044 	addi	r3,r3,1
   83ce4:	d8c02b15 	stw	r3,172(sp)
   83ce8:	1805883a 	mov	r2,r3
   83cec:	1800ac16 	blt	r3,zero,83fa0 <___vfprintf_internal_r+0x21d0>
   83cf0:	d8003215 	stw	zero,200(sp)
   83cf4:	003e5d06 	br	8366c <__alt_data_end+0xfffa366c>
   83cf8:	d9002d17 	ldw	r4,180(sp)
   83cfc:	d9801e04 	addi	r6,sp,120
   83d00:	b80b883a 	mov	r5,r23
   83d04:	00897180 	call	89718 <__sprint_r>
   83d08:	1039351e 	bne	r2,zero,821e0 <__alt_data_end+0xfffa21e0>
   83d0c:	dc402617 	ldw	r17,152(sp)
   83d10:	d8c02017 	ldw	r3,128(sp)
   83d14:	d8801f17 	ldw	r2,124(sp)
   83d18:	da000404 	addi	r8,sp,16
   83d1c:	003ed606 	br	83878 <__alt_data_end+0xfffa3878>
   83d20:	182b883a 	mov	r21,r3
   83d24:	d8002a15 	stw	zero,168(sp)
   83d28:	00388c06 	br	81f5c <__alt_data_end+0xfffa1f5c>
   83d2c:	d8802a17 	ldw	r2,168(sp)
   83d30:	103e071e 	bne	r2,zero,83550 <__alt_data_end+0xfffa3550>
   83d34:	dc002a15 	stw	r16,168(sp)
   83d38:	003e0506 	br	83550 <__alt_data_end+0xfffa3550>
   83d3c:	d9002a17 	ldw	r4,168(sp)
   83d40:	20c00044 	addi	r3,r4,1
   83d44:	003e0f06 	br	83584 <__alt_data_end+0xfffa3584>
   83d48:	01400184 	movi	r5,6
   83d4c:	d9402a15 	stw	r5,168(sp)
   83d50:	003dff06 	br	83550 <__alt_data_end+0xfffa3550>
   83d54:	d8802104 	addi	r2,sp,132
   83d58:	d8800315 	stw	r2,12(sp)
   83d5c:	d8802504 	addi	r2,sp,148
   83d60:	d8800215 	stw	r2,8(sp)
   83d64:	d8802604 	addi	r2,sp,152
   83d68:	d8800115 	stw	r2,4(sp)
   83d6c:	d8802a17 	ldw	r2,168(sp)
   83d70:	d9403617 	ldw	r5,216(sp)
   83d74:	d9002d17 	ldw	r4,180(sp)
   83d78:	d8800015 	stw	r2,0(sp)
   83d7c:	01c000c4 	movi	r7,3
   83d80:	980d883a 	mov	r6,r19
   83d84:	da003d15 	stw	r8,244(sp)
   83d88:	00845000 	call	84500 <_dtoa_r>
   83d8c:	d8c02a17 	ldw	r3,168(sp)
   83d90:	da003d17 	ldw	r8,244(sp)
   83d94:	1021883a 	mov	r16,r2
   83d98:	10f9883a 	add	fp,r2,r3
   83d9c:	81000007 	ldb	r4,0(r16)
   83da0:	00800c04 	movi	r2,48
   83da4:	20805e26 	beq	r4,r2,83f20 <___vfprintf_internal_r+0x2150>
   83da8:	d8c02617 	ldw	r3,152(sp)
   83dac:	e0f9883a 	add	fp,fp,r3
   83db0:	003e0a06 	br	835dc <__alt_data_end+0xfffa35dc>
   83db4:	00c00b44 	movi	r3,45
   83db8:	24e0003c 	xorhi	r19,r4,32768
   83dbc:	d8c02905 	stb	r3,164(sp)
   83dc0:	003de906 	br	83568 <__alt_data_end+0xfffa3568>
   83dc4:	d8c03217 	ldw	r3,200(sp)
   83dc8:	00c07a0e 	bge	zero,r3,83fb4 <___vfprintf_internal_r+0x21e4>
   83dcc:	00800044 	movi	r2,1
   83dd0:	d9003317 	ldw	r4,204(sp)
   83dd4:	1105883a 	add	r2,r2,r4
   83dd8:	d8802b15 	stw	r2,172(sp)
   83ddc:	10004e16 	blt	r2,zero,83f18 <___vfprintf_internal_r+0x2148>
   83de0:	044019c4 	movi	r17,103
   83de4:	003e2106 	br	8366c <__alt_data_end+0xfffa366c>
   83de8:	d9002a17 	ldw	r4,168(sp)
   83dec:	d8802104 	addi	r2,sp,132
   83df0:	d8800315 	stw	r2,12(sp)
   83df4:	d9000015 	stw	r4,0(sp)
   83df8:	d8802504 	addi	r2,sp,148
   83dfc:	d9403617 	ldw	r5,216(sp)
   83e00:	d9002d17 	ldw	r4,180(sp)
   83e04:	d8800215 	stw	r2,8(sp)
   83e08:	d8802604 	addi	r2,sp,152
   83e0c:	d8800115 	stw	r2,4(sp)
   83e10:	01c000c4 	movi	r7,3
   83e14:	980d883a 	mov	r6,r19
   83e18:	da003d15 	stw	r8,244(sp)
   83e1c:	00845000 	call	84500 <_dtoa_r>
   83e20:	d8c02a17 	ldw	r3,168(sp)
   83e24:	da003d17 	ldw	r8,244(sp)
   83e28:	1021883a 	mov	r16,r2
   83e2c:	00801184 	movi	r2,70
   83e30:	80f9883a 	add	fp,r16,r3
   83e34:	88bfd926 	beq	r17,r2,83d9c <__alt_data_end+0xfffa3d9c>
   83e38:	003de806 	br	835dc <__alt_data_end+0xfffa35dc>
   83e3c:	d9002a17 	ldw	r4,168(sp)
   83e40:	00c04d0e 	bge	zero,r3,83f78 <___vfprintf_internal_r+0x21a8>
   83e44:	2000441e 	bne	r4,zero,83f58 <___vfprintf_internal_r+0x2188>
   83e48:	9480004c 	andi	r18,r18,1
   83e4c:	9000421e 	bne	r18,zero,83f58 <___vfprintf_internal_r+0x2188>
   83e50:	1805883a 	mov	r2,r3
   83e54:	18006f16 	blt	r3,zero,84014 <___vfprintf_internal_r+0x2244>
   83e58:	d8c03217 	ldw	r3,200(sp)
   83e5c:	d8c02b15 	stw	r3,172(sp)
   83e60:	003e0206 	br	8366c <__alt_data_end+0xfffa366c>
   83e64:	df0022c4 	addi	fp,sp,139
   83e68:	dc002a15 	stw	r16,168(sp)
   83e6c:	4027883a 	mov	r19,r8
   83e70:	e021883a 	mov	r16,fp
   83e74:	b009883a 	mov	r4,r22
   83e78:	01400284 	movi	r5,10
   83e7c:	0081a040 	call	81a04 <__modsi3>
   83e80:	10800c04 	addi	r2,r2,48
   83e84:	843fffc4 	addi	r16,r16,-1
   83e88:	b009883a 	mov	r4,r22
   83e8c:	01400284 	movi	r5,10
   83e90:	80800005 	stb	r2,0(r16)
   83e94:	00819800 	call	81980 <__divsi3>
   83e98:	102d883a 	mov	r22,r2
   83e9c:	00800244 	movi	r2,9
   83ea0:	15bff416 	blt	r2,r22,83e74 <__alt_data_end+0xfffa3e74>
   83ea4:	9811883a 	mov	r8,r19
   83ea8:	b0800c04 	addi	r2,r22,48
   83eac:	8027883a 	mov	r19,r16
   83eb0:	997fffc4 	addi	r5,r19,-1
   83eb4:	98bfffc5 	stb	r2,-1(r19)
   83eb8:	dc002a17 	ldw	r16,168(sp)
   83ebc:	2f006d2e 	bgeu	r5,fp,84074 <___vfprintf_internal_r+0x22a4>
   83ec0:	d9c02384 	addi	r7,sp,142
   83ec4:	3ccfc83a 	sub	r7,r7,r19
   83ec8:	d9002344 	addi	r4,sp,141
   83ecc:	e1cf883a 	add	r7,fp,r7
   83ed0:	00000106 	br	83ed8 <___vfprintf_internal_r+0x2108>
   83ed4:	28800003 	ldbu	r2,0(r5)
   83ed8:	20800005 	stb	r2,0(r4)
   83edc:	21000044 	addi	r4,r4,1
   83ee0:	29400044 	addi	r5,r5,1
   83ee4:	393ffb1e 	bne	r7,r4,83ed4 <__alt_data_end+0xfffa3ed4>
   83ee8:	d8802304 	addi	r2,sp,140
   83eec:	14c5c83a 	sub	r2,r2,r19
   83ef0:	d8c02344 	addi	r3,sp,141
   83ef4:	1885883a 	add	r2,r3,r2
   83ef8:	003f7006 	br	83cbc <__alt_data_end+0xfffa3cbc>
   83efc:	0005883a 	mov	r2,zero
   83f00:	003f0f06 	br	83b40 <__alt_data_end+0xfffa3b40>
   83f04:	d8c03217 	ldw	r3,200(sp)
   83f08:	18c00044 	addi	r3,r3,1
   83f0c:	d8c02b15 	stw	r3,172(sp)
   83f10:	1805883a 	mov	r2,r3
   83f14:	183fb20e 	bge	r3,zero,83de0 <__alt_data_end+0xfffa3de0>
   83f18:	0005883a 	mov	r2,zero
   83f1c:	003fb006 	br	83de0 <__alt_data_end+0xfffa3de0>
   83f20:	d9003617 	ldw	r4,216(sp)
   83f24:	000d883a 	mov	r6,zero
   83f28:	000f883a 	mov	r7,zero
   83f2c:	980b883a 	mov	r5,r19
   83f30:	d8c03c15 	stw	r3,240(sp)
   83f34:	da003d15 	stw	r8,244(sp)
   83f38:	008d5a80 	call	8d5a8 <__eqdf2>
   83f3c:	d8c03c17 	ldw	r3,240(sp)
   83f40:	da003d17 	ldw	r8,244(sp)
   83f44:	103f9826 	beq	r2,zero,83da8 <__alt_data_end+0xfffa3da8>
   83f48:	00800044 	movi	r2,1
   83f4c:	10c7c83a 	sub	r3,r2,r3
   83f50:	d8c02615 	stw	r3,152(sp)
   83f54:	003f9506 	br	83dac <__alt_data_end+0xfffa3dac>
   83f58:	d9002a17 	ldw	r4,168(sp)
   83f5c:	d8c03217 	ldw	r3,200(sp)
   83f60:	20800044 	addi	r2,r4,1
   83f64:	1885883a 	add	r2,r3,r2
   83f68:	d8802b15 	stw	r2,172(sp)
   83f6c:	103dbf0e 	bge	r2,zero,8366c <__alt_data_end+0xfffa366c>
   83f70:	0005883a 	mov	r2,zero
   83f74:	003dbd06 	br	8366c <__alt_data_end+0xfffa366c>
   83f78:	2000201e 	bne	r4,zero,83ffc <___vfprintf_internal_r+0x222c>
   83f7c:	9480004c 	andi	r18,r18,1
   83f80:	90001e1e 	bne	r18,zero,83ffc <___vfprintf_internal_r+0x222c>
   83f84:	00800044 	movi	r2,1
   83f88:	d8802b15 	stw	r2,172(sp)
   83f8c:	003db706 	br	8366c <__alt_data_end+0xfffa366c>
   83f90:	00800b44 	movi	r2,45
   83f94:	05adc83a 	sub	r22,zero,r22
   83f98:	d8802305 	stb	r2,140(sp)
   83f9c:	003f3f06 	br	83c9c <__alt_data_end+0xfffa3c9c>
   83fa0:	0005883a 	mov	r2,zero
   83fa4:	003f5206 	br	83cf0 <__alt_data_end+0xfffa3cf0>
   83fa8:	90a4703a 	and	r18,r18,r2
   83fac:	903f4e26 	beq	r18,zero,83ce8 <__alt_data_end+0xfffa3ce8>
   83fb0:	003f4a06 	br	83cdc <__alt_data_end+0xfffa3cdc>
   83fb4:	00800084 	movi	r2,2
   83fb8:	10c5c83a 	sub	r2,r2,r3
   83fbc:	003f8406 	br	83dd0 <__alt_data_end+0xfffa3dd0>
   83fc0:	d9402e17 	ldw	r5,184(sp)
   83fc4:	d9002e17 	ldw	r4,184(sp)
   83fc8:	ac400043 	ldbu	r17,1(r21)
   83fcc:	29400017 	ldw	r5,0(r5)
   83fd0:	20800104 	addi	r2,r4,4
   83fd4:	d8802e15 	stw	r2,184(sp)
   83fd8:	d9402a15 	stw	r5,168(sp)
   83fdc:	182b883a 	mov	r21,r3
   83fe0:	283e7b0e 	bge	r5,zero,839d0 <__alt_data_end+0xfffa39d0>
   83fe4:	8c403fcc 	andi	r17,r17,255
   83fe8:	017fffc4 	movi	r5,-1
   83fec:	8c40201c 	xori	r17,r17,128
   83ff0:	d9402a15 	stw	r5,168(sp)
   83ff4:	8c7fe004 	addi	r17,r17,-128
   83ff8:	0037d706 	br	81f58 <__alt_data_end+0xfffa1f58>
   83ffc:	d8c02a17 	ldw	r3,168(sp)
   84000:	18c00084 	addi	r3,r3,2
   84004:	d8c02b15 	stw	r3,172(sp)
   84008:	1805883a 	mov	r2,r3
   8400c:	183d970e 	bge	r3,zero,8366c <__alt_data_end+0xfffa366c>
   84010:	003fd706 	br	83f70 <__alt_data_end+0xfffa3f70>
   84014:	0005883a 	mov	r2,zero
   84018:	003f8f06 	br	83e58 <__alt_data_end+0xfffa3e58>
   8401c:	9080004c 	andi	r2,r18,1
   84020:	103f821e 	bne	r2,zero,83e2c <__alt_data_end+0xfffa3e2c>
   84024:	d8802117 	ldw	r2,132(sp)
   84028:	1405c83a 	sub	r2,r2,r16
   8402c:	d8803315 	stw	r2,204(sp)
   84030:	b47ef426 	beq	r22,r17,83c04 <__alt_data_end+0xfffa3c04>
   84034:	dd802617 	ldw	r22,152(sp)
   84038:	003f1206 	br	83c84 <__alt_data_end+0xfffa3c84>
   8403c:	d8c02b03 	ldbu	r3,172(sp)
   84040:	d8c02785 	stb	r3,158(sp)
   84044:	0038df06 	br	823c4 <__alt_data_end+0xfffa23c4>
   84048:	d8c02b03 	ldbu	r3,172(sp)
   8404c:	d8c02785 	stb	r3,158(sp)
   84050:	0038aa06 	br	822fc <__alt_data_end+0xfffa22fc>
   84054:	d8c02b03 	ldbu	r3,172(sp)
   84058:	d8c02785 	stb	r3,158(sp)
   8405c:	003a4306 	br	8296c <__alt_data_end+0xfffa296c>
   84060:	d8c02b03 	ldbu	r3,172(sp)
   84064:	d8c02785 	stb	r3,158(sp)
   84068:	003af506 	br	82c40 <__alt_data_end+0xfffa2c40>
   8406c:	0005883a 	mov	r2,zero
   84070:	003d7b06 	br	83660 <__alt_data_end+0xfffa3660>
   84074:	d8802344 	addi	r2,sp,141
   84078:	003f1006 	br	83cbc <__alt_data_end+0xfffa3cbc>
   8407c:	d8c02b03 	ldbu	r3,172(sp)
   84080:	d8c02785 	stb	r3,158(sp)
   84084:	0038fd06 	br	8247c <__alt_data_end+0xfffa247c>
   84088:	d8c02b03 	ldbu	r3,172(sp)
   8408c:	d8c02785 	stb	r3,158(sp)
   84090:	003a9706 	br	82af0 <__alt_data_end+0xfffa2af0>
   84094:	d8c02b03 	ldbu	r3,172(sp)
   84098:	d8c02785 	stb	r3,158(sp)
   8409c:	003a1806 	br	82900 <__alt_data_end+0xfffa2900>
   840a0:	d8c02b03 	ldbu	r3,172(sp)
   840a4:	d8c02785 	stb	r3,158(sp)
   840a8:	003abe06 	br	82ba4 <__alt_data_end+0xfffa2ba4>

000840ac <__vfprintf_internal>:
   840ac:	00800274 	movhi	r2,9
   840b0:	108f7e04 	addi	r2,r2,15864
   840b4:	300f883a 	mov	r7,r6
   840b8:	280d883a 	mov	r6,r5
   840bc:	200b883a 	mov	r5,r4
   840c0:	11000017 	ldw	r4,0(r2)
   840c4:	0081dd01 	jmpi	81dd0 <___vfprintf_internal_r>

000840c8 <__sbprintf>:
   840c8:	2880030b 	ldhu	r2,12(r5)
   840cc:	2ac01917 	ldw	r11,100(r5)
   840d0:	2a80038b 	ldhu	r10,14(r5)
   840d4:	2a400717 	ldw	r9,28(r5)
   840d8:	2a000917 	ldw	r8,36(r5)
   840dc:	defee204 	addi	sp,sp,-1144
   840e0:	00c10004 	movi	r3,1024
   840e4:	dc011a15 	stw	r16,1128(sp)
   840e8:	10bfff4c 	andi	r2,r2,65533
   840ec:	2821883a 	mov	r16,r5
   840f0:	d8cb883a 	add	r5,sp,r3
   840f4:	dc811c15 	stw	r18,1136(sp)
   840f8:	dc411b15 	stw	r17,1132(sp)
   840fc:	dfc11d15 	stw	ra,1140(sp)
   84100:	2025883a 	mov	r18,r4
   84104:	d881030d 	sth	r2,1036(sp)
   84108:	dac11915 	stw	r11,1124(sp)
   8410c:	da81038d 	sth	r10,1038(sp)
   84110:	da410715 	stw	r9,1052(sp)
   84114:	da010915 	stw	r8,1060(sp)
   84118:	dec10015 	stw	sp,1024(sp)
   8411c:	dec10415 	stw	sp,1040(sp)
   84120:	d8c10215 	stw	r3,1032(sp)
   84124:	d8c10515 	stw	r3,1044(sp)
   84128:	d8010615 	stw	zero,1048(sp)
   8412c:	0081dd00 	call	81dd0 <___vfprintf_internal_r>
   84130:	1023883a 	mov	r17,r2
   84134:	10000416 	blt	r2,zero,84148 <__sbprintf+0x80>
   84138:	d9410004 	addi	r5,sp,1024
   8413c:	9009883a 	mov	r4,r18
   84140:	0085da40 	call	85da4 <_fflush_r>
   84144:	10000d1e 	bne	r2,zero,8417c <__sbprintf+0xb4>
   84148:	d881030b 	ldhu	r2,1036(sp)
   8414c:	1080100c 	andi	r2,r2,64
   84150:	10000326 	beq	r2,zero,84160 <__sbprintf+0x98>
   84154:	8080030b 	ldhu	r2,12(r16)
   84158:	10801014 	ori	r2,r2,64
   8415c:	8080030d 	sth	r2,12(r16)
   84160:	8805883a 	mov	r2,r17
   84164:	dfc11d17 	ldw	ra,1140(sp)
   84168:	dc811c17 	ldw	r18,1136(sp)
   8416c:	dc411b17 	ldw	r17,1132(sp)
   84170:	dc011a17 	ldw	r16,1128(sp)
   84174:	dec11e04 	addi	sp,sp,1144
   84178:	f800283a 	ret
   8417c:	047fffc4 	movi	r17,-1
   84180:	003ff106 	br	84148 <__alt_data_end+0xfffa4148>

00084184 <__swsetup_r>:
   84184:	00800274 	movhi	r2,9
   84188:	defffd04 	addi	sp,sp,-12
   8418c:	108f7e04 	addi	r2,r2,15864
   84190:	dc400115 	stw	r17,4(sp)
   84194:	2023883a 	mov	r17,r4
   84198:	11000017 	ldw	r4,0(r2)
   8419c:	dc000015 	stw	r16,0(sp)
   841a0:	dfc00215 	stw	ra,8(sp)
   841a4:	2821883a 	mov	r16,r5
   841a8:	20000226 	beq	r4,zero,841b4 <__swsetup_r+0x30>
   841ac:	20800e17 	ldw	r2,56(r4)
   841b0:	10003126 	beq	r2,zero,84278 <__swsetup_r+0xf4>
   841b4:	8080030b 	ldhu	r2,12(r16)
   841b8:	10c0020c 	andi	r3,r2,8
   841bc:	1009883a 	mov	r4,r2
   841c0:	18000f26 	beq	r3,zero,84200 <__swsetup_r+0x7c>
   841c4:	80c00417 	ldw	r3,16(r16)
   841c8:	18001526 	beq	r3,zero,84220 <__swsetup_r+0x9c>
   841cc:	1100004c 	andi	r4,r2,1
   841d0:	20001c1e 	bne	r4,zero,84244 <__swsetup_r+0xc0>
   841d4:	1080008c 	andi	r2,r2,2
   841d8:	1000291e 	bne	r2,zero,84280 <__swsetup_r+0xfc>
   841dc:	80800517 	ldw	r2,20(r16)
   841e0:	80800215 	stw	r2,8(r16)
   841e4:	18001c26 	beq	r3,zero,84258 <__swsetup_r+0xd4>
   841e8:	0005883a 	mov	r2,zero
   841ec:	dfc00217 	ldw	ra,8(sp)
   841f0:	dc400117 	ldw	r17,4(sp)
   841f4:	dc000017 	ldw	r16,0(sp)
   841f8:	dec00304 	addi	sp,sp,12
   841fc:	f800283a 	ret
   84200:	2080040c 	andi	r2,r4,16
   84204:	10002e26 	beq	r2,zero,842c0 <__swsetup_r+0x13c>
   84208:	2080010c 	andi	r2,r4,4
   8420c:	10001e1e 	bne	r2,zero,84288 <__swsetup_r+0x104>
   84210:	80c00417 	ldw	r3,16(r16)
   84214:	20800214 	ori	r2,r4,8
   84218:	8080030d 	sth	r2,12(r16)
   8421c:	183feb1e 	bne	r3,zero,841cc <__alt_data_end+0xfffa41cc>
   84220:	1100a00c 	andi	r4,r2,640
   84224:	01408004 	movi	r5,512
   84228:	217fe826 	beq	r4,r5,841cc <__alt_data_end+0xfffa41cc>
   8422c:	800b883a 	mov	r5,r16
   84230:	8809883a 	mov	r4,r17
   84234:	0086d400 	call	86d40 <__smakebuf_r>
   84238:	8080030b 	ldhu	r2,12(r16)
   8423c:	80c00417 	ldw	r3,16(r16)
   84240:	003fe206 	br	841cc <__alt_data_end+0xfffa41cc>
   84244:	80800517 	ldw	r2,20(r16)
   84248:	80000215 	stw	zero,8(r16)
   8424c:	0085c83a 	sub	r2,zero,r2
   84250:	80800615 	stw	r2,24(r16)
   84254:	183fe41e 	bne	r3,zero,841e8 <__alt_data_end+0xfffa41e8>
   84258:	80c0030b 	ldhu	r3,12(r16)
   8425c:	0005883a 	mov	r2,zero
   84260:	1900200c 	andi	r4,r3,128
   84264:	203fe126 	beq	r4,zero,841ec <__alt_data_end+0xfffa41ec>
   84268:	18c01014 	ori	r3,r3,64
   8426c:	80c0030d 	sth	r3,12(r16)
   84270:	00bfffc4 	movi	r2,-1
   84274:	003fdd06 	br	841ec <__alt_data_end+0xfffa41ec>
   84278:	00861900 	call	86190 <__sinit>
   8427c:	003fcd06 	br	841b4 <__alt_data_end+0xfffa41b4>
   84280:	0005883a 	mov	r2,zero
   84284:	003fd606 	br	841e0 <__alt_data_end+0xfffa41e0>
   84288:	81400c17 	ldw	r5,48(r16)
   8428c:	28000626 	beq	r5,zero,842a8 <__swsetup_r+0x124>
   84290:	80801004 	addi	r2,r16,64
   84294:	28800326 	beq	r5,r2,842a4 <__swsetup_r+0x120>
   84298:	8809883a 	mov	r4,r17
   8429c:	00863040 	call	86304 <_free_r>
   842a0:	8100030b 	ldhu	r4,12(r16)
   842a4:	80000c15 	stw	zero,48(r16)
   842a8:	80c00417 	ldw	r3,16(r16)
   842ac:	00bff6c4 	movi	r2,-37
   842b0:	1108703a 	and	r4,r2,r4
   842b4:	80000115 	stw	zero,4(r16)
   842b8:	80c00015 	stw	r3,0(r16)
   842bc:	003fd506 	br	84214 <__alt_data_end+0xfffa4214>
   842c0:	00800244 	movi	r2,9
   842c4:	88800015 	stw	r2,0(r17)
   842c8:	20801014 	ori	r2,r4,64
   842cc:	8080030d 	sth	r2,12(r16)
   842d0:	00bfffc4 	movi	r2,-1
   842d4:	003fc506 	br	841ec <__alt_data_end+0xfffa41ec>

000842d8 <quorem>:
   842d8:	defff204 	addi	sp,sp,-56
   842dc:	ddc00b15 	stw	r23,44(sp)
   842e0:	20800417 	ldw	r2,16(r4)
   842e4:	2dc00417 	ldw	r23,16(r5)
   842e8:	dfc00d15 	stw	ra,52(sp)
   842ec:	df000c15 	stw	fp,48(sp)
   842f0:	dd800a15 	stw	r22,40(sp)
   842f4:	dd400915 	stw	r21,36(sp)
   842f8:	dd000815 	stw	r20,32(sp)
   842fc:	dcc00715 	stw	r19,28(sp)
   84300:	dc800615 	stw	r18,24(sp)
   84304:	dc400515 	stw	r17,20(sp)
   84308:	dc000415 	stw	r16,16(sp)
   8430c:	15c07a16 	blt	r2,r23,844f8 <quorem+0x220>
   84310:	bdffffc4 	addi	r23,r23,-1
   84314:	bde9883a 	add	r20,r23,r23
   84318:	28c00504 	addi	r3,r5,20
   8431c:	a529883a 	add	r20,r20,r20
   84320:	1d39883a 	add	fp,r3,r20
   84324:	24c00504 	addi	r19,r4,20
   84328:	d9400215 	stw	r5,8(sp)
   8432c:	9d29883a 	add	r20,r19,r20
   84330:	e1400017 	ldw	r5,0(fp)
   84334:	d9000015 	stw	r4,0(sp)
   84338:	a1000017 	ldw	r4,0(r20)
   8433c:	29400044 	addi	r5,r5,1
   84340:	d8c00115 	stw	r3,4(sp)
   84344:	dd000315 	stw	r20,12(sp)
   84348:	0081a780 	call	81a78 <__udivsi3>
   8434c:	1025883a 	mov	r18,r2
   84350:	10003026 	beq	r2,zero,84414 <quorem+0x13c>
   84354:	dc400117 	ldw	r17,4(sp)
   84358:	9829883a 	mov	r20,r19
   8435c:	002d883a 	mov	r22,zero
   84360:	0021883a 	mov	r16,zero
   84364:	8d400017 	ldw	r21,0(r17)
   84368:	900b883a 	mov	r5,r18
   8436c:	8c400104 	addi	r17,r17,4
   84370:	a93fffcc 	andi	r4,r21,65535
   84374:	0081b340 	call	81b34 <__mulsi3>
   84378:	a808d43a 	srli	r4,r21,16
   8437c:	900b883a 	mov	r5,r18
   84380:	15ad883a 	add	r22,r2,r22
   84384:	0081b340 	call	81b34 <__mulsi3>
   84388:	a1000017 	ldw	r4,0(r20)
   8438c:	b00cd43a 	srli	r6,r22,16
   84390:	b0ffffcc 	andi	r3,r22,65535
   84394:	217fffcc 	andi	r5,r4,65535
   84398:	2c21883a 	add	r16,r5,r16
   8439c:	80c7c83a 	sub	r3,r16,r3
   843a0:	2008d43a 	srli	r4,r4,16
   843a4:	1185883a 	add	r2,r2,r6
   843a8:	1821d43a 	srai	r16,r3,16
   843ac:	117fffcc 	andi	r5,r2,65535
   843b0:	2149c83a 	sub	r4,r4,r5
   843b4:	2421883a 	add	r16,r4,r16
   843b8:	8008943a 	slli	r4,r16,16
   843bc:	18ffffcc 	andi	r3,r3,65535
   843c0:	102cd43a 	srli	r22,r2,16
   843c4:	20c8b03a 	or	r4,r4,r3
   843c8:	a1000015 	stw	r4,0(r20)
   843cc:	8021d43a 	srai	r16,r16,16
   843d0:	a5000104 	addi	r20,r20,4
   843d4:	e47fe32e 	bgeu	fp,r17,84364 <__alt_data_end+0xfffa4364>
   843d8:	d8c00317 	ldw	r3,12(sp)
   843dc:	18800017 	ldw	r2,0(r3)
   843e0:	10000c1e 	bne	r2,zero,84414 <quorem+0x13c>
   843e4:	18bfff04 	addi	r2,r3,-4
   843e8:	9880082e 	bgeu	r19,r2,8440c <quorem+0x134>
   843ec:	18ffff17 	ldw	r3,-4(r3)
   843f0:	18000326 	beq	r3,zero,84400 <quorem+0x128>
   843f4:	00000506 	br	8440c <quorem+0x134>
   843f8:	10c00017 	ldw	r3,0(r2)
   843fc:	1800031e 	bne	r3,zero,8440c <quorem+0x134>
   84400:	10bfff04 	addi	r2,r2,-4
   84404:	bdffffc4 	addi	r23,r23,-1
   84408:	98bffb36 	bltu	r19,r2,843f8 <__alt_data_end+0xfffa43f8>
   8440c:	d8c00017 	ldw	r3,0(sp)
   84410:	1dc00415 	stw	r23,16(r3)
   84414:	d9400217 	ldw	r5,8(sp)
   84418:	d9000017 	ldw	r4,0(sp)
   8441c:	008853c0 	call	8853c <__mcmp>
   84420:	10002816 	blt	r2,zero,844c4 <quorem+0x1ec>
   84424:	dc400117 	ldw	r17,4(sp)
   84428:	94800044 	addi	r18,r18,1
   8442c:	980d883a 	mov	r6,r19
   84430:	0007883a 	mov	r3,zero
   84434:	31000017 	ldw	r4,0(r6)
   84438:	89400017 	ldw	r5,0(r17)
   8443c:	31800104 	addi	r6,r6,4
   84440:	20bfffcc 	andi	r2,r4,65535
   84444:	10c7883a 	add	r3,r2,r3
   84448:	28bfffcc 	andi	r2,r5,65535
   8444c:	1885c83a 	sub	r2,r3,r2
   84450:	280ad43a 	srli	r5,r5,16
   84454:	2008d43a 	srli	r4,r4,16
   84458:	1007d43a 	srai	r3,r2,16
   8445c:	10bfffcc 	andi	r2,r2,65535
   84460:	2149c83a 	sub	r4,r4,r5
   84464:	20c9883a 	add	r4,r4,r3
   84468:	200a943a 	slli	r5,r4,16
   8446c:	8c400104 	addi	r17,r17,4
   84470:	2007d43a 	srai	r3,r4,16
   84474:	2884b03a 	or	r2,r5,r2
   84478:	30bfff15 	stw	r2,-4(r6)
   8447c:	e47fed2e 	bgeu	fp,r17,84434 <__alt_data_end+0xfffa4434>
   84480:	bdc5883a 	add	r2,r23,r23
   84484:	1085883a 	add	r2,r2,r2
   84488:	9887883a 	add	r3,r19,r2
   8448c:	18800017 	ldw	r2,0(r3)
   84490:	10000c1e 	bne	r2,zero,844c4 <quorem+0x1ec>
   84494:	18bfff04 	addi	r2,r3,-4
   84498:	9880082e 	bgeu	r19,r2,844bc <quorem+0x1e4>
   8449c:	18ffff17 	ldw	r3,-4(r3)
   844a0:	18000326 	beq	r3,zero,844b0 <quorem+0x1d8>
   844a4:	00000506 	br	844bc <quorem+0x1e4>
   844a8:	10c00017 	ldw	r3,0(r2)
   844ac:	1800031e 	bne	r3,zero,844bc <quorem+0x1e4>
   844b0:	10bfff04 	addi	r2,r2,-4
   844b4:	bdffffc4 	addi	r23,r23,-1
   844b8:	98bffb36 	bltu	r19,r2,844a8 <__alt_data_end+0xfffa44a8>
   844bc:	d8c00017 	ldw	r3,0(sp)
   844c0:	1dc00415 	stw	r23,16(r3)
   844c4:	9005883a 	mov	r2,r18
   844c8:	dfc00d17 	ldw	ra,52(sp)
   844cc:	df000c17 	ldw	fp,48(sp)
   844d0:	ddc00b17 	ldw	r23,44(sp)
   844d4:	dd800a17 	ldw	r22,40(sp)
   844d8:	dd400917 	ldw	r21,36(sp)
   844dc:	dd000817 	ldw	r20,32(sp)
   844e0:	dcc00717 	ldw	r19,28(sp)
   844e4:	dc800617 	ldw	r18,24(sp)
   844e8:	dc400517 	ldw	r17,20(sp)
   844ec:	dc000417 	ldw	r16,16(sp)
   844f0:	dec00e04 	addi	sp,sp,56
   844f4:	f800283a 	ret
   844f8:	0005883a 	mov	r2,zero
   844fc:	003ff206 	br	844c8 <__alt_data_end+0xfffa44c8>

00084500 <_dtoa_r>:
   84500:	20801017 	ldw	r2,64(r4)
   84504:	deffde04 	addi	sp,sp,-136
   84508:	df002015 	stw	fp,128(sp)
   8450c:	dcc01b15 	stw	r19,108(sp)
   84510:	dc801a15 	stw	r18,104(sp)
   84514:	dc401915 	stw	r17,100(sp)
   84518:	dc001815 	stw	r16,96(sp)
   8451c:	dfc02115 	stw	ra,132(sp)
   84520:	ddc01f15 	stw	r23,124(sp)
   84524:	dd801e15 	stw	r22,120(sp)
   84528:	dd401d15 	stw	r21,116(sp)
   8452c:	dd001c15 	stw	r20,112(sp)
   84530:	d9c00315 	stw	r7,12(sp)
   84534:	2039883a 	mov	fp,r4
   84538:	3023883a 	mov	r17,r6
   8453c:	2825883a 	mov	r18,r5
   84540:	dc002417 	ldw	r16,144(sp)
   84544:	3027883a 	mov	r19,r6
   84548:	10000826 	beq	r2,zero,8456c <_dtoa_r+0x6c>
   8454c:	21801117 	ldw	r6,68(r4)
   84550:	00c00044 	movi	r3,1
   84554:	100b883a 	mov	r5,r2
   84558:	1986983a 	sll	r3,r3,r6
   8455c:	11800115 	stw	r6,4(r2)
   84560:	10c00215 	stw	r3,8(r2)
   84564:	0087c600 	call	87c60 <_Bfree>
   84568:	e0001015 	stw	zero,64(fp)
   8456c:	88002e16 	blt	r17,zero,84628 <_dtoa_r+0x128>
   84570:	80000015 	stw	zero,0(r16)
   84574:	889ffc2c 	andhi	r2,r17,32752
   84578:	00dffc34 	movhi	r3,32752
   8457c:	10c01c26 	beq	r2,r3,845f0 <_dtoa_r+0xf0>
   84580:	000d883a 	mov	r6,zero
   84584:	000f883a 	mov	r7,zero
   84588:	9009883a 	mov	r4,r18
   8458c:	980b883a 	mov	r5,r19
   84590:	008d5a80 	call	8d5a8 <__eqdf2>
   84594:	10002b1e 	bne	r2,zero,84644 <_dtoa_r+0x144>
   84598:	d9c02317 	ldw	r7,140(sp)
   8459c:	00800044 	movi	r2,1
   845a0:	38800015 	stw	r2,0(r7)
   845a4:	d8802517 	ldw	r2,148(sp)
   845a8:	10019e26 	beq	r2,zero,84c24 <_dtoa_r+0x724>
   845ac:	d8c02517 	ldw	r3,148(sp)
   845b0:	00800274 	movhi	r2,9
   845b4:	10855544 	addi	r2,r2,5461
   845b8:	18800015 	stw	r2,0(r3)
   845bc:	10bfffc4 	addi	r2,r2,-1
   845c0:	dfc02117 	ldw	ra,132(sp)
   845c4:	df002017 	ldw	fp,128(sp)
   845c8:	ddc01f17 	ldw	r23,124(sp)
   845cc:	dd801e17 	ldw	r22,120(sp)
   845d0:	dd401d17 	ldw	r21,116(sp)
   845d4:	dd001c17 	ldw	r20,112(sp)
   845d8:	dcc01b17 	ldw	r19,108(sp)
   845dc:	dc801a17 	ldw	r18,104(sp)
   845e0:	dc401917 	ldw	r17,100(sp)
   845e4:	dc001817 	ldw	r16,96(sp)
   845e8:	dec02204 	addi	sp,sp,136
   845ec:	f800283a 	ret
   845f0:	d8c02317 	ldw	r3,140(sp)
   845f4:	0089c3c4 	movi	r2,9999
   845f8:	18800015 	stw	r2,0(r3)
   845fc:	90017726 	beq	r18,zero,84bdc <_dtoa_r+0x6dc>
   84600:	00800274 	movhi	r2,9
   84604:	10856104 	addi	r2,r2,5508
   84608:	d9002517 	ldw	r4,148(sp)
   8460c:	203fec26 	beq	r4,zero,845c0 <__alt_data_end+0xfffa45c0>
   84610:	10c000c7 	ldb	r3,3(r2)
   84614:	1801781e 	bne	r3,zero,84bf8 <_dtoa_r+0x6f8>
   84618:	10c000c4 	addi	r3,r2,3
   8461c:	d9802517 	ldw	r6,148(sp)
   84620:	30c00015 	stw	r3,0(r6)
   84624:	003fe606 	br	845c0 <__alt_data_end+0xfffa45c0>
   84628:	04e00034 	movhi	r19,32768
   8462c:	9cffffc4 	addi	r19,r19,-1
   84630:	00800044 	movi	r2,1
   84634:	8ce6703a 	and	r19,r17,r19
   84638:	80800015 	stw	r2,0(r16)
   8463c:	9823883a 	mov	r17,r19
   84640:	003fcc06 	br	84574 <__alt_data_end+0xfffa4574>
   84644:	d8800204 	addi	r2,sp,8
   84648:	d8800015 	stw	r2,0(sp)
   8464c:	d9c00104 	addi	r7,sp,4
   84650:	900b883a 	mov	r5,r18
   84654:	980d883a 	mov	r6,r19
   84658:	e009883a 	mov	r4,fp
   8465c:	8820d53a 	srli	r16,r17,20
   84660:	00889080 	call	88908 <__d2b>
   84664:	d8800915 	stw	r2,36(sp)
   84668:	8001651e 	bne	r16,zero,84c00 <_dtoa_r+0x700>
   8466c:	dd800217 	ldw	r22,8(sp)
   84670:	dc000117 	ldw	r16,4(sp)
   84674:	00800804 	movi	r2,32
   84678:	b421883a 	add	r16,r22,r16
   8467c:	80c10c84 	addi	r3,r16,1074
   84680:	10c2d10e 	bge	r2,r3,851c8 <_dtoa_r+0xcc8>
   84684:	00801004 	movi	r2,64
   84688:	81010484 	addi	r4,r16,1042
   8468c:	10c7c83a 	sub	r3,r2,r3
   84690:	9108d83a 	srl	r4,r18,r4
   84694:	88e2983a 	sll	r17,r17,r3
   84698:	2448b03a 	or	r4,r4,r17
   8469c:	008eac40 	call	8eac4 <__floatunsidf>
   846a0:	017f8434 	movhi	r5,65040
   846a4:	01800044 	movi	r6,1
   846a8:	1009883a 	mov	r4,r2
   846ac:	194b883a 	add	r5,r3,r5
   846b0:	843fffc4 	addi	r16,r16,-1
   846b4:	d9801115 	stw	r6,68(sp)
   846b8:	000d883a 	mov	r6,zero
   846bc:	01cffe34 	movhi	r7,16376
   846c0:	008e06c0 	call	8e06c <__subdf3>
   846c4:	0198dbf4 	movhi	r6,25455
   846c8:	01cff4f4 	movhi	r7,16339
   846cc:	3190d844 	addi	r6,r6,17249
   846d0:	39e1e9c4 	addi	r7,r7,-30809
   846d4:	1009883a 	mov	r4,r2
   846d8:	180b883a 	mov	r5,r3
   846dc:	008d8000 	call	8d800 <__muldf3>
   846e0:	01a2d874 	movhi	r6,35681
   846e4:	01cff1f4 	movhi	r7,16327
   846e8:	31b22cc4 	addi	r6,r6,-14157
   846ec:	39e28a04 	addi	r7,r7,-30168
   846f0:	180b883a 	mov	r5,r3
   846f4:	1009883a 	mov	r4,r2
   846f8:	008c32c0 	call	8c32c <__adddf3>
   846fc:	8009883a 	mov	r4,r16
   84700:	1029883a 	mov	r20,r2
   84704:	1823883a 	mov	r17,r3
   84708:	008e9e80 	call	8e9e8 <__floatsidf>
   8470c:	019427f4 	movhi	r6,20639
   84710:	01cff4f4 	movhi	r7,16339
   84714:	319e7ec4 	addi	r6,r6,31227
   84718:	39d104c4 	addi	r7,r7,17427
   8471c:	1009883a 	mov	r4,r2
   84720:	180b883a 	mov	r5,r3
   84724:	008d8000 	call	8d800 <__muldf3>
   84728:	100d883a 	mov	r6,r2
   8472c:	180f883a 	mov	r7,r3
   84730:	a009883a 	mov	r4,r20
   84734:	880b883a 	mov	r5,r17
   84738:	008c32c0 	call	8c32c <__adddf3>
   8473c:	1009883a 	mov	r4,r2
   84740:	180b883a 	mov	r5,r3
   84744:	1029883a 	mov	r20,r2
   84748:	1823883a 	mov	r17,r3
   8474c:	008e9680 	call	8e968 <__fixdfsi>
   84750:	000d883a 	mov	r6,zero
   84754:	000f883a 	mov	r7,zero
   84758:	a009883a 	mov	r4,r20
   8475c:	880b883a 	mov	r5,r17
   84760:	d8800515 	stw	r2,20(sp)
   84764:	008d70c0 	call	8d70c <__ledf2>
   84768:	10028716 	blt	r2,zero,85188 <_dtoa_r+0xc88>
   8476c:	d8c00517 	ldw	r3,20(sp)
   84770:	00800584 	movi	r2,22
   84774:	10c27536 	bltu	r2,r3,8514c <_dtoa_r+0xc4c>
   84778:	180490fa 	slli	r2,r3,3
   8477c:	00c00274 	movhi	r3,9
   84780:	18c57d04 	addi	r3,r3,5620
   84784:	1885883a 	add	r2,r3,r2
   84788:	11000017 	ldw	r4,0(r2)
   8478c:	11400117 	ldw	r5,4(r2)
   84790:	900d883a 	mov	r6,r18
   84794:	980f883a 	mov	r7,r19
   84798:	008d6300 	call	8d630 <__gedf2>
   8479c:	00828d0e 	bge	zero,r2,851d4 <_dtoa_r+0xcd4>
   847a0:	d9000517 	ldw	r4,20(sp)
   847a4:	d8000e15 	stw	zero,56(sp)
   847a8:	213fffc4 	addi	r4,r4,-1
   847ac:	d9000515 	stw	r4,20(sp)
   847b0:	b42dc83a 	sub	r22,r22,r16
   847b4:	b5bfffc4 	addi	r22,r22,-1
   847b8:	b0026f16 	blt	r22,zero,85178 <_dtoa_r+0xc78>
   847bc:	d8000815 	stw	zero,32(sp)
   847c0:	d9c00517 	ldw	r7,20(sp)
   847c4:	38026416 	blt	r7,zero,85158 <_dtoa_r+0xc58>
   847c8:	b1ed883a 	add	r22,r22,r7
   847cc:	d9c00d15 	stw	r7,52(sp)
   847d0:	d8000a15 	stw	zero,40(sp)
   847d4:	d9800317 	ldw	r6,12(sp)
   847d8:	00800244 	movi	r2,9
   847dc:	11811436 	bltu	r2,r6,84c30 <_dtoa_r+0x730>
   847e0:	00800144 	movi	r2,5
   847e4:	1184e10e 	bge	r2,r6,85b6c <_dtoa_r+0x166c>
   847e8:	31bfff04 	addi	r6,r6,-4
   847ec:	d9800315 	stw	r6,12(sp)
   847f0:	0023883a 	mov	r17,zero
   847f4:	d9800317 	ldw	r6,12(sp)
   847f8:	008000c4 	movi	r2,3
   847fc:	30836726 	beq	r6,r2,8559c <_dtoa_r+0x109c>
   84800:	1183410e 	bge	r2,r6,85508 <_dtoa_r+0x1008>
   84804:	d9c00317 	ldw	r7,12(sp)
   84808:	00800104 	movi	r2,4
   8480c:	38827c26 	beq	r7,r2,85200 <_dtoa_r+0xd00>
   84810:	00800144 	movi	r2,5
   84814:	3884c41e 	bne	r7,r2,85b28 <_dtoa_r+0x1628>
   84818:	00800044 	movi	r2,1
   8481c:	d8800b15 	stw	r2,44(sp)
   84820:	d8c00517 	ldw	r3,20(sp)
   84824:	d9002217 	ldw	r4,136(sp)
   84828:	1907883a 	add	r3,r3,r4
   8482c:	19800044 	addi	r6,r3,1
   84830:	d8c00c15 	stw	r3,48(sp)
   84834:	d9800615 	stw	r6,24(sp)
   84838:	0183a40e 	bge	zero,r6,856cc <_dtoa_r+0x11cc>
   8483c:	d9800617 	ldw	r6,24(sp)
   84840:	3021883a 	mov	r16,r6
   84844:	e0001115 	stw	zero,68(fp)
   84848:	008005c4 	movi	r2,23
   8484c:	1184c92e 	bgeu	r2,r6,85b74 <_dtoa_r+0x1674>
   84850:	00c00044 	movi	r3,1
   84854:	00800104 	movi	r2,4
   84858:	1085883a 	add	r2,r2,r2
   8485c:	11000504 	addi	r4,r2,20
   84860:	180b883a 	mov	r5,r3
   84864:	18c00044 	addi	r3,r3,1
   84868:	313ffb2e 	bgeu	r6,r4,84858 <__alt_data_end+0xfffa4858>
   8486c:	e1401115 	stw	r5,68(fp)
   84870:	e009883a 	mov	r4,fp
   84874:	0087bb80 	call	87bb8 <_Balloc>
   84878:	d8800715 	stw	r2,28(sp)
   8487c:	e0801015 	stw	r2,64(fp)
   84880:	00800384 	movi	r2,14
   84884:	1400f736 	bltu	r2,r16,84c64 <_dtoa_r+0x764>
   84888:	8800f626 	beq	r17,zero,84c64 <_dtoa_r+0x764>
   8488c:	d9c00517 	ldw	r7,20(sp)
   84890:	01c39a0e 	bge	zero,r7,856fc <_dtoa_r+0x11fc>
   84894:	388003cc 	andi	r2,r7,15
   84898:	100490fa 	slli	r2,r2,3
   8489c:	382bd13a 	srai	r21,r7,4
   848a0:	00c00274 	movhi	r3,9
   848a4:	18c57d04 	addi	r3,r3,5620
   848a8:	1885883a 	add	r2,r3,r2
   848ac:	a8c0040c 	andi	r3,r21,16
   848b0:	12400017 	ldw	r9,0(r2)
   848b4:	12000117 	ldw	r8,4(r2)
   848b8:	18037926 	beq	r3,zero,856a0 <_dtoa_r+0x11a0>
   848bc:	00800274 	movhi	r2,9
   848c0:	10857304 	addi	r2,r2,5580
   848c4:	11800817 	ldw	r6,32(r2)
   848c8:	11c00917 	ldw	r7,36(r2)
   848cc:	9009883a 	mov	r4,r18
   848d0:	980b883a 	mov	r5,r19
   848d4:	da001715 	stw	r8,92(sp)
   848d8:	da401615 	stw	r9,88(sp)
   848dc:	008cbd80 	call	8cbd8 <__divdf3>
   848e0:	da001717 	ldw	r8,92(sp)
   848e4:	da401617 	ldw	r9,88(sp)
   848e8:	ad4003cc 	andi	r21,r21,15
   848ec:	040000c4 	movi	r16,3
   848f0:	1023883a 	mov	r17,r2
   848f4:	1829883a 	mov	r20,r3
   848f8:	a8001126 	beq	r21,zero,84940 <_dtoa_r+0x440>
   848fc:	05c00274 	movhi	r23,9
   84900:	bdc57304 	addi	r23,r23,5580
   84904:	4805883a 	mov	r2,r9
   84908:	4007883a 	mov	r3,r8
   8490c:	a980004c 	andi	r6,r21,1
   84910:	1009883a 	mov	r4,r2
   84914:	a82bd07a 	srai	r21,r21,1
   84918:	180b883a 	mov	r5,r3
   8491c:	30000426 	beq	r6,zero,84930 <_dtoa_r+0x430>
   84920:	b9800017 	ldw	r6,0(r23)
   84924:	b9c00117 	ldw	r7,4(r23)
   84928:	84000044 	addi	r16,r16,1
   8492c:	008d8000 	call	8d800 <__muldf3>
   84930:	bdc00204 	addi	r23,r23,8
   84934:	a83ff51e 	bne	r21,zero,8490c <__alt_data_end+0xfffa490c>
   84938:	1013883a 	mov	r9,r2
   8493c:	1811883a 	mov	r8,r3
   84940:	480d883a 	mov	r6,r9
   84944:	400f883a 	mov	r7,r8
   84948:	8809883a 	mov	r4,r17
   8494c:	a00b883a 	mov	r5,r20
   84950:	008cbd80 	call	8cbd8 <__divdf3>
   84954:	d8800f15 	stw	r2,60(sp)
   84958:	d8c01015 	stw	r3,64(sp)
   8495c:	d8c00e17 	ldw	r3,56(sp)
   84960:	18000626 	beq	r3,zero,8497c <_dtoa_r+0x47c>
   84964:	d9000f17 	ldw	r4,60(sp)
   84968:	d9401017 	ldw	r5,64(sp)
   8496c:	000d883a 	mov	r6,zero
   84970:	01cffc34 	movhi	r7,16368
   84974:	008d70c0 	call	8d70c <__ledf2>
   84978:	10040b16 	blt	r2,zero,859a8 <_dtoa_r+0x14a8>
   8497c:	8009883a 	mov	r4,r16
   84980:	008e9e80 	call	8e9e8 <__floatsidf>
   84984:	d9800f17 	ldw	r6,60(sp)
   84988:	d9c01017 	ldw	r7,64(sp)
   8498c:	1009883a 	mov	r4,r2
   84990:	180b883a 	mov	r5,r3
   84994:	008d8000 	call	8d800 <__muldf3>
   84998:	000d883a 	mov	r6,zero
   8499c:	01d00734 	movhi	r7,16412
   849a0:	1009883a 	mov	r4,r2
   849a4:	180b883a 	mov	r5,r3
   849a8:	008c32c0 	call	8c32c <__adddf3>
   849ac:	1021883a 	mov	r16,r2
   849b0:	d8800617 	ldw	r2,24(sp)
   849b4:	047f3034 	movhi	r17,64704
   849b8:	1c63883a 	add	r17,r3,r17
   849bc:	10031826 	beq	r2,zero,85620 <_dtoa_r+0x1120>
   849c0:	d8c00517 	ldw	r3,20(sp)
   849c4:	db000617 	ldw	r12,24(sp)
   849c8:	d8c01315 	stw	r3,76(sp)
   849cc:	d9000b17 	ldw	r4,44(sp)
   849d0:	20038f26 	beq	r4,zero,85810 <_dtoa_r+0x1310>
   849d4:	60bfffc4 	addi	r2,r12,-1
   849d8:	100490fa 	slli	r2,r2,3
   849dc:	00c00274 	movhi	r3,9
   849e0:	18c57d04 	addi	r3,r3,5620
   849e4:	1885883a 	add	r2,r3,r2
   849e8:	11800017 	ldw	r6,0(r2)
   849ec:	11c00117 	ldw	r7,4(r2)
   849f0:	d8800717 	ldw	r2,28(sp)
   849f4:	0009883a 	mov	r4,zero
   849f8:	014ff834 	movhi	r5,16352
   849fc:	db001615 	stw	r12,88(sp)
   84a00:	15c00044 	addi	r23,r2,1
   84a04:	008cbd80 	call	8cbd8 <__divdf3>
   84a08:	800d883a 	mov	r6,r16
   84a0c:	880f883a 	mov	r7,r17
   84a10:	1009883a 	mov	r4,r2
   84a14:	180b883a 	mov	r5,r3
   84a18:	008e06c0 	call	8e06c <__subdf3>
   84a1c:	d9401017 	ldw	r5,64(sp)
   84a20:	d9000f17 	ldw	r4,60(sp)
   84a24:	102b883a 	mov	r21,r2
   84a28:	d8c01215 	stw	r3,72(sp)
   84a2c:	008e9680 	call	8e968 <__fixdfsi>
   84a30:	1009883a 	mov	r4,r2
   84a34:	1029883a 	mov	r20,r2
   84a38:	008e9e80 	call	8e9e8 <__floatsidf>
   84a3c:	d9000f17 	ldw	r4,60(sp)
   84a40:	d9401017 	ldw	r5,64(sp)
   84a44:	100d883a 	mov	r6,r2
   84a48:	180f883a 	mov	r7,r3
   84a4c:	008e06c0 	call	8e06c <__subdf3>
   84a50:	1823883a 	mov	r17,r3
   84a54:	d8c00717 	ldw	r3,28(sp)
   84a58:	d9401217 	ldw	r5,72(sp)
   84a5c:	a2000c04 	addi	r8,r20,48
   84a60:	1021883a 	mov	r16,r2
   84a64:	1a000005 	stb	r8,0(r3)
   84a68:	800d883a 	mov	r6,r16
   84a6c:	880f883a 	mov	r7,r17
   84a70:	a809883a 	mov	r4,r21
   84a74:	4029883a 	mov	r20,r8
   84a78:	008d6300 	call	8d630 <__gedf2>
   84a7c:	00841d16 	blt	zero,r2,85af4 <_dtoa_r+0x15f4>
   84a80:	800d883a 	mov	r6,r16
   84a84:	880f883a 	mov	r7,r17
   84a88:	0009883a 	mov	r4,zero
   84a8c:	014ffc34 	movhi	r5,16368
   84a90:	008e06c0 	call	8e06c <__subdf3>
   84a94:	d9401217 	ldw	r5,72(sp)
   84a98:	100d883a 	mov	r6,r2
   84a9c:	180f883a 	mov	r7,r3
   84aa0:	a809883a 	mov	r4,r21
   84aa4:	008d6300 	call	8d630 <__gedf2>
   84aa8:	db001617 	ldw	r12,88(sp)
   84aac:	00840e16 	blt	zero,r2,85ae8 <_dtoa_r+0x15e8>
   84ab0:	00800044 	movi	r2,1
   84ab4:	13006b0e 	bge	r2,r12,84c64 <_dtoa_r+0x764>
   84ab8:	d9000717 	ldw	r4,28(sp)
   84abc:	dd800f15 	stw	r22,60(sp)
   84ac0:	dcc01015 	stw	r19,64(sp)
   84ac4:	2319883a 	add	r12,r4,r12
   84ac8:	dcc01217 	ldw	r19,72(sp)
   84acc:	602d883a 	mov	r22,r12
   84ad0:	dc801215 	stw	r18,72(sp)
   84ad4:	b825883a 	mov	r18,r23
   84ad8:	00000906 	br	84b00 <_dtoa_r+0x600>
   84adc:	008e06c0 	call	8e06c <__subdf3>
   84ae0:	a80d883a 	mov	r6,r21
   84ae4:	980f883a 	mov	r7,r19
   84ae8:	1009883a 	mov	r4,r2
   84aec:	180b883a 	mov	r5,r3
   84af0:	008d70c0 	call	8d70c <__ledf2>
   84af4:	1003e816 	blt	r2,zero,85a98 <_dtoa_r+0x1598>
   84af8:	b825883a 	mov	r18,r23
   84afc:	bd83e926 	beq	r23,r22,85aa4 <_dtoa_r+0x15a4>
   84b00:	a809883a 	mov	r4,r21
   84b04:	980b883a 	mov	r5,r19
   84b08:	000d883a 	mov	r6,zero
   84b0c:	01d00934 	movhi	r7,16420
   84b10:	008d8000 	call	8d800 <__muldf3>
   84b14:	000d883a 	mov	r6,zero
   84b18:	01d00934 	movhi	r7,16420
   84b1c:	8009883a 	mov	r4,r16
   84b20:	880b883a 	mov	r5,r17
   84b24:	102b883a 	mov	r21,r2
   84b28:	1827883a 	mov	r19,r3
   84b2c:	008d8000 	call	8d800 <__muldf3>
   84b30:	180b883a 	mov	r5,r3
   84b34:	1009883a 	mov	r4,r2
   84b38:	1821883a 	mov	r16,r3
   84b3c:	1023883a 	mov	r17,r2
   84b40:	008e9680 	call	8e968 <__fixdfsi>
   84b44:	1009883a 	mov	r4,r2
   84b48:	1029883a 	mov	r20,r2
   84b4c:	008e9e80 	call	8e9e8 <__floatsidf>
   84b50:	8809883a 	mov	r4,r17
   84b54:	800b883a 	mov	r5,r16
   84b58:	100d883a 	mov	r6,r2
   84b5c:	180f883a 	mov	r7,r3
   84b60:	008e06c0 	call	8e06c <__subdf3>
   84b64:	a5000c04 	addi	r20,r20,48
   84b68:	a80d883a 	mov	r6,r21
   84b6c:	980f883a 	mov	r7,r19
   84b70:	1009883a 	mov	r4,r2
   84b74:	180b883a 	mov	r5,r3
   84b78:	95000005 	stb	r20,0(r18)
   84b7c:	1021883a 	mov	r16,r2
   84b80:	1823883a 	mov	r17,r3
   84b84:	008d70c0 	call	8d70c <__ledf2>
   84b88:	bdc00044 	addi	r23,r23,1
   84b8c:	800d883a 	mov	r6,r16
   84b90:	880f883a 	mov	r7,r17
   84b94:	0009883a 	mov	r4,zero
   84b98:	014ffc34 	movhi	r5,16368
   84b9c:	103fcf0e 	bge	r2,zero,84adc <__alt_data_end+0xfffa4adc>
   84ba0:	d8c01317 	ldw	r3,76(sp)
   84ba4:	d8c00515 	stw	r3,20(sp)
   84ba8:	d9400917 	ldw	r5,36(sp)
   84bac:	e009883a 	mov	r4,fp
   84bb0:	0087c600 	call	87c60 <_Bfree>
   84bb4:	d9000517 	ldw	r4,20(sp)
   84bb8:	d9802317 	ldw	r6,140(sp)
   84bbc:	d9c02517 	ldw	r7,148(sp)
   84bc0:	b8000005 	stb	zero,0(r23)
   84bc4:	20800044 	addi	r2,r4,1
   84bc8:	30800015 	stw	r2,0(r6)
   84bcc:	3802aa26 	beq	r7,zero,85678 <_dtoa_r+0x1178>
   84bd0:	3dc00015 	stw	r23,0(r7)
   84bd4:	d8800717 	ldw	r2,28(sp)
   84bd8:	003e7906 	br	845c0 <__alt_data_end+0xfffa45c0>
   84bdc:	00800434 	movhi	r2,16
   84be0:	10bfffc4 	addi	r2,r2,-1
   84be4:	88a2703a 	and	r17,r17,r2
   84be8:	883e851e 	bne	r17,zero,84600 <__alt_data_end+0xfffa4600>
   84bec:	00800274 	movhi	r2,9
   84bf0:	10855e04 	addi	r2,r2,5496
   84bf4:	003e8406 	br	84608 <__alt_data_end+0xfffa4608>
   84bf8:	10c00204 	addi	r3,r2,8
   84bfc:	003e8706 	br	8461c <__alt_data_end+0xfffa461c>
   84c00:	01400434 	movhi	r5,16
   84c04:	297fffc4 	addi	r5,r5,-1
   84c08:	994a703a 	and	r5,r19,r5
   84c0c:	9009883a 	mov	r4,r18
   84c10:	843f0044 	addi	r16,r16,-1023
   84c14:	294ffc34 	orhi	r5,r5,16368
   84c18:	dd800217 	ldw	r22,8(sp)
   84c1c:	d8001115 	stw	zero,68(sp)
   84c20:	003ea506 	br	846b8 <__alt_data_end+0xfffa46b8>
   84c24:	00800274 	movhi	r2,9
   84c28:	10855504 	addi	r2,r2,5460
   84c2c:	003e6406 	br	845c0 <__alt_data_end+0xfffa45c0>
   84c30:	e0001115 	stw	zero,68(fp)
   84c34:	000b883a 	mov	r5,zero
   84c38:	e009883a 	mov	r4,fp
   84c3c:	0087bb80 	call	87bb8 <_Balloc>
   84c40:	01bfffc4 	movi	r6,-1
   84c44:	01c00044 	movi	r7,1
   84c48:	d8800715 	stw	r2,28(sp)
   84c4c:	d9800c15 	stw	r6,48(sp)
   84c50:	e0801015 	stw	r2,64(fp)
   84c54:	d8000315 	stw	zero,12(sp)
   84c58:	d9c00b15 	stw	r7,44(sp)
   84c5c:	d9800615 	stw	r6,24(sp)
   84c60:	d8002215 	stw	zero,136(sp)
   84c64:	d8800117 	ldw	r2,4(sp)
   84c68:	10008916 	blt	r2,zero,84e90 <_dtoa_r+0x990>
   84c6c:	d9000517 	ldw	r4,20(sp)
   84c70:	00c00384 	movi	r3,14
   84c74:	19008616 	blt	r3,r4,84e90 <_dtoa_r+0x990>
   84c78:	200490fa 	slli	r2,r4,3
   84c7c:	00c00274 	movhi	r3,9
   84c80:	d9802217 	ldw	r6,136(sp)
   84c84:	18c57d04 	addi	r3,r3,5620
   84c88:	1885883a 	add	r2,r3,r2
   84c8c:	14000017 	ldw	r16,0(r2)
   84c90:	14400117 	ldw	r17,4(r2)
   84c94:	30016316 	blt	r6,zero,85224 <_dtoa_r+0xd24>
   84c98:	800d883a 	mov	r6,r16
   84c9c:	880f883a 	mov	r7,r17
   84ca0:	9009883a 	mov	r4,r18
   84ca4:	980b883a 	mov	r5,r19
   84ca8:	008cbd80 	call	8cbd8 <__divdf3>
   84cac:	180b883a 	mov	r5,r3
   84cb0:	1009883a 	mov	r4,r2
   84cb4:	008e9680 	call	8e968 <__fixdfsi>
   84cb8:	1009883a 	mov	r4,r2
   84cbc:	102b883a 	mov	r21,r2
   84cc0:	008e9e80 	call	8e9e8 <__floatsidf>
   84cc4:	800d883a 	mov	r6,r16
   84cc8:	880f883a 	mov	r7,r17
   84ccc:	1009883a 	mov	r4,r2
   84cd0:	180b883a 	mov	r5,r3
   84cd4:	008d8000 	call	8d800 <__muldf3>
   84cd8:	100d883a 	mov	r6,r2
   84cdc:	180f883a 	mov	r7,r3
   84ce0:	9009883a 	mov	r4,r18
   84ce4:	980b883a 	mov	r5,r19
   84ce8:	008e06c0 	call	8e06c <__subdf3>
   84cec:	d9c00717 	ldw	r7,28(sp)
   84cf0:	1009883a 	mov	r4,r2
   84cf4:	a8800c04 	addi	r2,r21,48
   84cf8:	38800005 	stb	r2,0(r7)
   84cfc:	3dc00044 	addi	r23,r7,1
   84d00:	d9c00617 	ldw	r7,24(sp)
   84d04:	01800044 	movi	r6,1
   84d08:	180b883a 	mov	r5,r3
   84d0c:	2005883a 	mov	r2,r4
   84d10:	39803826 	beq	r7,r6,84df4 <_dtoa_r+0x8f4>
   84d14:	000d883a 	mov	r6,zero
   84d18:	01d00934 	movhi	r7,16420
   84d1c:	008d8000 	call	8d800 <__muldf3>
   84d20:	000d883a 	mov	r6,zero
   84d24:	000f883a 	mov	r7,zero
   84d28:	1009883a 	mov	r4,r2
   84d2c:	180b883a 	mov	r5,r3
   84d30:	1025883a 	mov	r18,r2
   84d34:	1827883a 	mov	r19,r3
   84d38:	008d5a80 	call	8d5a8 <__eqdf2>
   84d3c:	103f9a26 	beq	r2,zero,84ba8 <__alt_data_end+0xfffa4ba8>
   84d40:	d9c00617 	ldw	r7,24(sp)
   84d44:	d8c00717 	ldw	r3,28(sp)
   84d48:	b829883a 	mov	r20,r23
   84d4c:	38bfffc4 	addi	r2,r7,-1
   84d50:	18ad883a 	add	r22,r3,r2
   84d54:	00000a06 	br	84d80 <_dtoa_r+0x880>
   84d58:	008d8000 	call	8d800 <__muldf3>
   84d5c:	000d883a 	mov	r6,zero
   84d60:	000f883a 	mov	r7,zero
   84d64:	1009883a 	mov	r4,r2
   84d68:	180b883a 	mov	r5,r3
   84d6c:	1025883a 	mov	r18,r2
   84d70:	1827883a 	mov	r19,r3
   84d74:	b829883a 	mov	r20,r23
   84d78:	008d5a80 	call	8d5a8 <__eqdf2>
   84d7c:	103f8a26 	beq	r2,zero,84ba8 <__alt_data_end+0xfffa4ba8>
   84d80:	800d883a 	mov	r6,r16
   84d84:	880f883a 	mov	r7,r17
   84d88:	9009883a 	mov	r4,r18
   84d8c:	980b883a 	mov	r5,r19
   84d90:	008cbd80 	call	8cbd8 <__divdf3>
   84d94:	180b883a 	mov	r5,r3
   84d98:	1009883a 	mov	r4,r2
   84d9c:	008e9680 	call	8e968 <__fixdfsi>
   84da0:	1009883a 	mov	r4,r2
   84da4:	102b883a 	mov	r21,r2
   84da8:	008e9e80 	call	8e9e8 <__floatsidf>
   84dac:	800d883a 	mov	r6,r16
   84db0:	880f883a 	mov	r7,r17
   84db4:	1009883a 	mov	r4,r2
   84db8:	180b883a 	mov	r5,r3
   84dbc:	008d8000 	call	8d800 <__muldf3>
   84dc0:	100d883a 	mov	r6,r2
   84dc4:	180f883a 	mov	r7,r3
   84dc8:	9009883a 	mov	r4,r18
   84dcc:	980b883a 	mov	r5,r19
   84dd0:	008e06c0 	call	8e06c <__subdf3>
   84dd4:	aa000c04 	addi	r8,r21,48
   84dd8:	a2000005 	stb	r8,0(r20)
   84ddc:	000d883a 	mov	r6,zero
   84de0:	01d00934 	movhi	r7,16420
   84de4:	1009883a 	mov	r4,r2
   84de8:	180b883a 	mov	r5,r3
   84dec:	a5c00044 	addi	r23,r20,1
   84df0:	b53fd91e 	bne	r22,r20,84d58 <__alt_data_end+0xfffa4d58>
   84df4:	100d883a 	mov	r6,r2
   84df8:	180f883a 	mov	r7,r3
   84dfc:	1009883a 	mov	r4,r2
   84e00:	180b883a 	mov	r5,r3
   84e04:	008c32c0 	call	8c32c <__adddf3>
   84e08:	100d883a 	mov	r6,r2
   84e0c:	180f883a 	mov	r7,r3
   84e10:	8009883a 	mov	r4,r16
   84e14:	880b883a 	mov	r5,r17
   84e18:	1027883a 	mov	r19,r2
   84e1c:	1825883a 	mov	r18,r3
   84e20:	008d70c0 	call	8d70c <__ledf2>
   84e24:	10000816 	blt	r2,zero,84e48 <_dtoa_r+0x948>
   84e28:	980d883a 	mov	r6,r19
   84e2c:	900f883a 	mov	r7,r18
   84e30:	8009883a 	mov	r4,r16
   84e34:	880b883a 	mov	r5,r17
   84e38:	008d5a80 	call	8d5a8 <__eqdf2>
   84e3c:	103f5a1e 	bne	r2,zero,84ba8 <__alt_data_end+0xfffa4ba8>
   84e40:	ad40004c 	andi	r21,r21,1
   84e44:	a83f5826 	beq	r21,zero,84ba8 <__alt_data_end+0xfffa4ba8>
   84e48:	bd3fffc3 	ldbu	r20,-1(r23)
   84e4c:	b8bfffc4 	addi	r2,r23,-1
   84e50:	1007883a 	mov	r3,r2
   84e54:	01400e44 	movi	r5,57
   84e58:	d9800717 	ldw	r6,28(sp)
   84e5c:	00000506 	br	84e74 <_dtoa_r+0x974>
   84e60:	18ffffc4 	addi	r3,r3,-1
   84e64:	11824726 	beq	r2,r6,85784 <_dtoa_r+0x1284>
   84e68:	1d000003 	ldbu	r20,0(r3)
   84e6c:	102f883a 	mov	r23,r2
   84e70:	10bfffc4 	addi	r2,r2,-1
   84e74:	a1003fcc 	andi	r4,r20,255
   84e78:	2100201c 	xori	r4,r4,128
   84e7c:	213fe004 	addi	r4,r4,-128
   84e80:	217ff726 	beq	r4,r5,84e60 <__alt_data_end+0xfffa4e60>
   84e84:	a2000044 	addi	r8,r20,1
   84e88:	12000005 	stb	r8,0(r2)
   84e8c:	003f4606 	br	84ba8 <__alt_data_end+0xfffa4ba8>
   84e90:	d9000b17 	ldw	r4,44(sp)
   84e94:	2000c826 	beq	r4,zero,851b8 <_dtoa_r+0xcb8>
   84e98:	d9800317 	ldw	r6,12(sp)
   84e9c:	00c00044 	movi	r3,1
   84ea0:	1980f90e 	bge	r3,r6,85288 <_dtoa_r+0xd88>
   84ea4:	d8800617 	ldw	r2,24(sp)
   84ea8:	d8c00a17 	ldw	r3,40(sp)
   84eac:	157fffc4 	addi	r21,r2,-1
   84eb0:	1d41f316 	blt	r3,r21,85680 <_dtoa_r+0x1180>
   84eb4:	1d6bc83a 	sub	r21,r3,r21
   84eb8:	d9c00617 	ldw	r7,24(sp)
   84ebc:	3802aa16 	blt	r7,zero,85968 <_dtoa_r+0x1468>
   84ec0:	dd000817 	ldw	r20,32(sp)
   84ec4:	d8800617 	ldw	r2,24(sp)
   84ec8:	d8c00817 	ldw	r3,32(sp)
   84ecc:	01400044 	movi	r5,1
   84ed0:	e009883a 	mov	r4,fp
   84ed4:	1887883a 	add	r3,r3,r2
   84ed8:	d8c00815 	stw	r3,32(sp)
   84edc:	b0ad883a 	add	r22,r22,r2
   84ee0:	0087fec0 	call	87fec <__i2b>
   84ee4:	1023883a 	mov	r17,r2
   84ee8:	a0000826 	beq	r20,zero,84f0c <_dtoa_r+0xa0c>
   84eec:	0580070e 	bge	zero,r22,84f0c <_dtoa_r+0xa0c>
   84ef0:	a005883a 	mov	r2,r20
   84ef4:	b500b916 	blt	r22,r20,851dc <_dtoa_r+0xcdc>
   84ef8:	d9000817 	ldw	r4,32(sp)
   84efc:	a0a9c83a 	sub	r20,r20,r2
   84f00:	b0adc83a 	sub	r22,r22,r2
   84f04:	2089c83a 	sub	r4,r4,r2
   84f08:	d9000815 	stw	r4,32(sp)
   84f0c:	d9800a17 	ldw	r6,40(sp)
   84f10:	0181810e 	bge	zero,r6,85518 <_dtoa_r+0x1018>
   84f14:	d9c00b17 	ldw	r7,44(sp)
   84f18:	3800b326 	beq	r7,zero,851e8 <_dtoa_r+0xce8>
   84f1c:	a800b226 	beq	r21,zero,851e8 <_dtoa_r+0xce8>
   84f20:	880b883a 	mov	r5,r17
   84f24:	a80d883a 	mov	r6,r21
   84f28:	e009883a 	mov	r4,fp
   84f2c:	00882b40 	call	882b4 <__pow5mult>
   84f30:	d9800917 	ldw	r6,36(sp)
   84f34:	100b883a 	mov	r5,r2
   84f38:	e009883a 	mov	r4,fp
   84f3c:	1023883a 	mov	r17,r2
   84f40:	00880280 	call	88028 <__multiply>
   84f44:	1021883a 	mov	r16,r2
   84f48:	d8800a17 	ldw	r2,40(sp)
   84f4c:	d9400917 	ldw	r5,36(sp)
   84f50:	e009883a 	mov	r4,fp
   84f54:	1545c83a 	sub	r2,r2,r21
   84f58:	d8800a15 	stw	r2,40(sp)
   84f5c:	0087c600 	call	87c60 <_Bfree>
   84f60:	d8c00a17 	ldw	r3,40(sp)
   84f64:	18009f1e 	bne	r3,zero,851e4 <_dtoa_r+0xce4>
   84f68:	05c00044 	movi	r23,1
   84f6c:	e009883a 	mov	r4,fp
   84f70:	b80b883a 	mov	r5,r23
   84f74:	0087fec0 	call	87fec <__i2b>
   84f78:	d9000d17 	ldw	r4,52(sp)
   84f7c:	102b883a 	mov	r21,r2
   84f80:	2000ce26 	beq	r4,zero,852bc <_dtoa_r+0xdbc>
   84f84:	200d883a 	mov	r6,r4
   84f88:	100b883a 	mov	r5,r2
   84f8c:	e009883a 	mov	r4,fp
   84f90:	00882b40 	call	882b4 <__pow5mult>
   84f94:	d9800317 	ldw	r6,12(sp)
   84f98:	102b883a 	mov	r21,r2
   84f9c:	b981810e 	bge	r23,r6,855a4 <_dtoa_r+0x10a4>
   84fa0:	0027883a 	mov	r19,zero
   84fa4:	a8800417 	ldw	r2,16(r21)
   84fa8:	05c00804 	movi	r23,32
   84fac:	10800104 	addi	r2,r2,4
   84fb0:	1085883a 	add	r2,r2,r2
   84fb4:	1085883a 	add	r2,r2,r2
   84fb8:	a885883a 	add	r2,r21,r2
   84fbc:	11000017 	ldw	r4,0(r2)
   84fc0:	0087ed40 	call	87ed4 <__hi0bits>
   84fc4:	b885c83a 	sub	r2,r23,r2
   84fc8:	1585883a 	add	r2,r2,r22
   84fcc:	108007cc 	andi	r2,r2,31
   84fd0:	1000b326 	beq	r2,zero,852a0 <_dtoa_r+0xda0>
   84fd4:	00c00804 	movi	r3,32
   84fd8:	1887c83a 	sub	r3,r3,r2
   84fdc:	01000104 	movi	r4,4
   84fe0:	20c2cd0e 	bge	r4,r3,85b18 <_dtoa_r+0x1618>
   84fe4:	00c00704 	movi	r3,28
   84fe8:	1885c83a 	sub	r2,r3,r2
   84fec:	d8c00817 	ldw	r3,32(sp)
   84ff0:	a0a9883a 	add	r20,r20,r2
   84ff4:	b0ad883a 	add	r22,r22,r2
   84ff8:	1887883a 	add	r3,r3,r2
   84ffc:	d8c00815 	stw	r3,32(sp)
   85000:	d9800817 	ldw	r6,32(sp)
   85004:	0180040e 	bge	zero,r6,85018 <_dtoa_r+0xb18>
   85008:	800b883a 	mov	r5,r16
   8500c:	e009883a 	mov	r4,fp
   85010:	00883f40 	call	883f4 <__lshift>
   85014:	1021883a 	mov	r16,r2
   85018:	0580050e 	bge	zero,r22,85030 <_dtoa_r+0xb30>
   8501c:	a80b883a 	mov	r5,r21
   85020:	b00d883a 	mov	r6,r22
   85024:	e009883a 	mov	r4,fp
   85028:	00883f40 	call	883f4 <__lshift>
   8502c:	102b883a 	mov	r21,r2
   85030:	d9c00e17 	ldw	r7,56(sp)
   85034:	3801211e 	bne	r7,zero,854bc <_dtoa_r+0xfbc>
   85038:	d9800617 	ldw	r6,24(sp)
   8503c:	0181380e 	bge	zero,r6,85520 <_dtoa_r+0x1020>
   85040:	d8c00b17 	ldw	r3,44(sp)
   85044:	1800ab1e 	bne	r3,zero,852f4 <_dtoa_r+0xdf4>
   85048:	dc800717 	ldw	r18,28(sp)
   8504c:	dcc00617 	ldw	r19,24(sp)
   85050:	9029883a 	mov	r20,r18
   85054:	00000206 	br	85060 <_dtoa_r+0xb60>
   85058:	0087c880 	call	87c88 <__multadd>
   8505c:	1021883a 	mov	r16,r2
   85060:	a80b883a 	mov	r5,r21
   85064:	8009883a 	mov	r4,r16
   85068:	00842d80 	call	842d8 <quorem>
   8506c:	10800c04 	addi	r2,r2,48
   85070:	90800005 	stb	r2,0(r18)
   85074:	94800044 	addi	r18,r18,1
   85078:	9507c83a 	sub	r3,r18,r20
   8507c:	000f883a 	mov	r7,zero
   85080:	01800284 	movi	r6,10
   85084:	800b883a 	mov	r5,r16
   85088:	e009883a 	mov	r4,fp
   8508c:	1cfff216 	blt	r3,r19,85058 <__alt_data_end+0xfffa5058>
   85090:	1011883a 	mov	r8,r2
   85094:	d8800617 	ldw	r2,24(sp)
   85098:	0082370e 	bge	zero,r2,85978 <_dtoa_r+0x1478>
   8509c:	d9000717 	ldw	r4,28(sp)
   850a0:	0025883a 	mov	r18,zero
   850a4:	20af883a 	add	r23,r4,r2
   850a8:	01800044 	movi	r6,1
   850ac:	800b883a 	mov	r5,r16
   850b0:	e009883a 	mov	r4,fp
   850b4:	da001715 	stw	r8,92(sp)
   850b8:	00883f40 	call	883f4 <__lshift>
   850bc:	a80b883a 	mov	r5,r21
   850c0:	1009883a 	mov	r4,r2
   850c4:	d8800915 	stw	r2,36(sp)
   850c8:	008853c0 	call	8853c <__mcmp>
   850cc:	da001717 	ldw	r8,92(sp)
   850d0:	0081800e 	bge	zero,r2,856d4 <_dtoa_r+0x11d4>
   850d4:	b93fffc3 	ldbu	r4,-1(r23)
   850d8:	b8bfffc4 	addi	r2,r23,-1
   850dc:	1007883a 	mov	r3,r2
   850e0:	01800e44 	movi	r6,57
   850e4:	d9c00717 	ldw	r7,28(sp)
   850e8:	00000506 	br	85100 <_dtoa_r+0xc00>
   850ec:	18ffffc4 	addi	r3,r3,-1
   850f0:	11c12326 	beq	r2,r7,85580 <_dtoa_r+0x1080>
   850f4:	19000003 	ldbu	r4,0(r3)
   850f8:	102f883a 	mov	r23,r2
   850fc:	10bfffc4 	addi	r2,r2,-1
   85100:	21403fcc 	andi	r5,r4,255
   85104:	2940201c 	xori	r5,r5,128
   85108:	297fe004 	addi	r5,r5,-128
   8510c:	29bff726 	beq	r5,r6,850ec <__alt_data_end+0xfffa50ec>
   85110:	21000044 	addi	r4,r4,1
   85114:	11000005 	stb	r4,0(r2)
   85118:	a80b883a 	mov	r5,r21
   8511c:	e009883a 	mov	r4,fp
   85120:	0087c600 	call	87c60 <_Bfree>
   85124:	883ea026 	beq	r17,zero,84ba8 <__alt_data_end+0xfffa4ba8>
   85128:	90000426 	beq	r18,zero,8513c <_dtoa_r+0xc3c>
   8512c:	94400326 	beq	r18,r17,8513c <_dtoa_r+0xc3c>
   85130:	900b883a 	mov	r5,r18
   85134:	e009883a 	mov	r4,fp
   85138:	0087c600 	call	87c60 <_Bfree>
   8513c:	880b883a 	mov	r5,r17
   85140:	e009883a 	mov	r4,fp
   85144:	0087c600 	call	87c60 <_Bfree>
   85148:	003e9706 	br	84ba8 <__alt_data_end+0xfffa4ba8>
   8514c:	01800044 	movi	r6,1
   85150:	d9800e15 	stw	r6,56(sp)
   85154:	003d9606 	br	847b0 <__alt_data_end+0xfffa47b0>
   85158:	d8800817 	ldw	r2,32(sp)
   8515c:	d8c00517 	ldw	r3,20(sp)
   85160:	d8000d15 	stw	zero,52(sp)
   85164:	10c5c83a 	sub	r2,r2,r3
   85168:	00c9c83a 	sub	r4,zero,r3
   8516c:	d8800815 	stw	r2,32(sp)
   85170:	d9000a15 	stw	r4,40(sp)
   85174:	003d9706 	br	847d4 <__alt_data_end+0xfffa47d4>
   85178:	05adc83a 	sub	r22,zero,r22
   8517c:	dd800815 	stw	r22,32(sp)
   85180:	002d883a 	mov	r22,zero
   85184:	003d8e06 	br	847c0 <__alt_data_end+0xfffa47c0>
   85188:	d9000517 	ldw	r4,20(sp)
   8518c:	008e9e80 	call	8e9e8 <__floatsidf>
   85190:	100d883a 	mov	r6,r2
   85194:	180f883a 	mov	r7,r3
   85198:	a009883a 	mov	r4,r20
   8519c:	880b883a 	mov	r5,r17
   851a0:	008d5a80 	call	8d5a8 <__eqdf2>
   851a4:	103d7126 	beq	r2,zero,8476c <__alt_data_end+0xfffa476c>
   851a8:	d9c00517 	ldw	r7,20(sp)
   851ac:	39ffffc4 	addi	r7,r7,-1
   851b0:	d9c00515 	stw	r7,20(sp)
   851b4:	003d6d06 	br	8476c <__alt_data_end+0xfffa476c>
   851b8:	dd400a17 	ldw	r21,40(sp)
   851bc:	dd000817 	ldw	r20,32(sp)
   851c0:	0023883a 	mov	r17,zero
   851c4:	003f4806 	br	84ee8 <__alt_data_end+0xfffa4ee8>
   851c8:	10e3c83a 	sub	r17,r2,r3
   851cc:	9448983a 	sll	r4,r18,r17
   851d0:	003d3206 	br	8469c <__alt_data_end+0xfffa469c>
   851d4:	d8000e15 	stw	zero,56(sp)
   851d8:	003d7506 	br	847b0 <__alt_data_end+0xfffa47b0>
   851dc:	b005883a 	mov	r2,r22
   851e0:	003f4506 	br	84ef8 <__alt_data_end+0xfffa4ef8>
   851e4:	dc000915 	stw	r16,36(sp)
   851e8:	d9800a17 	ldw	r6,40(sp)
   851ec:	d9400917 	ldw	r5,36(sp)
   851f0:	e009883a 	mov	r4,fp
   851f4:	00882b40 	call	882b4 <__pow5mult>
   851f8:	1021883a 	mov	r16,r2
   851fc:	003f5a06 	br	84f68 <__alt_data_end+0xfffa4f68>
   85200:	01c00044 	movi	r7,1
   85204:	d9c00b15 	stw	r7,44(sp)
   85208:	d8802217 	ldw	r2,136(sp)
   8520c:	0081280e 	bge	zero,r2,856b0 <_dtoa_r+0x11b0>
   85210:	100d883a 	mov	r6,r2
   85214:	1021883a 	mov	r16,r2
   85218:	d8800c15 	stw	r2,48(sp)
   8521c:	d8800615 	stw	r2,24(sp)
   85220:	003d8806 	br	84844 <__alt_data_end+0xfffa4844>
   85224:	d8800617 	ldw	r2,24(sp)
   85228:	00be9b16 	blt	zero,r2,84c98 <__alt_data_end+0xfffa4c98>
   8522c:	10010f1e 	bne	r2,zero,8566c <_dtoa_r+0x116c>
   85230:	880b883a 	mov	r5,r17
   85234:	000d883a 	mov	r6,zero
   85238:	01d00534 	movhi	r7,16404
   8523c:	8009883a 	mov	r4,r16
   85240:	008d8000 	call	8d800 <__muldf3>
   85244:	900d883a 	mov	r6,r18
   85248:	980f883a 	mov	r7,r19
   8524c:	1009883a 	mov	r4,r2
   85250:	180b883a 	mov	r5,r3
   85254:	008d6300 	call	8d630 <__gedf2>
   85258:	002b883a 	mov	r21,zero
   8525c:	0023883a 	mov	r17,zero
   85260:	1000bf16 	blt	r2,zero,85560 <_dtoa_r+0x1060>
   85264:	d9802217 	ldw	r6,136(sp)
   85268:	ddc00717 	ldw	r23,28(sp)
   8526c:	018c303a 	nor	r6,zero,r6
   85270:	d9800515 	stw	r6,20(sp)
   85274:	a80b883a 	mov	r5,r21
   85278:	e009883a 	mov	r4,fp
   8527c:	0087c600 	call	87c60 <_Bfree>
   85280:	883e4926 	beq	r17,zero,84ba8 <__alt_data_end+0xfffa4ba8>
   85284:	003fad06 	br	8513c <__alt_data_end+0xfffa513c>
   85288:	d9c01117 	ldw	r7,68(sp)
   8528c:	3801bc26 	beq	r7,zero,85980 <_dtoa_r+0x1480>
   85290:	10810cc4 	addi	r2,r2,1075
   85294:	dd400a17 	ldw	r21,40(sp)
   85298:	dd000817 	ldw	r20,32(sp)
   8529c:	003f0a06 	br	84ec8 <__alt_data_end+0xfffa4ec8>
   852a0:	00800704 	movi	r2,28
   852a4:	d9000817 	ldw	r4,32(sp)
   852a8:	a0a9883a 	add	r20,r20,r2
   852ac:	b0ad883a 	add	r22,r22,r2
   852b0:	2089883a 	add	r4,r4,r2
   852b4:	d9000815 	stw	r4,32(sp)
   852b8:	003f5106 	br	85000 <__alt_data_end+0xfffa5000>
   852bc:	d8c00317 	ldw	r3,12(sp)
   852c0:	b8c1fc0e 	bge	r23,r3,85ab4 <_dtoa_r+0x15b4>
   852c4:	0027883a 	mov	r19,zero
   852c8:	b805883a 	mov	r2,r23
   852cc:	003f3e06 	br	84fc8 <__alt_data_end+0xfffa4fc8>
   852d0:	880b883a 	mov	r5,r17
   852d4:	e009883a 	mov	r4,fp
   852d8:	000f883a 	mov	r7,zero
   852dc:	01800284 	movi	r6,10
   852e0:	0087c880 	call	87c88 <__multadd>
   852e4:	d9000c17 	ldw	r4,48(sp)
   852e8:	1023883a 	mov	r17,r2
   852ec:	0102040e 	bge	zero,r4,85b00 <_dtoa_r+0x1600>
   852f0:	d9000615 	stw	r4,24(sp)
   852f4:	0500050e 	bge	zero,r20,8530c <_dtoa_r+0xe0c>
   852f8:	880b883a 	mov	r5,r17
   852fc:	a00d883a 	mov	r6,r20
   85300:	e009883a 	mov	r4,fp
   85304:	00883f40 	call	883f4 <__lshift>
   85308:	1023883a 	mov	r17,r2
   8530c:	9801241e 	bne	r19,zero,857a0 <_dtoa_r+0x12a0>
   85310:	8829883a 	mov	r20,r17
   85314:	d9000617 	ldw	r4,24(sp)
   85318:	dcc00717 	ldw	r19,28(sp)
   8531c:	9480004c 	andi	r18,r18,1
   85320:	20bfffc4 	addi	r2,r4,-1
   85324:	9885883a 	add	r2,r19,r2
   85328:	d8800415 	stw	r2,16(sp)
   8532c:	dc800615 	stw	r18,24(sp)
   85330:	a80b883a 	mov	r5,r21
   85334:	8009883a 	mov	r4,r16
   85338:	00842d80 	call	842d8 <quorem>
   8533c:	880b883a 	mov	r5,r17
   85340:	8009883a 	mov	r4,r16
   85344:	102f883a 	mov	r23,r2
   85348:	008853c0 	call	8853c <__mcmp>
   8534c:	a80b883a 	mov	r5,r21
   85350:	a00d883a 	mov	r6,r20
   85354:	e009883a 	mov	r4,fp
   85358:	102d883a 	mov	r22,r2
   8535c:	008859c0 	call	8859c <__mdiff>
   85360:	1007883a 	mov	r3,r2
   85364:	10800317 	ldw	r2,12(r2)
   85368:	bc800c04 	addi	r18,r23,48
   8536c:	180b883a 	mov	r5,r3
   85370:	10004e1e 	bne	r2,zero,854ac <_dtoa_r+0xfac>
   85374:	8009883a 	mov	r4,r16
   85378:	d8c01615 	stw	r3,88(sp)
   8537c:	008853c0 	call	8853c <__mcmp>
   85380:	d8c01617 	ldw	r3,88(sp)
   85384:	e009883a 	mov	r4,fp
   85388:	d8801615 	stw	r2,88(sp)
   8538c:	180b883a 	mov	r5,r3
   85390:	0087c600 	call	87c60 <_Bfree>
   85394:	d8801617 	ldw	r2,88(sp)
   85398:	1000041e 	bne	r2,zero,853ac <_dtoa_r+0xeac>
   8539c:	d9800317 	ldw	r6,12(sp)
   853a0:	3000021e 	bne	r6,zero,853ac <_dtoa_r+0xeac>
   853a4:	d8c00617 	ldw	r3,24(sp)
   853a8:	18003726 	beq	r3,zero,85488 <_dtoa_r+0xf88>
   853ac:	b0002016 	blt	r22,zero,85430 <_dtoa_r+0xf30>
   853b0:	b000041e 	bne	r22,zero,853c4 <_dtoa_r+0xec4>
   853b4:	d9000317 	ldw	r4,12(sp)
   853b8:	2000021e 	bne	r4,zero,853c4 <_dtoa_r+0xec4>
   853bc:	d8c00617 	ldw	r3,24(sp)
   853c0:	18001b26 	beq	r3,zero,85430 <_dtoa_r+0xf30>
   853c4:	00810716 	blt	zero,r2,857e4 <_dtoa_r+0x12e4>
   853c8:	d8c00417 	ldw	r3,16(sp)
   853cc:	9d800044 	addi	r22,r19,1
   853d0:	9c800005 	stb	r18,0(r19)
   853d4:	b02f883a 	mov	r23,r22
   853d8:	98c10626 	beq	r19,r3,857f4 <_dtoa_r+0x12f4>
   853dc:	800b883a 	mov	r5,r16
   853e0:	000f883a 	mov	r7,zero
   853e4:	01800284 	movi	r6,10
   853e8:	e009883a 	mov	r4,fp
   853ec:	0087c880 	call	87c88 <__multadd>
   853f0:	1021883a 	mov	r16,r2
   853f4:	000f883a 	mov	r7,zero
   853f8:	01800284 	movi	r6,10
   853fc:	880b883a 	mov	r5,r17
   85400:	e009883a 	mov	r4,fp
   85404:	8d002526 	beq	r17,r20,8549c <_dtoa_r+0xf9c>
   85408:	0087c880 	call	87c88 <__multadd>
   8540c:	a00b883a 	mov	r5,r20
   85410:	000f883a 	mov	r7,zero
   85414:	01800284 	movi	r6,10
   85418:	e009883a 	mov	r4,fp
   8541c:	1023883a 	mov	r17,r2
   85420:	0087c880 	call	87c88 <__multadd>
   85424:	1029883a 	mov	r20,r2
   85428:	b027883a 	mov	r19,r22
   8542c:	003fc006 	br	85330 <__alt_data_end+0xfffa5330>
   85430:	9011883a 	mov	r8,r18
   85434:	00800e0e 	bge	zero,r2,85470 <_dtoa_r+0xf70>
   85438:	800b883a 	mov	r5,r16
   8543c:	01800044 	movi	r6,1
   85440:	e009883a 	mov	r4,fp
   85444:	da001715 	stw	r8,92(sp)
   85448:	00883f40 	call	883f4 <__lshift>
   8544c:	a80b883a 	mov	r5,r21
   85450:	1009883a 	mov	r4,r2
   85454:	1021883a 	mov	r16,r2
   85458:	008853c0 	call	8853c <__mcmp>
   8545c:	da001717 	ldw	r8,92(sp)
   85460:	0081960e 	bge	zero,r2,85abc <_dtoa_r+0x15bc>
   85464:	00800e44 	movi	r2,57
   85468:	40817026 	beq	r8,r2,85a2c <_dtoa_r+0x152c>
   8546c:	ba000c44 	addi	r8,r23,49
   85470:	8825883a 	mov	r18,r17
   85474:	9dc00044 	addi	r23,r19,1
   85478:	9a000005 	stb	r8,0(r19)
   8547c:	a023883a 	mov	r17,r20
   85480:	dc000915 	stw	r16,36(sp)
   85484:	003f2406 	br	85118 <__alt_data_end+0xfffa5118>
   85488:	00800e44 	movi	r2,57
   8548c:	9011883a 	mov	r8,r18
   85490:	90816626 	beq	r18,r2,85a2c <_dtoa_r+0x152c>
   85494:	05bff516 	blt	zero,r22,8546c <__alt_data_end+0xfffa546c>
   85498:	003ff506 	br	85470 <__alt_data_end+0xfffa5470>
   8549c:	0087c880 	call	87c88 <__multadd>
   854a0:	1023883a 	mov	r17,r2
   854a4:	1029883a 	mov	r20,r2
   854a8:	003fdf06 	br	85428 <__alt_data_end+0xfffa5428>
   854ac:	e009883a 	mov	r4,fp
   854b0:	0087c600 	call	87c60 <_Bfree>
   854b4:	00800044 	movi	r2,1
   854b8:	003fbc06 	br	853ac <__alt_data_end+0xfffa53ac>
   854bc:	a80b883a 	mov	r5,r21
   854c0:	8009883a 	mov	r4,r16
   854c4:	008853c0 	call	8853c <__mcmp>
   854c8:	103edb0e 	bge	r2,zero,85038 <__alt_data_end+0xfffa5038>
   854cc:	800b883a 	mov	r5,r16
   854d0:	000f883a 	mov	r7,zero
   854d4:	01800284 	movi	r6,10
   854d8:	e009883a 	mov	r4,fp
   854dc:	0087c880 	call	87c88 <__multadd>
   854e0:	1021883a 	mov	r16,r2
   854e4:	d8800517 	ldw	r2,20(sp)
   854e8:	d8c00b17 	ldw	r3,44(sp)
   854ec:	10bfffc4 	addi	r2,r2,-1
   854f0:	d8800515 	stw	r2,20(sp)
   854f4:	183f761e 	bne	r3,zero,852d0 <__alt_data_end+0xfffa52d0>
   854f8:	d9000c17 	ldw	r4,48(sp)
   854fc:	0101730e 	bge	zero,r4,85acc <_dtoa_r+0x15cc>
   85500:	d9000615 	stw	r4,24(sp)
   85504:	003ed006 	br	85048 <__alt_data_end+0xfffa5048>
   85508:	00800084 	movi	r2,2
   8550c:	3081861e 	bne	r6,r2,85b28 <_dtoa_r+0x1628>
   85510:	d8000b15 	stw	zero,44(sp)
   85514:	003f3c06 	br	85208 <__alt_data_end+0xfffa5208>
   85518:	dc000917 	ldw	r16,36(sp)
   8551c:	003e9206 	br	84f68 <__alt_data_end+0xfffa4f68>
   85520:	d9c00317 	ldw	r7,12(sp)
   85524:	00800084 	movi	r2,2
   85528:	11fec50e 	bge	r2,r7,85040 <__alt_data_end+0xfffa5040>
   8552c:	d9000617 	ldw	r4,24(sp)
   85530:	20013c1e 	bne	r4,zero,85a24 <_dtoa_r+0x1524>
   85534:	a80b883a 	mov	r5,r21
   85538:	000f883a 	mov	r7,zero
   8553c:	01800144 	movi	r6,5
   85540:	e009883a 	mov	r4,fp
   85544:	0087c880 	call	87c88 <__multadd>
   85548:	100b883a 	mov	r5,r2
   8554c:	8009883a 	mov	r4,r16
   85550:	102b883a 	mov	r21,r2
   85554:	008853c0 	call	8853c <__mcmp>
   85558:	dc000915 	stw	r16,36(sp)
   8555c:	00bf410e 	bge	zero,r2,85264 <__alt_data_end+0xfffa5264>
   85560:	d9c00717 	ldw	r7,28(sp)
   85564:	00800c44 	movi	r2,49
   85568:	38800005 	stb	r2,0(r7)
   8556c:	d8800517 	ldw	r2,20(sp)
   85570:	3dc00044 	addi	r23,r7,1
   85574:	10800044 	addi	r2,r2,1
   85578:	d8800515 	stw	r2,20(sp)
   8557c:	003f3d06 	br	85274 <__alt_data_end+0xfffa5274>
   85580:	d9800517 	ldw	r6,20(sp)
   85584:	d9c00717 	ldw	r7,28(sp)
   85588:	00800c44 	movi	r2,49
   8558c:	31800044 	addi	r6,r6,1
   85590:	d9800515 	stw	r6,20(sp)
   85594:	38800005 	stb	r2,0(r7)
   85598:	003edf06 	br	85118 <__alt_data_end+0xfffa5118>
   8559c:	d8000b15 	stw	zero,44(sp)
   855a0:	003c9f06 	br	84820 <__alt_data_end+0xfffa4820>
   855a4:	903e7e1e 	bne	r18,zero,84fa0 <__alt_data_end+0xfffa4fa0>
   855a8:	00800434 	movhi	r2,16
   855ac:	10bfffc4 	addi	r2,r2,-1
   855b0:	9884703a 	and	r2,r19,r2
   855b4:	1000ea1e 	bne	r2,zero,85960 <_dtoa_r+0x1460>
   855b8:	9cdffc2c 	andhi	r19,r19,32752
   855bc:	9800e826 	beq	r19,zero,85960 <_dtoa_r+0x1460>
   855c0:	d9c00817 	ldw	r7,32(sp)
   855c4:	b5800044 	addi	r22,r22,1
   855c8:	04c00044 	movi	r19,1
   855cc:	39c00044 	addi	r7,r7,1
   855d0:	d9c00815 	stw	r7,32(sp)
   855d4:	d8800d17 	ldw	r2,52(sp)
   855d8:	103e721e 	bne	r2,zero,84fa4 <__alt_data_end+0xfffa4fa4>
   855dc:	00800044 	movi	r2,1
   855e0:	003e7906 	br	84fc8 <__alt_data_end+0xfffa4fc8>
   855e4:	8009883a 	mov	r4,r16
   855e8:	008e9e80 	call	8e9e8 <__floatsidf>
   855ec:	d9800f17 	ldw	r6,60(sp)
   855f0:	d9c01017 	ldw	r7,64(sp)
   855f4:	1009883a 	mov	r4,r2
   855f8:	180b883a 	mov	r5,r3
   855fc:	008d8000 	call	8d800 <__muldf3>
   85600:	000d883a 	mov	r6,zero
   85604:	01d00734 	movhi	r7,16412
   85608:	1009883a 	mov	r4,r2
   8560c:	180b883a 	mov	r5,r3
   85610:	008c32c0 	call	8c32c <__adddf3>
   85614:	047f3034 	movhi	r17,64704
   85618:	1021883a 	mov	r16,r2
   8561c:	1c63883a 	add	r17,r3,r17
   85620:	d9000f17 	ldw	r4,60(sp)
   85624:	d9401017 	ldw	r5,64(sp)
   85628:	000d883a 	mov	r6,zero
   8562c:	01d00534 	movhi	r7,16404
   85630:	008e06c0 	call	8e06c <__subdf3>
   85634:	800d883a 	mov	r6,r16
   85638:	880f883a 	mov	r7,r17
   8563c:	1009883a 	mov	r4,r2
   85640:	180b883a 	mov	r5,r3
   85644:	102b883a 	mov	r21,r2
   85648:	1829883a 	mov	r20,r3
   8564c:	008d6300 	call	8d630 <__gedf2>
   85650:	00806c16 	blt	zero,r2,85804 <_dtoa_r+0x1304>
   85654:	89e0003c 	xorhi	r7,r17,32768
   85658:	800d883a 	mov	r6,r16
   8565c:	a809883a 	mov	r4,r21
   85660:	a00b883a 	mov	r5,r20
   85664:	008d70c0 	call	8d70c <__ledf2>
   85668:	103d7e0e 	bge	r2,zero,84c64 <__alt_data_end+0xfffa4c64>
   8566c:	002b883a 	mov	r21,zero
   85670:	0023883a 	mov	r17,zero
   85674:	003efb06 	br	85264 <__alt_data_end+0xfffa5264>
   85678:	d8800717 	ldw	r2,28(sp)
   8567c:	003bd006 	br	845c0 <__alt_data_end+0xfffa45c0>
   85680:	d9000a17 	ldw	r4,40(sp)
   85684:	d9800d17 	ldw	r6,52(sp)
   85688:	dd400a15 	stw	r21,40(sp)
   8568c:	a905c83a 	sub	r2,r21,r4
   85690:	308d883a 	add	r6,r6,r2
   85694:	d9800d15 	stw	r6,52(sp)
   85698:	002b883a 	mov	r21,zero
   8569c:	003e0606 	br	84eb8 <__alt_data_end+0xfffa4eb8>
   856a0:	9023883a 	mov	r17,r18
   856a4:	9829883a 	mov	r20,r19
   856a8:	04000084 	movi	r16,2
   856ac:	003c9206 	br	848f8 <__alt_data_end+0xfffa48f8>
   856b0:	04000044 	movi	r16,1
   856b4:	dc000c15 	stw	r16,48(sp)
   856b8:	dc000615 	stw	r16,24(sp)
   856bc:	dc002215 	stw	r16,136(sp)
   856c0:	e0001115 	stw	zero,68(fp)
   856c4:	000b883a 	mov	r5,zero
   856c8:	003c6906 	br	84870 <__alt_data_end+0xfffa4870>
   856cc:	3021883a 	mov	r16,r6
   856d0:	003ffb06 	br	856c0 <__alt_data_end+0xfffa56c0>
   856d4:	1000021e 	bne	r2,zero,856e0 <_dtoa_r+0x11e0>
   856d8:	4200004c 	andi	r8,r8,1
   856dc:	403e7d1e 	bne	r8,zero,850d4 <__alt_data_end+0xfffa50d4>
   856e0:	01000c04 	movi	r4,48
   856e4:	00000106 	br	856ec <_dtoa_r+0x11ec>
   856e8:	102f883a 	mov	r23,r2
   856ec:	b8bfffc4 	addi	r2,r23,-1
   856f0:	10c00007 	ldb	r3,0(r2)
   856f4:	193ffc26 	beq	r3,r4,856e8 <__alt_data_end+0xfffa56e8>
   856f8:	003e8706 	br	85118 <__alt_data_end+0xfffa5118>
   856fc:	d8800517 	ldw	r2,20(sp)
   85700:	00a3c83a 	sub	r17,zero,r2
   85704:	8800a426 	beq	r17,zero,85998 <_dtoa_r+0x1498>
   85708:	888003cc 	andi	r2,r17,15
   8570c:	100490fa 	slli	r2,r2,3
   85710:	00c00274 	movhi	r3,9
   85714:	18c57d04 	addi	r3,r3,5620
   85718:	1885883a 	add	r2,r3,r2
   8571c:	11800017 	ldw	r6,0(r2)
   85720:	11c00117 	ldw	r7,4(r2)
   85724:	9009883a 	mov	r4,r18
   85728:	980b883a 	mov	r5,r19
   8572c:	8823d13a 	srai	r17,r17,4
   85730:	008d8000 	call	8d800 <__muldf3>
   85734:	d8800f15 	stw	r2,60(sp)
   85738:	d8c01015 	stw	r3,64(sp)
   8573c:	8800e826 	beq	r17,zero,85ae0 <_dtoa_r+0x15e0>
   85740:	05000274 	movhi	r20,9
   85744:	a5057304 	addi	r20,r20,5580
   85748:	04000084 	movi	r16,2
   8574c:	8980004c 	andi	r6,r17,1
   85750:	1009883a 	mov	r4,r2
   85754:	8823d07a 	srai	r17,r17,1
   85758:	180b883a 	mov	r5,r3
   8575c:	30000426 	beq	r6,zero,85770 <_dtoa_r+0x1270>
   85760:	a1800017 	ldw	r6,0(r20)
   85764:	a1c00117 	ldw	r7,4(r20)
   85768:	84000044 	addi	r16,r16,1
   8576c:	008d8000 	call	8d800 <__muldf3>
   85770:	a5000204 	addi	r20,r20,8
   85774:	883ff51e 	bne	r17,zero,8574c <__alt_data_end+0xfffa574c>
   85778:	d8800f15 	stw	r2,60(sp)
   8577c:	d8c01015 	stw	r3,64(sp)
   85780:	003c7606 	br	8495c <__alt_data_end+0xfffa495c>
   85784:	00c00c04 	movi	r3,48
   85788:	10c00005 	stb	r3,0(r2)
   8578c:	d8c00517 	ldw	r3,20(sp)
   85790:	bd3fffc3 	ldbu	r20,-1(r23)
   85794:	18c00044 	addi	r3,r3,1
   85798:	d8c00515 	stw	r3,20(sp)
   8579c:	003db906 	br	84e84 <__alt_data_end+0xfffa4e84>
   857a0:	89400117 	ldw	r5,4(r17)
   857a4:	e009883a 	mov	r4,fp
   857a8:	0087bb80 	call	87bb8 <_Balloc>
   857ac:	89800417 	ldw	r6,16(r17)
   857b0:	89400304 	addi	r5,r17,12
   857b4:	11000304 	addi	r4,r2,12
   857b8:	31800084 	addi	r6,r6,2
   857bc:	318d883a 	add	r6,r6,r6
   857c0:	318d883a 	add	r6,r6,r6
   857c4:	1027883a 	mov	r19,r2
   857c8:	00877ec0 	call	877ec <memcpy>
   857cc:	01800044 	movi	r6,1
   857d0:	980b883a 	mov	r5,r19
   857d4:	e009883a 	mov	r4,fp
   857d8:	00883f40 	call	883f4 <__lshift>
   857dc:	1029883a 	mov	r20,r2
   857e0:	003ecc06 	br	85314 <__alt_data_end+0xfffa5314>
   857e4:	00800e44 	movi	r2,57
   857e8:	90809026 	beq	r18,r2,85a2c <_dtoa_r+0x152c>
   857ec:	92000044 	addi	r8,r18,1
   857f0:	003f1f06 	br	85470 <__alt_data_end+0xfffa5470>
   857f4:	9011883a 	mov	r8,r18
   857f8:	8825883a 	mov	r18,r17
   857fc:	a023883a 	mov	r17,r20
   85800:	003e2906 	br	850a8 <__alt_data_end+0xfffa50a8>
   85804:	002b883a 	mov	r21,zero
   85808:	0023883a 	mov	r17,zero
   8580c:	003f5406 	br	85560 <__alt_data_end+0xfffa5560>
   85810:	61bfffc4 	addi	r6,r12,-1
   85814:	300490fa 	slli	r2,r6,3
   85818:	00c00274 	movhi	r3,9
   8581c:	18c57d04 	addi	r3,r3,5620
   85820:	1885883a 	add	r2,r3,r2
   85824:	11000017 	ldw	r4,0(r2)
   85828:	11400117 	ldw	r5,4(r2)
   8582c:	d8800717 	ldw	r2,28(sp)
   85830:	880f883a 	mov	r7,r17
   85834:	d9801215 	stw	r6,72(sp)
   85838:	800d883a 	mov	r6,r16
   8583c:	db001615 	stw	r12,88(sp)
   85840:	15c00044 	addi	r23,r2,1
   85844:	008d8000 	call	8d800 <__muldf3>
   85848:	d9401017 	ldw	r5,64(sp)
   8584c:	d9000f17 	ldw	r4,60(sp)
   85850:	d8c01515 	stw	r3,84(sp)
   85854:	d8801415 	stw	r2,80(sp)
   85858:	008e9680 	call	8e968 <__fixdfsi>
   8585c:	1009883a 	mov	r4,r2
   85860:	1021883a 	mov	r16,r2
   85864:	008e9e80 	call	8e9e8 <__floatsidf>
   85868:	d9000f17 	ldw	r4,60(sp)
   8586c:	d9401017 	ldw	r5,64(sp)
   85870:	100d883a 	mov	r6,r2
   85874:	180f883a 	mov	r7,r3
   85878:	008e06c0 	call	8e06c <__subdf3>
   8587c:	1829883a 	mov	r20,r3
   85880:	d8c00717 	ldw	r3,28(sp)
   85884:	84000c04 	addi	r16,r16,48
   85888:	1023883a 	mov	r17,r2
   8588c:	1c000005 	stb	r16,0(r3)
   85890:	db001617 	ldw	r12,88(sp)
   85894:	00800044 	movi	r2,1
   85898:	60802226 	beq	r12,r2,85924 <_dtoa_r+0x1424>
   8589c:	d9c00717 	ldw	r7,28(sp)
   858a0:	8805883a 	mov	r2,r17
   858a4:	b82b883a 	mov	r21,r23
   858a8:	3b19883a 	add	r12,r7,r12
   858ac:	6023883a 	mov	r17,r12
   858b0:	a007883a 	mov	r3,r20
   858b4:	dc800f15 	stw	r18,60(sp)
   858b8:	000d883a 	mov	r6,zero
   858bc:	01d00934 	movhi	r7,16420
   858c0:	1009883a 	mov	r4,r2
   858c4:	180b883a 	mov	r5,r3
   858c8:	008d8000 	call	8d800 <__muldf3>
   858cc:	180b883a 	mov	r5,r3
   858d0:	1009883a 	mov	r4,r2
   858d4:	1829883a 	mov	r20,r3
   858d8:	1025883a 	mov	r18,r2
   858dc:	008e9680 	call	8e968 <__fixdfsi>
   858e0:	1009883a 	mov	r4,r2
   858e4:	1021883a 	mov	r16,r2
   858e8:	008e9e80 	call	8e9e8 <__floatsidf>
   858ec:	100d883a 	mov	r6,r2
   858f0:	180f883a 	mov	r7,r3
   858f4:	9009883a 	mov	r4,r18
   858f8:	a00b883a 	mov	r5,r20
   858fc:	84000c04 	addi	r16,r16,48
   85900:	008e06c0 	call	8e06c <__subdf3>
   85904:	ad400044 	addi	r21,r21,1
   85908:	ac3fffc5 	stb	r16,-1(r21)
   8590c:	ac7fea1e 	bne	r21,r17,858b8 <__alt_data_end+0xfffa58b8>
   85910:	1023883a 	mov	r17,r2
   85914:	d8801217 	ldw	r2,72(sp)
   85918:	dc800f17 	ldw	r18,60(sp)
   8591c:	1829883a 	mov	r20,r3
   85920:	b8af883a 	add	r23,r23,r2
   85924:	d9001417 	ldw	r4,80(sp)
   85928:	d9401517 	ldw	r5,84(sp)
   8592c:	000d883a 	mov	r6,zero
   85930:	01cff834 	movhi	r7,16352
   85934:	008c32c0 	call	8c32c <__adddf3>
   85938:	880d883a 	mov	r6,r17
   8593c:	a00f883a 	mov	r7,r20
   85940:	1009883a 	mov	r4,r2
   85944:	180b883a 	mov	r5,r3
   85948:	008d70c0 	call	8d70c <__ledf2>
   8594c:	10003e0e 	bge	r2,zero,85a48 <_dtoa_r+0x1548>
   85950:	d9001317 	ldw	r4,76(sp)
   85954:	bd3fffc3 	ldbu	r20,-1(r23)
   85958:	d9000515 	stw	r4,20(sp)
   8595c:	003d3b06 	br	84e4c <__alt_data_end+0xfffa4e4c>
   85960:	0027883a 	mov	r19,zero
   85964:	003f1b06 	br	855d4 <__alt_data_end+0xfffa55d4>
   85968:	d8800817 	ldw	r2,32(sp)
   8596c:	11e9c83a 	sub	r20,r2,r7
   85970:	0005883a 	mov	r2,zero
   85974:	003d5406 	br	84ec8 <__alt_data_end+0xfffa4ec8>
   85978:	00800044 	movi	r2,1
   8597c:	003dc706 	br	8509c <__alt_data_end+0xfffa509c>
   85980:	d8c00217 	ldw	r3,8(sp)
   85984:	00800d84 	movi	r2,54
   85988:	dd400a17 	ldw	r21,40(sp)
   8598c:	10c5c83a 	sub	r2,r2,r3
   85990:	dd000817 	ldw	r20,32(sp)
   85994:	003d4c06 	br	84ec8 <__alt_data_end+0xfffa4ec8>
   85998:	dc800f15 	stw	r18,60(sp)
   8599c:	dcc01015 	stw	r19,64(sp)
   859a0:	04000084 	movi	r16,2
   859a4:	003bed06 	br	8495c <__alt_data_end+0xfffa495c>
   859a8:	d9000617 	ldw	r4,24(sp)
   859ac:	203f0d26 	beq	r4,zero,855e4 <__alt_data_end+0xfffa55e4>
   859b0:	d9800c17 	ldw	r6,48(sp)
   859b4:	01bcab0e 	bge	zero,r6,84c64 <__alt_data_end+0xfffa4c64>
   859b8:	d9401017 	ldw	r5,64(sp)
   859bc:	d9000f17 	ldw	r4,60(sp)
   859c0:	000d883a 	mov	r6,zero
   859c4:	01d00934 	movhi	r7,16420
   859c8:	008d8000 	call	8d800 <__muldf3>
   859cc:	81000044 	addi	r4,r16,1
   859d0:	d8800f15 	stw	r2,60(sp)
   859d4:	d8c01015 	stw	r3,64(sp)
   859d8:	008e9e80 	call	8e9e8 <__floatsidf>
   859dc:	d9800f17 	ldw	r6,60(sp)
   859e0:	d9c01017 	ldw	r7,64(sp)
   859e4:	1009883a 	mov	r4,r2
   859e8:	180b883a 	mov	r5,r3
   859ec:	008d8000 	call	8d800 <__muldf3>
   859f0:	01d00734 	movhi	r7,16412
   859f4:	000d883a 	mov	r6,zero
   859f8:	1009883a 	mov	r4,r2
   859fc:	180b883a 	mov	r5,r3
   85a00:	008c32c0 	call	8c32c <__adddf3>
   85a04:	d9c00517 	ldw	r7,20(sp)
   85a08:	047f3034 	movhi	r17,64704
   85a0c:	1021883a 	mov	r16,r2
   85a10:	39ffffc4 	addi	r7,r7,-1
   85a14:	d9c01315 	stw	r7,76(sp)
   85a18:	1c63883a 	add	r17,r3,r17
   85a1c:	db000c17 	ldw	r12,48(sp)
   85a20:	003bea06 	br	849cc <__alt_data_end+0xfffa49cc>
   85a24:	dc000915 	stw	r16,36(sp)
   85a28:	003e0e06 	br	85264 <__alt_data_end+0xfffa5264>
   85a2c:	01000e44 	movi	r4,57
   85a30:	8825883a 	mov	r18,r17
   85a34:	9dc00044 	addi	r23,r19,1
   85a38:	99000005 	stb	r4,0(r19)
   85a3c:	a023883a 	mov	r17,r20
   85a40:	dc000915 	stw	r16,36(sp)
   85a44:	003da406 	br	850d8 <__alt_data_end+0xfffa50d8>
   85a48:	d9801417 	ldw	r6,80(sp)
   85a4c:	d9c01517 	ldw	r7,84(sp)
   85a50:	0009883a 	mov	r4,zero
   85a54:	014ff834 	movhi	r5,16352
   85a58:	008e06c0 	call	8e06c <__subdf3>
   85a5c:	880d883a 	mov	r6,r17
   85a60:	a00f883a 	mov	r7,r20
   85a64:	1009883a 	mov	r4,r2
   85a68:	180b883a 	mov	r5,r3
   85a6c:	008d6300 	call	8d630 <__gedf2>
   85a70:	00bc7c0e 	bge	zero,r2,84c64 <__alt_data_end+0xfffa4c64>
   85a74:	01000c04 	movi	r4,48
   85a78:	00000106 	br	85a80 <_dtoa_r+0x1580>
   85a7c:	102f883a 	mov	r23,r2
   85a80:	b8bfffc4 	addi	r2,r23,-1
   85a84:	10c00007 	ldb	r3,0(r2)
   85a88:	193ffc26 	beq	r3,r4,85a7c <__alt_data_end+0xfffa5a7c>
   85a8c:	d9801317 	ldw	r6,76(sp)
   85a90:	d9800515 	stw	r6,20(sp)
   85a94:	003c4406 	br	84ba8 <__alt_data_end+0xfffa4ba8>
   85a98:	d9801317 	ldw	r6,76(sp)
   85a9c:	d9800515 	stw	r6,20(sp)
   85aa0:	003cea06 	br	84e4c <__alt_data_end+0xfffa4e4c>
   85aa4:	dd800f17 	ldw	r22,60(sp)
   85aa8:	dcc01017 	ldw	r19,64(sp)
   85aac:	dc801217 	ldw	r18,72(sp)
   85ab0:	003c6c06 	br	84c64 <__alt_data_end+0xfffa4c64>
   85ab4:	903e031e 	bne	r18,zero,852c4 <__alt_data_end+0xfffa52c4>
   85ab8:	003ebb06 	br	855a8 <__alt_data_end+0xfffa55a8>
   85abc:	103e6c1e 	bne	r2,zero,85470 <__alt_data_end+0xfffa5470>
   85ac0:	4080004c 	andi	r2,r8,1
   85ac4:	103e6a26 	beq	r2,zero,85470 <__alt_data_end+0xfffa5470>
   85ac8:	003e6606 	br	85464 <__alt_data_end+0xfffa5464>
   85acc:	d8c00317 	ldw	r3,12(sp)
   85ad0:	00800084 	movi	r2,2
   85ad4:	10c02916 	blt	r2,r3,85b7c <_dtoa_r+0x167c>
   85ad8:	d9000c17 	ldw	r4,48(sp)
   85adc:	003e8806 	br	85500 <__alt_data_end+0xfffa5500>
   85ae0:	04000084 	movi	r16,2
   85ae4:	003b9d06 	br	8495c <__alt_data_end+0xfffa495c>
   85ae8:	d9001317 	ldw	r4,76(sp)
   85aec:	d9000515 	stw	r4,20(sp)
   85af0:	003cd606 	br	84e4c <__alt_data_end+0xfffa4e4c>
   85af4:	d8801317 	ldw	r2,76(sp)
   85af8:	d8800515 	stw	r2,20(sp)
   85afc:	003c2a06 	br	84ba8 <__alt_data_end+0xfffa4ba8>
   85b00:	d9800317 	ldw	r6,12(sp)
   85b04:	00800084 	movi	r2,2
   85b08:	11801516 	blt	r2,r6,85b60 <_dtoa_r+0x1660>
   85b0c:	d9c00c17 	ldw	r7,48(sp)
   85b10:	d9c00615 	stw	r7,24(sp)
   85b14:	003df706 	br	852f4 <__alt_data_end+0xfffa52f4>
   85b18:	193d3926 	beq	r3,r4,85000 <__alt_data_end+0xfffa5000>
   85b1c:	00c00f04 	movi	r3,60
   85b20:	1885c83a 	sub	r2,r3,r2
   85b24:	003ddf06 	br	852a4 <__alt_data_end+0xfffa52a4>
   85b28:	e009883a 	mov	r4,fp
   85b2c:	e0001115 	stw	zero,68(fp)
   85b30:	000b883a 	mov	r5,zero
   85b34:	0087bb80 	call	87bb8 <_Balloc>
   85b38:	d8800715 	stw	r2,28(sp)
   85b3c:	d8c00717 	ldw	r3,28(sp)
   85b40:	00bfffc4 	movi	r2,-1
   85b44:	01000044 	movi	r4,1
   85b48:	d8800c15 	stw	r2,48(sp)
   85b4c:	e0c01015 	stw	r3,64(fp)
   85b50:	d9000b15 	stw	r4,44(sp)
   85b54:	d8800615 	stw	r2,24(sp)
   85b58:	d8002215 	stw	zero,136(sp)
   85b5c:	003c4106 	br	84c64 <__alt_data_end+0xfffa4c64>
   85b60:	d8c00c17 	ldw	r3,48(sp)
   85b64:	d8c00615 	stw	r3,24(sp)
   85b68:	003e7006 	br	8552c <__alt_data_end+0xfffa552c>
   85b6c:	04400044 	movi	r17,1
   85b70:	003b2006 	br	847f4 <__alt_data_end+0xfffa47f4>
   85b74:	000b883a 	mov	r5,zero
   85b78:	003b3d06 	br	84870 <__alt_data_end+0xfffa4870>
   85b7c:	d8800c17 	ldw	r2,48(sp)
   85b80:	d8800615 	stw	r2,24(sp)
   85b84:	003e6906 	br	8552c <__alt_data_end+0xfffa552c>

00085b88 <__sflush_r>:
   85b88:	2880030b 	ldhu	r2,12(r5)
   85b8c:	defffb04 	addi	sp,sp,-20
   85b90:	dcc00315 	stw	r19,12(sp)
   85b94:	dc400115 	stw	r17,4(sp)
   85b98:	dfc00415 	stw	ra,16(sp)
   85b9c:	dc800215 	stw	r18,8(sp)
   85ba0:	dc000015 	stw	r16,0(sp)
   85ba4:	10c0020c 	andi	r3,r2,8
   85ba8:	2823883a 	mov	r17,r5
   85bac:	2027883a 	mov	r19,r4
   85bb0:	1800311e 	bne	r3,zero,85c78 <__sflush_r+0xf0>
   85bb4:	28c00117 	ldw	r3,4(r5)
   85bb8:	10820014 	ori	r2,r2,2048
   85bbc:	2880030d 	sth	r2,12(r5)
   85bc0:	00c04b0e 	bge	zero,r3,85cf0 <__sflush_r+0x168>
   85bc4:	8a000a17 	ldw	r8,40(r17)
   85bc8:	40002326 	beq	r8,zero,85c58 <__sflush_r+0xd0>
   85bcc:	9c000017 	ldw	r16,0(r19)
   85bd0:	10c4000c 	andi	r3,r2,4096
   85bd4:	98000015 	stw	zero,0(r19)
   85bd8:	18004826 	beq	r3,zero,85cfc <__sflush_r+0x174>
   85bdc:	89801417 	ldw	r6,80(r17)
   85be0:	10c0010c 	andi	r3,r2,4
   85be4:	18000626 	beq	r3,zero,85c00 <__sflush_r+0x78>
   85be8:	88c00117 	ldw	r3,4(r17)
   85bec:	88800c17 	ldw	r2,48(r17)
   85bf0:	30cdc83a 	sub	r6,r6,r3
   85bf4:	10000226 	beq	r2,zero,85c00 <__sflush_r+0x78>
   85bf8:	88800f17 	ldw	r2,60(r17)
   85bfc:	308dc83a 	sub	r6,r6,r2
   85c00:	89400717 	ldw	r5,28(r17)
   85c04:	000f883a 	mov	r7,zero
   85c08:	9809883a 	mov	r4,r19
   85c0c:	403ee83a 	callr	r8
   85c10:	00ffffc4 	movi	r3,-1
   85c14:	10c04426 	beq	r2,r3,85d28 <__sflush_r+0x1a0>
   85c18:	88c0030b 	ldhu	r3,12(r17)
   85c1c:	89000417 	ldw	r4,16(r17)
   85c20:	88000115 	stw	zero,4(r17)
   85c24:	197dffcc 	andi	r5,r3,63487
   85c28:	8940030d 	sth	r5,12(r17)
   85c2c:	89000015 	stw	r4,0(r17)
   85c30:	18c4000c 	andi	r3,r3,4096
   85c34:	18002c1e 	bne	r3,zero,85ce8 <__sflush_r+0x160>
   85c38:	89400c17 	ldw	r5,48(r17)
   85c3c:	9c000015 	stw	r16,0(r19)
   85c40:	28000526 	beq	r5,zero,85c58 <__sflush_r+0xd0>
   85c44:	88801004 	addi	r2,r17,64
   85c48:	28800226 	beq	r5,r2,85c54 <__sflush_r+0xcc>
   85c4c:	9809883a 	mov	r4,r19
   85c50:	00863040 	call	86304 <_free_r>
   85c54:	88000c15 	stw	zero,48(r17)
   85c58:	0005883a 	mov	r2,zero
   85c5c:	dfc00417 	ldw	ra,16(sp)
   85c60:	dcc00317 	ldw	r19,12(sp)
   85c64:	dc800217 	ldw	r18,8(sp)
   85c68:	dc400117 	ldw	r17,4(sp)
   85c6c:	dc000017 	ldw	r16,0(sp)
   85c70:	dec00504 	addi	sp,sp,20
   85c74:	f800283a 	ret
   85c78:	2c800417 	ldw	r18,16(r5)
   85c7c:	903ff626 	beq	r18,zero,85c58 <__alt_data_end+0xfffa5c58>
   85c80:	2c000017 	ldw	r16,0(r5)
   85c84:	108000cc 	andi	r2,r2,3
   85c88:	2c800015 	stw	r18,0(r5)
   85c8c:	84a1c83a 	sub	r16,r16,r18
   85c90:	1000131e 	bne	r2,zero,85ce0 <__sflush_r+0x158>
   85c94:	28800517 	ldw	r2,20(r5)
   85c98:	88800215 	stw	r2,8(r17)
   85c9c:	04000316 	blt	zero,r16,85cac <__sflush_r+0x124>
   85ca0:	003fed06 	br	85c58 <__alt_data_end+0xfffa5c58>
   85ca4:	90a5883a 	add	r18,r18,r2
   85ca8:	043feb0e 	bge	zero,r16,85c58 <__alt_data_end+0xfffa5c58>
   85cac:	88800917 	ldw	r2,36(r17)
   85cb0:	89400717 	ldw	r5,28(r17)
   85cb4:	800f883a 	mov	r7,r16
   85cb8:	900d883a 	mov	r6,r18
   85cbc:	9809883a 	mov	r4,r19
   85cc0:	103ee83a 	callr	r2
   85cc4:	80a1c83a 	sub	r16,r16,r2
   85cc8:	00bff616 	blt	zero,r2,85ca4 <__alt_data_end+0xfffa5ca4>
   85ccc:	88c0030b 	ldhu	r3,12(r17)
   85cd0:	00bfffc4 	movi	r2,-1
   85cd4:	18c01014 	ori	r3,r3,64
   85cd8:	88c0030d 	sth	r3,12(r17)
   85cdc:	003fdf06 	br	85c5c <__alt_data_end+0xfffa5c5c>
   85ce0:	0005883a 	mov	r2,zero
   85ce4:	003fec06 	br	85c98 <__alt_data_end+0xfffa5c98>
   85ce8:	88801415 	stw	r2,80(r17)
   85cec:	003fd206 	br	85c38 <__alt_data_end+0xfffa5c38>
   85cf0:	28c00f17 	ldw	r3,60(r5)
   85cf4:	00ffb316 	blt	zero,r3,85bc4 <__alt_data_end+0xfffa5bc4>
   85cf8:	003fd706 	br	85c58 <__alt_data_end+0xfffa5c58>
   85cfc:	89400717 	ldw	r5,28(r17)
   85d00:	000d883a 	mov	r6,zero
   85d04:	01c00044 	movi	r7,1
   85d08:	9809883a 	mov	r4,r19
   85d0c:	403ee83a 	callr	r8
   85d10:	100d883a 	mov	r6,r2
   85d14:	00bfffc4 	movi	r2,-1
   85d18:	30801426 	beq	r6,r2,85d6c <__sflush_r+0x1e4>
   85d1c:	8880030b 	ldhu	r2,12(r17)
   85d20:	8a000a17 	ldw	r8,40(r17)
   85d24:	003fae06 	br	85be0 <__alt_data_end+0xfffa5be0>
   85d28:	98c00017 	ldw	r3,0(r19)
   85d2c:	183fba26 	beq	r3,zero,85c18 <__alt_data_end+0xfffa5c18>
   85d30:	01000744 	movi	r4,29
   85d34:	19000626 	beq	r3,r4,85d50 <__sflush_r+0x1c8>
   85d38:	01000584 	movi	r4,22
   85d3c:	19000426 	beq	r3,r4,85d50 <__sflush_r+0x1c8>
   85d40:	88c0030b 	ldhu	r3,12(r17)
   85d44:	18c01014 	ori	r3,r3,64
   85d48:	88c0030d 	sth	r3,12(r17)
   85d4c:	003fc306 	br	85c5c <__alt_data_end+0xfffa5c5c>
   85d50:	8880030b 	ldhu	r2,12(r17)
   85d54:	88c00417 	ldw	r3,16(r17)
   85d58:	88000115 	stw	zero,4(r17)
   85d5c:	10bdffcc 	andi	r2,r2,63487
   85d60:	8880030d 	sth	r2,12(r17)
   85d64:	88c00015 	stw	r3,0(r17)
   85d68:	003fb306 	br	85c38 <__alt_data_end+0xfffa5c38>
   85d6c:	98800017 	ldw	r2,0(r19)
   85d70:	103fea26 	beq	r2,zero,85d1c <__alt_data_end+0xfffa5d1c>
   85d74:	00c00744 	movi	r3,29
   85d78:	10c00226 	beq	r2,r3,85d84 <__sflush_r+0x1fc>
   85d7c:	00c00584 	movi	r3,22
   85d80:	10c0031e 	bne	r2,r3,85d90 <__sflush_r+0x208>
   85d84:	9c000015 	stw	r16,0(r19)
   85d88:	0005883a 	mov	r2,zero
   85d8c:	003fb306 	br	85c5c <__alt_data_end+0xfffa5c5c>
   85d90:	88c0030b 	ldhu	r3,12(r17)
   85d94:	3005883a 	mov	r2,r6
   85d98:	18c01014 	ori	r3,r3,64
   85d9c:	88c0030d 	sth	r3,12(r17)
   85da0:	003fae06 	br	85c5c <__alt_data_end+0xfffa5c5c>

00085da4 <_fflush_r>:
   85da4:	defffd04 	addi	sp,sp,-12
   85da8:	dc000115 	stw	r16,4(sp)
   85dac:	dfc00215 	stw	ra,8(sp)
   85db0:	2021883a 	mov	r16,r4
   85db4:	20000226 	beq	r4,zero,85dc0 <_fflush_r+0x1c>
   85db8:	20800e17 	ldw	r2,56(r4)
   85dbc:	10000c26 	beq	r2,zero,85df0 <_fflush_r+0x4c>
   85dc0:	2880030f 	ldh	r2,12(r5)
   85dc4:	1000051e 	bne	r2,zero,85ddc <_fflush_r+0x38>
   85dc8:	0005883a 	mov	r2,zero
   85dcc:	dfc00217 	ldw	ra,8(sp)
   85dd0:	dc000117 	ldw	r16,4(sp)
   85dd4:	dec00304 	addi	sp,sp,12
   85dd8:	f800283a 	ret
   85ddc:	8009883a 	mov	r4,r16
   85de0:	dfc00217 	ldw	ra,8(sp)
   85de4:	dc000117 	ldw	r16,4(sp)
   85de8:	dec00304 	addi	sp,sp,12
   85dec:	0085b881 	jmpi	85b88 <__sflush_r>
   85df0:	d9400015 	stw	r5,0(sp)
   85df4:	00861900 	call	86190 <__sinit>
   85df8:	d9400017 	ldw	r5,0(sp)
   85dfc:	003ff006 	br	85dc0 <__alt_data_end+0xfffa5dc0>

00085e00 <fflush>:
   85e00:	20000526 	beq	r4,zero,85e18 <fflush+0x18>
   85e04:	00800274 	movhi	r2,9
   85e08:	108f7e04 	addi	r2,r2,15864
   85e0c:	200b883a 	mov	r5,r4
   85e10:	11000017 	ldw	r4,0(r2)
   85e14:	0085da41 	jmpi	85da4 <_fflush_r>
   85e18:	00800274 	movhi	r2,9
   85e1c:	108f7d04 	addi	r2,r2,15860
   85e20:	11000017 	ldw	r4,0(r2)
   85e24:	01400234 	movhi	r5,8
   85e28:	29576904 	addi	r5,r5,23972
   85e2c:	0086ba01 	jmpi	86ba0 <_fwalk_reent>

00085e30 <__fp_unlock>:
   85e30:	0005883a 	mov	r2,zero
   85e34:	f800283a 	ret

00085e38 <_cleanup_r>:
   85e38:	01400274 	movhi	r5,9
   85e3c:	296bff04 	addi	r5,r5,-20484
   85e40:	0086ba01 	jmpi	86ba0 <_fwalk_reent>

00085e44 <__sinit.part.1>:
   85e44:	defff704 	addi	sp,sp,-36
   85e48:	00c00234 	movhi	r3,8
   85e4c:	dfc00815 	stw	ra,32(sp)
   85e50:	ddc00715 	stw	r23,28(sp)
   85e54:	dd800615 	stw	r22,24(sp)
   85e58:	dd400515 	stw	r21,20(sp)
   85e5c:	dd000415 	stw	r20,16(sp)
   85e60:	dcc00315 	stw	r19,12(sp)
   85e64:	dc800215 	stw	r18,8(sp)
   85e68:	dc400115 	stw	r17,4(sp)
   85e6c:	dc000015 	stw	r16,0(sp)
   85e70:	18d78e04 	addi	r3,r3,24120
   85e74:	24000117 	ldw	r16,4(r4)
   85e78:	20c00f15 	stw	r3,60(r4)
   85e7c:	2080bb04 	addi	r2,r4,748
   85e80:	00c000c4 	movi	r3,3
   85e84:	20c0b915 	stw	r3,740(r4)
   85e88:	2080ba15 	stw	r2,744(r4)
   85e8c:	2000b815 	stw	zero,736(r4)
   85e90:	05c00204 	movi	r23,8
   85e94:	00800104 	movi	r2,4
   85e98:	2025883a 	mov	r18,r4
   85e9c:	b80d883a 	mov	r6,r23
   85ea0:	81001704 	addi	r4,r16,92
   85ea4:	000b883a 	mov	r5,zero
   85ea8:	80000015 	stw	zero,0(r16)
   85eac:	80000115 	stw	zero,4(r16)
   85eb0:	80000215 	stw	zero,8(r16)
   85eb4:	8080030d 	sth	r2,12(r16)
   85eb8:	80001915 	stw	zero,100(r16)
   85ebc:	8000038d 	sth	zero,14(r16)
   85ec0:	80000415 	stw	zero,16(r16)
   85ec4:	80000515 	stw	zero,20(r16)
   85ec8:	80000615 	stw	zero,24(r16)
   85ecc:	0087a900 	call	87a90 <memset>
   85ed0:	05800274 	movhi	r22,9
   85ed4:	94400217 	ldw	r17,8(r18)
   85ed8:	05400274 	movhi	r21,9
   85edc:	05000274 	movhi	r20,9
   85ee0:	04c00274 	movhi	r19,9
   85ee4:	b5a50104 	addi	r22,r22,-27644
   85ee8:	ad651804 	addi	r21,r21,-27552
   85eec:	a5253704 	addi	r20,r20,-27428
   85ef0:	9ce54e04 	addi	r19,r19,-27336
   85ef4:	85800815 	stw	r22,32(r16)
   85ef8:	85400915 	stw	r21,36(r16)
   85efc:	85000a15 	stw	r20,40(r16)
   85f00:	84c00b15 	stw	r19,44(r16)
   85f04:	84000715 	stw	r16,28(r16)
   85f08:	00800284 	movi	r2,10
   85f0c:	8880030d 	sth	r2,12(r17)
   85f10:	00800044 	movi	r2,1
   85f14:	b80d883a 	mov	r6,r23
   85f18:	89001704 	addi	r4,r17,92
   85f1c:	000b883a 	mov	r5,zero
   85f20:	88000015 	stw	zero,0(r17)
   85f24:	88000115 	stw	zero,4(r17)
   85f28:	88000215 	stw	zero,8(r17)
   85f2c:	88001915 	stw	zero,100(r17)
   85f30:	8880038d 	sth	r2,14(r17)
   85f34:	88000415 	stw	zero,16(r17)
   85f38:	88000515 	stw	zero,20(r17)
   85f3c:	88000615 	stw	zero,24(r17)
   85f40:	0087a900 	call	87a90 <memset>
   85f44:	94000317 	ldw	r16,12(r18)
   85f48:	00800484 	movi	r2,18
   85f4c:	8c400715 	stw	r17,28(r17)
   85f50:	8d800815 	stw	r22,32(r17)
   85f54:	8d400915 	stw	r21,36(r17)
   85f58:	8d000a15 	stw	r20,40(r17)
   85f5c:	8cc00b15 	stw	r19,44(r17)
   85f60:	8080030d 	sth	r2,12(r16)
   85f64:	00800084 	movi	r2,2
   85f68:	80000015 	stw	zero,0(r16)
   85f6c:	80000115 	stw	zero,4(r16)
   85f70:	80000215 	stw	zero,8(r16)
   85f74:	80001915 	stw	zero,100(r16)
   85f78:	8080038d 	sth	r2,14(r16)
   85f7c:	80000415 	stw	zero,16(r16)
   85f80:	80000515 	stw	zero,20(r16)
   85f84:	80000615 	stw	zero,24(r16)
   85f88:	b80d883a 	mov	r6,r23
   85f8c:	000b883a 	mov	r5,zero
   85f90:	81001704 	addi	r4,r16,92
   85f94:	0087a900 	call	87a90 <memset>
   85f98:	00800044 	movi	r2,1
   85f9c:	84000715 	stw	r16,28(r16)
   85fa0:	85800815 	stw	r22,32(r16)
   85fa4:	85400915 	stw	r21,36(r16)
   85fa8:	85000a15 	stw	r20,40(r16)
   85fac:	84c00b15 	stw	r19,44(r16)
   85fb0:	90800e15 	stw	r2,56(r18)
   85fb4:	dfc00817 	ldw	ra,32(sp)
   85fb8:	ddc00717 	ldw	r23,28(sp)
   85fbc:	dd800617 	ldw	r22,24(sp)
   85fc0:	dd400517 	ldw	r21,20(sp)
   85fc4:	dd000417 	ldw	r20,16(sp)
   85fc8:	dcc00317 	ldw	r19,12(sp)
   85fcc:	dc800217 	ldw	r18,8(sp)
   85fd0:	dc400117 	ldw	r17,4(sp)
   85fd4:	dc000017 	ldw	r16,0(sp)
   85fd8:	dec00904 	addi	sp,sp,36
   85fdc:	f800283a 	ret

00085fe0 <__fp_lock>:
   85fe0:	0005883a 	mov	r2,zero
   85fe4:	f800283a 	ret

00085fe8 <__sfmoreglue>:
   85fe8:	defffc04 	addi	sp,sp,-16
   85fec:	dc800215 	stw	r18,8(sp)
   85ff0:	2825883a 	mov	r18,r5
   85ff4:	dc000015 	stw	r16,0(sp)
   85ff8:	01401a04 	movi	r5,104
   85ffc:	2021883a 	mov	r16,r4
   86000:	913fffc4 	addi	r4,r18,-1
   86004:	dfc00315 	stw	ra,12(sp)
   86008:	dc400115 	stw	r17,4(sp)
   8600c:	0081b340 	call	81b34 <__mulsi3>
   86010:	8009883a 	mov	r4,r16
   86014:	11401d04 	addi	r5,r2,116
   86018:	1023883a 	mov	r17,r2
   8601c:	0086efc0 	call	86efc <_malloc_r>
   86020:	1021883a 	mov	r16,r2
   86024:	10000726 	beq	r2,zero,86044 <__sfmoreglue+0x5c>
   86028:	11000304 	addi	r4,r2,12
   8602c:	10000015 	stw	zero,0(r2)
   86030:	14800115 	stw	r18,4(r2)
   86034:	11000215 	stw	r4,8(r2)
   86038:	89801a04 	addi	r6,r17,104
   8603c:	000b883a 	mov	r5,zero
   86040:	0087a900 	call	87a90 <memset>
   86044:	8005883a 	mov	r2,r16
   86048:	dfc00317 	ldw	ra,12(sp)
   8604c:	dc800217 	ldw	r18,8(sp)
   86050:	dc400117 	ldw	r17,4(sp)
   86054:	dc000017 	ldw	r16,0(sp)
   86058:	dec00404 	addi	sp,sp,16
   8605c:	f800283a 	ret

00086060 <__sfp>:
   86060:	defffb04 	addi	sp,sp,-20
   86064:	dc000015 	stw	r16,0(sp)
   86068:	04000274 	movhi	r16,9
   8606c:	840f7d04 	addi	r16,r16,15860
   86070:	dcc00315 	stw	r19,12(sp)
   86074:	2027883a 	mov	r19,r4
   86078:	81000017 	ldw	r4,0(r16)
   8607c:	dfc00415 	stw	ra,16(sp)
   86080:	dc800215 	stw	r18,8(sp)
   86084:	20800e17 	ldw	r2,56(r4)
   86088:	dc400115 	stw	r17,4(sp)
   8608c:	1000021e 	bne	r2,zero,86098 <__sfp+0x38>
   86090:	0085e440 	call	85e44 <__sinit.part.1>
   86094:	81000017 	ldw	r4,0(r16)
   86098:	2480b804 	addi	r18,r4,736
   8609c:	047fffc4 	movi	r17,-1
   860a0:	91000117 	ldw	r4,4(r18)
   860a4:	94000217 	ldw	r16,8(r18)
   860a8:	213fffc4 	addi	r4,r4,-1
   860ac:	20000a16 	blt	r4,zero,860d8 <__sfp+0x78>
   860b0:	8080030f 	ldh	r2,12(r16)
   860b4:	10000c26 	beq	r2,zero,860e8 <__sfp+0x88>
   860b8:	80c01d04 	addi	r3,r16,116
   860bc:	00000206 	br	860c8 <__sfp+0x68>
   860c0:	18bfe60f 	ldh	r2,-104(r3)
   860c4:	10000826 	beq	r2,zero,860e8 <__sfp+0x88>
   860c8:	213fffc4 	addi	r4,r4,-1
   860cc:	1c3ffd04 	addi	r16,r3,-12
   860d0:	18c01a04 	addi	r3,r3,104
   860d4:	247ffa1e 	bne	r4,r17,860c0 <__alt_data_end+0xfffa60c0>
   860d8:	90800017 	ldw	r2,0(r18)
   860dc:	10001d26 	beq	r2,zero,86154 <__sfp+0xf4>
   860e0:	1025883a 	mov	r18,r2
   860e4:	003fee06 	br	860a0 <__alt_data_end+0xfffa60a0>
   860e8:	00bfffc4 	movi	r2,-1
   860ec:	8080038d 	sth	r2,14(r16)
   860f0:	00800044 	movi	r2,1
   860f4:	8080030d 	sth	r2,12(r16)
   860f8:	80001915 	stw	zero,100(r16)
   860fc:	80000015 	stw	zero,0(r16)
   86100:	80000215 	stw	zero,8(r16)
   86104:	80000115 	stw	zero,4(r16)
   86108:	80000415 	stw	zero,16(r16)
   8610c:	80000515 	stw	zero,20(r16)
   86110:	80000615 	stw	zero,24(r16)
   86114:	01800204 	movi	r6,8
   86118:	000b883a 	mov	r5,zero
   8611c:	81001704 	addi	r4,r16,92
   86120:	0087a900 	call	87a90 <memset>
   86124:	8005883a 	mov	r2,r16
   86128:	80000c15 	stw	zero,48(r16)
   8612c:	80000d15 	stw	zero,52(r16)
   86130:	80001115 	stw	zero,68(r16)
   86134:	80001215 	stw	zero,72(r16)
   86138:	dfc00417 	ldw	ra,16(sp)
   8613c:	dcc00317 	ldw	r19,12(sp)
   86140:	dc800217 	ldw	r18,8(sp)
   86144:	dc400117 	ldw	r17,4(sp)
   86148:	dc000017 	ldw	r16,0(sp)
   8614c:	dec00504 	addi	sp,sp,20
   86150:	f800283a 	ret
   86154:	01400104 	movi	r5,4
   86158:	9809883a 	mov	r4,r19
   8615c:	0085fe80 	call	85fe8 <__sfmoreglue>
   86160:	90800015 	stw	r2,0(r18)
   86164:	103fde1e 	bne	r2,zero,860e0 <__alt_data_end+0xfffa60e0>
   86168:	00800304 	movi	r2,12
   8616c:	98800015 	stw	r2,0(r19)
   86170:	0005883a 	mov	r2,zero
   86174:	003ff006 	br	86138 <__alt_data_end+0xfffa6138>

00086178 <_cleanup>:
   86178:	00800274 	movhi	r2,9
   8617c:	108f7d04 	addi	r2,r2,15860
   86180:	11000017 	ldw	r4,0(r2)
   86184:	01400274 	movhi	r5,9
   86188:	296bff04 	addi	r5,r5,-20484
   8618c:	0086ba01 	jmpi	86ba0 <_fwalk_reent>

00086190 <__sinit>:
   86190:	20800e17 	ldw	r2,56(r4)
   86194:	10000126 	beq	r2,zero,8619c <__sinit+0xc>
   86198:	f800283a 	ret
   8619c:	0085e441 	jmpi	85e44 <__sinit.part.1>

000861a0 <__sfp_lock_acquire>:
   861a0:	f800283a 	ret

000861a4 <__sfp_lock_release>:
   861a4:	f800283a 	ret

000861a8 <__sinit_lock_acquire>:
   861a8:	f800283a 	ret

000861ac <__sinit_lock_release>:
   861ac:	f800283a 	ret

000861b0 <__fp_lock_all>:
   861b0:	00800274 	movhi	r2,9
   861b4:	108f7e04 	addi	r2,r2,15864
   861b8:	11000017 	ldw	r4,0(r2)
   861bc:	01400234 	movhi	r5,8
   861c0:	2957f804 	addi	r5,r5,24544
   861c4:	0086adc1 	jmpi	86adc <_fwalk>

000861c8 <__fp_unlock_all>:
   861c8:	00800274 	movhi	r2,9
   861cc:	108f7e04 	addi	r2,r2,15864
   861d0:	11000017 	ldw	r4,0(r2)
   861d4:	01400234 	movhi	r5,8
   861d8:	29578c04 	addi	r5,r5,24112
   861dc:	0086adc1 	jmpi	86adc <_fwalk>

000861e0 <_malloc_trim_r>:
   861e0:	defffb04 	addi	sp,sp,-20
   861e4:	dcc00315 	stw	r19,12(sp)
   861e8:	04c00274 	movhi	r19,9
   861ec:	dc800215 	stw	r18,8(sp)
   861f0:	dc400115 	stw	r17,4(sp)
   861f4:	dc000015 	stw	r16,0(sp)
   861f8:	dfc00415 	stw	ra,16(sp)
   861fc:	2821883a 	mov	r16,r5
   86200:	9cc9f904 	addi	r19,r19,10212
   86204:	2025883a 	mov	r18,r4
   86208:	008f16c0 	call	8f16c <__malloc_lock>
   8620c:	98800217 	ldw	r2,8(r19)
   86210:	14400117 	ldw	r17,4(r2)
   86214:	00bfff04 	movi	r2,-4
   86218:	88a2703a 	and	r17,r17,r2
   8621c:	8c21c83a 	sub	r16,r17,r16
   86220:	8403fbc4 	addi	r16,r16,4079
   86224:	8020d33a 	srli	r16,r16,12
   86228:	0083ffc4 	movi	r2,4095
   8622c:	843fffc4 	addi	r16,r16,-1
   86230:	8020933a 	slli	r16,r16,12
   86234:	1400060e 	bge	r2,r16,86250 <_malloc_trim_r+0x70>
   86238:	000b883a 	mov	r5,zero
   8623c:	9009883a 	mov	r4,r18
   86240:	00893b00 	call	893b0 <_sbrk_r>
   86244:	98c00217 	ldw	r3,8(r19)
   86248:	1c47883a 	add	r3,r3,r17
   8624c:	10c00a26 	beq	r2,r3,86278 <_malloc_trim_r+0x98>
   86250:	9009883a 	mov	r4,r18
   86254:	008f1900 	call	8f190 <__malloc_unlock>
   86258:	0005883a 	mov	r2,zero
   8625c:	dfc00417 	ldw	ra,16(sp)
   86260:	dcc00317 	ldw	r19,12(sp)
   86264:	dc800217 	ldw	r18,8(sp)
   86268:	dc400117 	ldw	r17,4(sp)
   8626c:	dc000017 	ldw	r16,0(sp)
   86270:	dec00504 	addi	sp,sp,20
   86274:	f800283a 	ret
   86278:	040bc83a 	sub	r5,zero,r16
   8627c:	9009883a 	mov	r4,r18
   86280:	00893b00 	call	893b0 <_sbrk_r>
   86284:	00ffffc4 	movi	r3,-1
   86288:	10c00d26 	beq	r2,r3,862c0 <_malloc_trim_r+0xe0>
   8628c:	00c00274 	movhi	r3,9
   86290:	18d92604 	addi	r3,r3,25752
   86294:	18800017 	ldw	r2,0(r3)
   86298:	99000217 	ldw	r4,8(r19)
   8629c:	8c23c83a 	sub	r17,r17,r16
   862a0:	8c400054 	ori	r17,r17,1
   862a4:	1421c83a 	sub	r16,r2,r16
   862a8:	24400115 	stw	r17,4(r4)
   862ac:	9009883a 	mov	r4,r18
   862b0:	1c000015 	stw	r16,0(r3)
   862b4:	008f1900 	call	8f190 <__malloc_unlock>
   862b8:	00800044 	movi	r2,1
   862bc:	003fe706 	br	8625c <__alt_data_end+0xfffa625c>
   862c0:	000b883a 	mov	r5,zero
   862c4:	9009883a 	mov	r4,r18
   862c8:	00893b00 	call	893b0 <_sbrk_r>
   862cc:	99000217 	ldw	r4,8(r19)
   862d0:	014003c4 	movi	r5,15
   862d4:	1107c83a 	sub	r3,r2,r4
   862d8:	28ffdd0e 	bge	r5,r3,86250 <__alt_data_end+0xfffa6250>
   862dc:	01400274 	movhi	r5,9
   862e0:	294f8004 	addi	r5,r5,15872
   862e4:	29400017 	ldw	r5,0(r5)
   862e8:	18c00054 	ori	r3,r3,1
   862ec:	20c00115 	stw	r3,4(r4)
   862f0:	00c00274 	movhi	r3,9
   862f4:	1145c83a 	sub	r2,r2,r5
   862f8:	18d92604 	addi	r3,r3,25752
   862fc:	18800015 	stw	r2,0(r3)
   86300:	003fd306 	br	86250 <__alt_data_end+0xfffa6250>

00086304 <_free_r>:
   86304:	28004126 	beq	r5,zero,8640c <_free_r+0x108>
   86308:	defffd04 	addi	sp,sp,-12
   8630c:	dc400115 	stw	r17,4(sp)
   86310:	dc000015 	stw	r16,0(sp)
   86314:	2023883a 	mov	r17,r4
   86318:	2821883a 	mov	r16,r5
   8631c:	dfc00215 	stw	ra,8(sp)
   86320:	008f16c0 	call	8f16c <__malloc_lock>
   86324:	81ffff17 	ldw	r7,-4(r16)
   86328:	00bfff84 	movi	r2,-2
   8632c:	01000274 	movhi	r4,9
   86330:	81bffe04 	addi	r6,r16,-8
   86334:	3884703a 	and	r2,r7,r2
   86338:	2109f904 	addi	r4,r4,10212
   8633c:	308b883a 	add	r5,r6,r2
   86340:	2a400117 	ldw	r9,4(r5)
   86344:	22000217 	ldw	r8,8(r4)
   86348:	00ffff04 	movi	r3,-4
   8634c:	48c6703a 	and	r3,r9,r3
   86350:	2a005726 	beq	r5,r8,864b0 <_free_r+0x1ac>
   86354:	28c00115 	stw	r3,4(r5)
   86358:	39c0004c 	andi	r7,r7,1
   8635c:	3800091e 	bne	r7,zero,86384 <_free_r+0x80>
   86360:	823ffe17 	ldw	r8,-8(r16)
   86364:	22400204 	addi	r9,r4,8
   86368:	320dc83a 	sub	r6,r6,r8
   8636c:	31c00217 	ldw	r7,8(r6)
   86370:	1205883a 	add	r2,r2,r8
   86374:	3a406526 	beq	r7,r9,8650c <_free_r+0x208>
   86378:	32000317 	ldw	r8,12(r6)
   8637c:	3a000315 	stw	r8,12(r7)
   86380:	41c00215 	stw	r7,8(r8)
   86384:	28cf883a 	add	r7,r5,r3
   86388:	39c00117 	ldw	r7,4(r7)
   8638c:	39c0004c 	andi	r7,r7,1
   86390:	38003a26 	beq	r7,zero,8647c <_free_r+0x178>
   86394:	10c00054 	ori	r3,r2,1
   86398:	30c00115 	stw	r3,4(r6)
   8639c:	3087883a 	add	r3,r6,r2
   863a0:	18800015 	stw	r2,0(r3)
   863a4:	00c07fc4 	movi	r3,511
   863a8:	18801936 	bltu	r3,r2,86410 <_free_r+0x10c>
   863ac:	1004d0fa 	srli	r2,r2,3
   863b0:	01c00044 	movi	r7,1
   863b4:	21400117 	ldw	r5,4(r4)
   863b8:	10c00044 	addi	r3,r2,1
   863bc:	18c7883a 	add	r3,r3,r3
   863c0:	1005d0ba 	srai	r2,r2,2
   863c4:	18c7883a 	add	r3,r3,r3
   863c8:	18c7883a 	add	r3,r3,r3
   863cc:	1907883a 	add	r3,r3,r4
   863d0:	3884983a 	sll	r2,r7,r2
   863d4:	19c00017 	ldw	r7,0(r3)
   863d8:	1a3ffe04 	addi	r8,r3,-8
   863dc:	1144b03a 	or	r2,r2,r5
   863e0:	32000315 	stw	r8,12(r6)
   863e4:	31c00215 	stw	r7,8(r6)
   863e8:	20800115 	stw	r2,4(r4)
   863ec:	19800015 	stw	r6,0(r3)
   863f0:	39800315 	stw	r6,12(r7)
   863f4:	8809883a 	mov	r4,r17
   863f8:	dfc00217 	ldw	ra,8(sp)
   863fc:	dc400117 	ldw	r17,4(sp)
   86400:	dc000017 	ldw	r16,0(sp)
   86404:	dec00304 	addi	sp,sp,12
   86408:	008f1901 	jmpi	8f190 <__malloc_unlock>
   8640c:	f800283a 	ret
   86410:	100ad27a 	srli	r5,r2,9
   86414:	00c00104 	movi	r3,4
   86418:	19404a36 	bltu	r3,r5,86544 <_free_r+0x240>
   8641c:	100ad1ba 	srli	r5,r2,6
   86420:	28c00e44 	addi	r3,r5,57
   86424:	18c7883a 	add	r3,r3,r3
   86428:	29400e04 	addi	r5,r5,56
   8642c:	18c7883a 	add	r3,r3,r3
   86430:	18c7883a 	add	r3,r3,r3
   86434:	1909883a 	add	r4,r3,r4
   86438:	20c00017 	ldw	r3,0(r4)
   8643c:	01c00274 	movhi	r7,9
   86440:	213ffe04 	addi	r4,r4,-8
   86444:	39c9f904 	addi	r7,r7,10212
   86448:	20c04426 	beq	r4,r3,8655c <_free_r+0x258>
   8644c:	01ffff04 	movi	r7,-4
   86450:	19400117 	ldw	r5,4(r3)
   86454:	29ca703a 	and	r5,r5,r7
   86458:	1140022e 	bgeu	r2,r5,86464 <_free_r+0x160>
   8645c:	18c00217 	ldw	r3,8(r3)
   86460:	20fffb1e 	bne	r4,r3,86450 <__alt_data_end+0xfffa6450>
   86464:	19000317 	ldw	r4,12(r3)
   86468:	31000315 	stw	r4,12(r6)
   8646c:	30c00215 	stw	r3,8(r6)
   86470:	21800215 	stw	r6,8(r4)
   86474:	19800315 	stw	r6,12(r3)
   86478:	003fde06 	br	863f4 <__alt_data_end+0xfffa63f4>
   8647c:	29c00217 	ldw	r7,8(r5)
   86480:	10c5883a 	add	r2,r2,r3
   86484:	00c00274 	movhi	r3,9
   86488:	18c9fb04 	addi	r3,r3,10220
   8648c:	38c03b26 	beq	r7,r3,8657c <_free_r+0x278>
   86490:	2a000317 	ldw	r8,12(r5)
   86494:	11400054 	ori	r5,r2,1
   86498:	3087883a 	add	r3,r6,r2
   8649c:	3a000315 	stw	r8,12(r7)
   864a0:	41c00215 	stw	r7,8(r8)
   864a4:	31400115 	stw	r5,4(r6)
   864a8:	18800015 	stw	r2,0(r3)
   864ac:	003fbd06 	br	863a4 <__alt_data_end+0xfffa63a4>
   864b0:	39c0004c 	andi	r7,r7,1
   864b4:	10c5883a 	add	r2,r2,r3
   864b8:	3800071e 	bne	r7,zero,864d8 <_free_r+0x1d4>
   864bc:	81fffe17 	ldw	r7,-8(r16)
   864c0:	31cdc83a 	sub	r6,r6,r7
   864c4:	30c00317 	ldw	r3,12(r6)
   864c8:	31400217 	ldw	r5,8(r6)
   864cc:	11c5883a 	add	r2,r2,r7
   864d0:	28c00315 	stw	r3,12(r5)
   864d4:	19400215 	stw	r5,8(r3)
   864d8:	10c00054 	ori	r3,r2,1
   864dc:	30c00115 	stw	r3,4(r6)
   864e0:	00c00274 	movhi	r3,9
   864e4:	18cf8104 	addi	r3,r3,15876
   864e8:	18c00017 	ldw	r3,0(r3)
   864ec:	21800215 	stw	r6,8(r4)
   864f0:	10ffc036 	bltu	r2,r3,863f4 <__alt_data_end+0xfffa63f4>
   864f4:	00800274 	movhi	r2,9
   864f8:	10991d04 	addi	r2,r2,25716
   864fc:	11400017 	ldw	r5,0(r2)
   86500:	8809883a 	mov	r4,r17
   86504:	00861e00 	call	861e0 <_malloc_trim_r>
   86508:	003fba06 	br	863f4 <__alt_data_end+0xfffa63f4>
   8650c:	28c9883a 	add	r4,r5,r3
   86510:	21000117 	ldw	r4,4(r4)
   86514:	2100004c 	andi	r4,r4,1
   86518:	2000391e 	bne	r4,zero,86600 <_free_r+0x2fc>
   8651c:	29c00217 	ldw	r7,8(r5)
   86520:	29000317 	ldw	r4,12(r5)
   86524:	1885883a 	add	r2,r3,r2
   86528:	10c00054 	ori	r3,r2,1
   8652c:	39000315 	stw	r4,12(r7)
   86530:	21c00215 	stw	r7,8(r4)
   86534:	30c00115 	stw	r3,4(r6)
   86538:	308d883a 	add	r6,r6,r2
   8653c:	30800015 	stw	r2,0(r6)
   86540:	003fac06 	br	863f4 <__alt_data_end+0xfffa63f4>
   86544:	00c00504 	movi	r3,20
   86548:	19401536 	bltu	r3,r5,865a0 <_free_r+0x29c>
   8654c:	28c01704 	addi	r3,r5,92
   86550:	18c7883a 	add	r3,r3,r3
   86554:	294016c4 	addi	r5,r5,91
   86558:	003fb406 	br	8642c <__alt_data_end+0xfffa642c>
   8655c:	280bd0ba 	srai	r5,r5,2
   86560:	00c00044 	movi	r3,1
   86564:	38800117 	ldw	r2,4(r7)
   86568:	194a983a 	sll	r5,r3,r5
   8656c:	2007883a 	mov	r3,r4
   86570:	2884b03a 	or	r2,r5,r2
   86574:	38800115 	stw	r2,4(r7)
   86578:	003fbb06 	br	86468 <__alt_data_end+0xfffa6468>
   8657c:	21800515 	stw	r6,20(r4)
   86580:	21800415 	stw	r6,16(r4)
   86584:	10c00054 	ori	r3,r2,1
   86588:	31c00315 	stw	r7,12(r6)
   8658c:	31c00215 	stw	r7,8(r6)
   86590:	30c00115 	stw	r3,4(r6)
   86594:	308d883a 	add	r6,r6,r2
   86598:	30800015 	stw	r2,0(r6)
   8659c:	003f9506 	br	863f4 <__alt_data_end+0xfffa63f4>
   865a0:	00c01504 	movi	r3,84
   865a4:	19400536 	bltu	r3,r5,865bc <_free_r+0x2b8>
   865a8:	100ad33a 	srli	r5,r2,12
   865ac:	28c01bc4 	addi	r3,r5,111
   865b0:	18c7883a 	add	r3,r3,r3
   865b4:	29401b84 	addi	r5,r5,110
   865b8:	003f9c06 	br	8642c <__alt_data_end+0xfffa642c>
   865bc:	00c05504 	movi	r3,340
   865c0:	19400536 	bltu	r3,r5,865d8 <_free_r+0x2d4>
   865c4:	100ad3fa 	srli	r5,r2,15
   865c8:	28c01e04 	addi	r3,r5,120
   865cc:	18c7883a 	add	r3,r3,r3
   865d0:	29401dc4 	addi	r5,r5,119
   865d4:	003f9506 	br	8642c <__alt_data_end+0xfffa642c>
   865d8:	00c15504 	movi	r3,1364
   865dc:	19400536 	bltu	r3,r5,865f4 <_free_r+0x2f0>
   865e0:	100ad4ba 	srli	r5,r2,18
   865e4:	28c01f44 	addi	r3,r5,125
   865e8:	18c7883a 	add	r3,r3,r3
   865ec:	29401f04 	addi	r5,r5,124
   865f0:	003f8e06 	br	8642c <__alt_data_end+0xfffa642c>
   865f4:	00c03f84 	movi	r3,254
   865f8:	01401f84 	movi	r5,126
   865fc:	003f8b06 	br	8642c <__alt_data_end+0xfffa642c>
   86600:	10c00054 	ori	r3,r2,1
   86604:	30c00115 	stw	r3,4(r6)
   86608:	308d883a 	add	r6,r6,r2
   8660c:	30800015 	stw	r2,0(r6)
   86610:	003f7806 	br	863f4 <__alt_data_end+0xfffa63f4>

00086614 <__sfvwrite_r>:
   86614:	30800217 	ldw	r2,8(r6)
   86618:	10006726 	beq	r2,zero,867b8 <__sfvwrite_r+0x1a4>
   8661c:	28c0030b 	ldhu	r3,12(r5)
   86620:	defff404 	addi	sp,sp,-48
   86624:	dd400715 	stw	r21,28(sp)
   86628:	dd000615 	stw	r20,24(sp)
   8662c:	dc000215 	stw	r16,8(sp)
   86630:	dfc00b15 	stw	ra,44(sp)
   86634:	df000a15 	stw	fp,40(sp)
   86638:	ddc00915 	stw	r23,36(sp)
   8663c:	dd800815 	stw	r22,32(sp)
   86640:	dcc00515 	stw	r19,20(sp)
   86644:	dc800415 	stw	r18,16(sp)
   86648:	dc400315 	stw	r17,12(sp)
   8664c:	1880020c 	andi	r2,r3,8
   86650:	2821883a 	mov	r16,r5
   86654:	202b883a 	mov	r21,r4
   86658:	3029883a 	mov	r20,r6
   8665c:	10002726 	beq	r2,zero,866fc <__sfvwrite_r+0xe8>
   86660:	28800417 	ldw	r2,16(r5)
   86664:	10002526 	beq	r2,zero,866fc <__sfvwrite_r+0xe8>
   86668:	1880008c 	andi	r2,r3,2
   8666c:	a4400017 	ldw	r17,0(r20)
   86670:	10002a26 	beq	r2,zero,8671c <__sfvwrite_r+0x108>
   86674:	05a00034 	movhi	r22,32768
   86678:	0027883a 	mov	r19,zero
   8667c:	0025883a 	mov	r18,zero
   86680:	b5bf0004 	addi	r22,r22,-1024
   86684:	980d883a 	mov	r6,r19
   86688:	a809883a 	mov	r4,r21
   8668c:	90004626 	beq	r18,zero,867a8 <__sfvwrite_r+0x194>
   86690:	900f883a 	mov	r7,r18
   86694:	b480022e 	bgeu	r22,r18,866a0 <__sfvwrite_r+0x8c>
   86698:	01e00034 	movhi	r7,32768
   8669c:	39ff0004 	addi	r7,r7,-1024
   866a0:	80800917 	ldw	r2,36(r16)
   866a4:	81400717 	ldw	r5,28(r16)
   866a8:	103ee83a 	callr	r2
   866ac:	00805a0e 	bge	zero,r2,86818 <__sfvwrite_r+0x204>
   866b0:	a0c00217 	ldw	r3,8(r20)
   866b4:	98a7883a 	add	r19,r19,r2
   866b8:	90a5c83a 	sub	r18,r18,r2
   866bc:	1885c83a 	sub	r2,r3,r2
   866c0:	a0800215 	stw	r2,8(r20)
   866c4:	103fef1e 	bne	r2,zero,86684 <__alt_data_end+0xfffa6684>
   866c8:	0005883a 	mov	r2,zero
   866cc:	dfc00b17 	ldw	ra,44(sp)
   866d0:	df000a17 	ldw	fp,40(sp)
   866d4:	ddc00917 	ldw	r23,36(sp)
   866d8:	dd800817 	ldw	r22,32(sp)
   866dc:	dd400717 	ldw	r21,28(sp)
   866e0:	dd000617 	ldw	r20,24(sp)
   866e4:	dcc00517 	ldw	r19,20(sp)
   866e8:	dc800417 	ldw	r18,16(sp)
   866ec:	dc400317 	ldw	r17,12(sp)
   866f0:	dc000217 	ldw	r16,8(sp)
   866f4:	dec00c04 	addi	sp,sp,48
   866f8:	f800283a 	ret
   866fc:	800b883a 	mov	r5,r16
   86700:	a809883a 	mov	r4,r21
   86704:	00841840 	call	84184 <__swsetup_r>
   86708:	1000ee1e 	bne	r2,zero,86ac4 <__sfvwrite_r+0x4b0>
   8670c:	80c0030b 	ldhu	r3,12(r16)
   86710:	a4400017 	ldw	r17,0(r20)
   86714:	1880008c 	andi	r2,r3,2
   86718:	103fd61e 	bne	r2,zero,86674 <__alt_data_end+0xfffa6674>
   8671c:	1880004c 	andi	r2,r3,1
   86720:	1000421e 	bne	r2,zero,8682c <__sfvwrite_r+0x218>
   86724:	0039883a 	mov	fp,zero
   86728:	0025883a 	mov	r18,zero
   8672c:	90001a26 	beq	r18,zero,86798 <__sfvwrite_r+0x184>
   86730:	1880800c 	andi	r2,r3,512
   86734:	84c00217 	ldw	r19,8(r16)
   86738:	10002126 	beq	r2,zero,867c0 <__sfvwrite_r+0x1ac>
   8673c:	982f883a 	mov	r23,r19
   86740:	94c09636 	bltu	r18,r19,8699c <__sfvwrite_r+0x388>
   86744:	1881200c 	andi	r2,r3,1152
   86748:	1000a11e 	bne	r2,zero,869d0 <__sfvwrite_r+0x3bc>
   8674c:	81000017 	ldw	r4,0(r16)
   86750:	b80d883a 	mov	r6,r23
   86754:	e00b883a 	mov	r5,fp
   86758:	00879340 	call	87934 <memmove>
   8675c:	80c00217 	ldw	r3,8(r16)
   86760:	81000017 	ldw	r4,0(r16)
   86764:	9005883a 	mov	r2,r18
   86768:	1ce7c83a 	sub	r19,r3,r19
   8676c:	25cf883a 	add	r7,r4,r23
   86770:	84c00215 	stw	r19,8(r16)
   86774:	81c00015 	stw	r7,0(r16)
   86778:	a0c00217 	ldw	r3,8(r20)
   8677c:	e0b9883a 	add	fp,fp,r2
   86780:	90a5c83a 	sub	r18,r18,r2
   86784:	18a7c83a 	sub	r19,r3,r2
   86788:	a4c00215 	stw	r19,8(r20)
   8678c:	983fce26 	beq	r19,zero,866c8 <__alt_data_end+0xfffa66c8>
   86790:	80c0030b 	ldhu	r3,12(r16)
   86794:	903fe61e 	bne	r18,zero,86730 <__alt_data_end+0xfffa6730>
   86798:	8f000017 	ldw	fp,0(r17)
   8679c:	8c800117 	ldw	r18,4(r17)
   867a0:	8c400204 	addi	r17,r17,8
   867a4:	003fe106 	br	8672c <__alt_data_end+0xfffa672c>
   867a8:	8cc00017 	ldw	r19,0(r17)
   867ac:	8c800117 	ldw	r18,4(r17)
   867b0:	8c400204 	addi	r17,r17,8
   867b4:	003fb306 	br	86684 <__alt_data_end+0xfffa6684>
   867b8:	0005883a 	mov	r2,zero
   867bc:	f800283a 	ret
   867c0:	81000017 	ldw	r4,0(r16)
   867c4:	80800417 	ldw	r2,16(r16)
   867c8:	11005a36 	bltu	r2,r4,86934 <__sfvwrite_r+0x320>
   867cc:	85c00517 	ldw	r23,20(r16)
   867d0:	95c05836 	bltu	r18,r23,86934 <__sfvwrite_r+0x320>
   867d4:	00a00034 	movhi	r2,32768
   867d8:	10bfffc4 	addi	r2,r2,-1
   867dc:	9009883a 	mov	r4,r18
   867e0:	1480012e 	bgeu	r2,r18,867e8 <__sfvwrite_r+0x1d4>
   867e4:	1009883a 	mov	r4,r2
   867e8:	b80b883a 	mov	r5,r23
   867ec:	00819800 	call	81980 <__divsi3>
   867f0:	b80b883a 	mov	r5,r23
   867f4:	1009883a 	mov	r4,r2
   867f8:	0081b340 	call	81b34 <__mulsi3>
   867fc:	81400717 	ldw	r5,28(r16)
   86800:	80c00917 	ldw	r3,36(r16)
   86804:	100f883a 	mov	r7,r2
   86808:	e00d883a 	mov	r6,fp
   8680c:	a809883a 	mov	r4,r21
   86810:	183ee83a 	callr	r3
   86814:	00bfd816 	blt	zero,r2,86778 <__alt_data_end+0xfffa6778>
   86818:	8080030b 	ldhu	r2,12(r16)
   8681c:	10801014 	ori	r2,r2,64
   86820:	8080030d 	sth	r2,12(r16)
   86824:	00bfffc4 	movi	r2,-1
   86828:	003fa806 	br	866cc <__alt_data_end+0xfffa66cc>
   8682c:	0027883a 	mov	r19,zero
   86830:	0011883a 	mov	r8,zero
   86834:	0039883a 	mov	fp,zero
   86838:	0025883a 	mov	r18,zero
   8683c:	90001f26 	beq	r18,zero,868bc <__sfvwrite_r+0x2a8>
   86840:	40005a26 	beq	r8,zero,869ac <__sfvwrite_r+0x398>
   86844:	982d883a 	mov	r22,r19
   86848:	94c0012e 	bgeu	r18,r19,86850 <__sfvwrite_r+0x23c>
   8684c:	902d883a 	mov	r22,r18
   86850:	81000017 	ldw	r4,0(r16)
   86854:	80800417 	ldw	r2,16(r16)
   86858:	b02f883a 	mov	r23,r22
   8685c:	81c00517 	ldw	r7,20(r16)
   86860:	1100032e 	bgeu	r2,r4,86870 <__sfvwrite_r+0x25c>
   86864:	80c00217 	ldw	r3,8(r16)
   86868:	38c7883a 	add	r3,r7,r3
   8686c:	1d801816 	blt	r3,r22,868d0 <__sfvwrite_r+0x2bc>
   86870:	b1c03e16 	blt	r22,r7,8696c <__sfvwrite_r+0x358>
   86874:	80800917 	ldw	r2,36(r16)
   86878:	81400717 	ldw	r5,28(r16)
   8687c:	e00d883a 	mov	r6,fp
   86880:	da000115 	stw	r8,4(sp)
   86884:	a809883a 	mov	r4,r21
   86888:	103ee83a 	callr	r2
   8688c:	102f883a 	mov	r23,r2
   86890:	da000117 	ldw	r8,4(sp)
   86894:	00bfe00e 	bge	zero,r2,86818 <__alt_data_end+0xfffa6818>
   86898:	9de7c83a 	sub	r19,r19,r23
   8689c:	98001f26 	beq	r19,zero,8691c <__sfvwrite_r+0x308>
   868a0:	a0800217 	ldw	r2,8(r20)
   868a4:	e5f9883a 	add	fp,fp,r23
   868a8:	95e5c83a 	sub	r18,r18,r23
   868ac:	15efc83a 	sub	r23,r2,r23
   868b0:	a5c00215 	stw	r23,8(r20)
   868b4:	b83f8426 	beq	r23,zero,866c8 <__alt_data_end+0xfffa66c8>
   868b8:	903fe11e 	bne	r18,zero,86840 <__alt_data_end+0xfffa6840>
   868bc:	8f000017 	ldw	fp,0(r17)
   868c0:	8c800117 	ldw	r18,4(r17)
   868c4:	0011883a 	mov	r8,zero
   868c8:	8c400204 	addi	r17,r17,8
   868cc:	003fdb06 	br	8683c <__alt_data_end+0xfffa683c>
   868d0:	180d883a 	mov	r6,r3
   868d4:	e00b883a 	mov	r5,fp
   868d8:	da000115 	stw	r8,4(sp)
   868dc:	d8c00015 	stw	r3,0(sp)
   868e0:	00879340 	call	87934 <memmove>
   868e4:	d8c00017 	ldw	r3,0(sp)
   868e8:	80800017 	ldw	r2,0(r16)
   868ec:	800b883a 	mov	r5,r16
   868f0:	a809883a 	mov	r4,r21
   868f4:	10c5883a 	add	r2,r2,r3
   868f8:	80800015 	stw	r2,0(r16)
   868fc:	d8c00015 	stw	r3,0(sp)
   86900:	0085da40 	call	85da4 <_fflush_r>
   86904:	d8c00017 	ldw	r3,0(sp)
   86908:	da000117 	ldw	r8,4(sp)
   8690c:	103fc21e 	bne	r2,zero,86818 <__alt_data_end+0xfffa6818>
   86910:	182f883a 	mov	r23,r3
   86914:	9de7c83a 	sub	r19,r19,r23
   86918:	983fe11e 	bne	r19,zero,868a0 <__alt_data_end+0xfffa68a0>
   8691c:	800b883a 	mov	r5,r16
   86920:	a809883a 	mov	r4,r21
   86924:	0085da40 	call	85da4 <_fflush_r>
   86928:	103fbb1e 	bne	r2,zero,86818 <__alt_data_end+0xfffa6818>
   8692c:	0011883a 	mov	r8,zero
   86930:	003fdb06 	br	868a0 <__alt_data_end+0xfffa68a0>
   86934:	94c0012e 	bgeu	r18,r19,8693c <__sfvwrite_r+0x328>
   86938:	9027883a 	mov	r19,r18
   8693c:	980d883a 	mov	r6,r19
   86940:	e00b883a 	mov	r5,fp
   86944:	00879340 	call	87934 <memmove>
   86948:	80800217 	ldw	r2,8(r16)
   8694c:	80c00017 	ldw	r3,0(r16)
   86950:	14c5c83a 	sub	r2,r2,r19
   86954:	1cc7883a 	add	r3,r3,r19
   86958:	80800215 	stw	r2,8(r16)
   8695c:	80c00015 	stw	r3,0(r16)
   86960:	10004326 	beq	r2,zero,86a70 <__sfvwrite_r+0x45c>
   86964:	9805883a 	mov	r2,r19
   86968:	003f8306 	br	86778 <__alt_data_end+0xfffa6778>
   8696c:	b00d883a 	mov	r6,r22
   86970:	e00b883a 	mov	r5,fp
   86974:	da000115 	stw	r8,4(sp)
   86978:	00879340 	call	87934 <memmove>
   8697c:	80800217 	ldw	r2,8(r16)
   86980:	80c00017 	ldw	r3,0(r16)
   86984:	da000117 	ldw	r8,4(sp)
   86988:	1585c83a 	sub	r2,r2,r22
   8698c:	1dad883a 	add	r22,r3,r22
   86990:	80800215 	stw	r2,8(r16)
   86994:	85800015 	stw	r22,0(r16)
   86998:	003fbf06 	br	86898 <__alt_data_end+0xfffa6898>
   8699c:	81000017 	ldw	r4,0(r16)
   869a0:	9027883a 	mov	r19,r18
   869a4:	902f883a 	mov	r23,r18
   869a8:	003f6906 	br	86750 <__alt_data_end+0xfffa6750>
   869ac:	900d883a 	mov	r6,r18
   869b0:	01400284 	movi	r5,10
   869b4:	e009883a 	mov	r4,fp
   869b8:	00877080 	call	87708 <memchr>
   869bc:	10003e26 	beq	r2,zero,86ab8 <__sfvwrite_r+0x4a4>
   869c0:	10800044 	addi	r2,r2,1
   869c4:	1727c83a 	sub	r19,r2,fp
   869c8:	02000044 	movi	r8,1
   869cc:	003f9d06 	br	86844 <__alt_data_end+0xfffa6844>
   869d0:	80800517 	ldw	r2,20(r16)
   869d4:	81400417 	ldw	r5,16(r16)
   869d8:	81c00017 	ldw	r7,0(r16)
   869dc:	10a7883a 	add	r19,r2,r2
   869e0:	9885883a 	add	r2,r19,r2
   869e4:	1026d7fa 	srli	r19,r2,31
   869e8:	396dc83a 	sub	r22,r7,r5
   869ec:	b1000044 	addi	r4,r22,1
   869f0:	9885883a 	add	r2,r19,r2
   869f4:	1027d07a 	srai	r19,r2,1
   869f8:	2485883a 	add	r2,r4,r18
   869fc:	980d883a 	mov	r6,r19
   86a00:	9880022e 	bgeu	r19,r2,86a0c <__sfvwrite_r+0x3f8>
   86a04:	1027883a 	mov	r19,r2
   86a08:	100d883a 	mov	r6,r2
   86a0c:	18c1000c 	andi	r3,r3,1024
   86a10:	18001c26 	beq	r3,zero,86a84 <__sfvwrite_r+0x470>
   86a14:	300b883a 	mov	r5,r6
   86a18:	a809883a 	mov	r4,r21
   86a1c:	0086efc0 	call	86efc <_malloc_r>
   86a20:	102f883a 	mov	r23,r2
   86a24:	10002926 	beq	r2,zero,86acc <__sfvwrite_r+0x4b8>
   86a28:	81400417 	ldw	r5,16(r16)
   86a2c:	b00d883a 	mov	r6,r22
   86a30:	1009883a 	mov	r4,r2
   86a34:	00877ec0 	call	877ec <memcpy>
   86a38:	8080030b 	ldhu	r2,12(r16)
   86a3c:	00fedfc4 	movi	r3,-1153
   86a40:	10c4703a 	and	r2,r2,r3
   86a44:	10802014 	ori	r2,r2,128
   86a48:	8080030d 	sth	r2,12(r16)
   86a4c:	bd89883a 	add	r4,r23,r22
   86a50:	9d8fc83a 	sub	r7,r19,r22
   86a54:	85c00415 	stw	r23,16(r16)
   86a58:	84c00515 	stw	r19,20(r16)
   86a5c:	81000015 	stw	r4,0(r16)
   86a60:	9027883a 	mov	r19,r18
   86a64:	81c00215 	stw	r7,8(r16)
   86a68:	902f883a 	mov	r23,r18
   86a6c:	003f3806 	br	86750 <__alt_data_end+0xfffa6750>
   86a70:	800b883a 	mov	r5,r16
   86a74:	a809883a 	mov	r4,r21
   86a78:	0085da40 	call	85da4 <_fflush_r>
   86a7c:	103fb926 	beq	r2,zero,86964 <__alt_data_end+0xfffa6964>
   86a80:	003f6506 	br	86818 <__alt_data_end+0xfffa6818>
   86a84:	a809883a 	mov	r4,r21
   86a88:	0088dd80 	call	88dd8 <_realloc_r>
   86a8c:	102f883a 	mov	r23,r2
   86a90:	103fee1e 	bne	r2,zero,86a4c <__alt_data_end+0xfffa6a4c>
   86a94:	81400417 	ldw	r5,16(r16)
   86a98:	a809883a 	mov	r4,r21
   86a9c:	00863040 	call	86304 <_free_r>
   86aa0:	8080030b 	ldhu	r2,12(r16)
   86aa4:	00ffdfc4 	movi	r3,-129
   86aa8:	1884703a 	and	r2,r3,r2
   86aac:	00c00304 	movi	r3,12
   86ab0:	a8c00015 	stw	r3,0(r21)
   86ab4:	003f5906 	br	8681c <__alt_data_end+0xfffa681c>
   86ab8:	94c00044 	addi	r19,r18,1
   86abc:	02000044 	movi	r8,1
   86ac0:	003f6006 	br	86844 <__alt_data_end+0xfffa6844>
   86ac4:	00bfffc4 	movi	r2,-1
   86ac8:	003f0006 	br	866cc <__alt_data_end+0xfffa66cc>
   86acc:	00800304 	movi	r2,12
   86ad0:	a8800015 	stw	r2,0(r21)
   86ad4:	8080030b 	ldhu	r2,12(r16)
   86ad8:	003f5006 	br	8681c <__alt_data_end+0xfffa681c>

00086adc <_fwalk>:
   86adc:	defff704 	addi	sp,sp,-36
   86ae0:	dd000415 	stw	r20,16(sp)
   86ae4:	dfc00815 	stw	ra,32(sp)
   86ae8:	ddc00715 	stw	r23,28(sp)
   86aec:	dd800615 	stw	r22,24(sp)
   86af0:	dd400515 	stw	r21,20(sp)
   86af4:	dcc00315 	stw	r19,12(sp)
   86af8:	dc800215 	stw	r18,8(sp)
   86afc:	dc400115 	stw	r17,4(sp)
   86b00:	dc000015 	stw	r16,0(sp)
   86b04:	2500b804 	addi	r20,r4,736
   86b08:	a0002326 	beq	r20,zero,86b98 <_fwalk+0xbc>
   86b0c:	282b883a 	mov	r21,r5
   86b10:	002f883a 	mov	r23,zero
   86b14:	05800044 	movi	r22,1
   86b18:	04ffffc4 	movi	r19,-1
   86b1c:	a4400117 	ldw	r17,4(r20)
   86b20:	a4800217 	ldw	r18,8(r20)
   86b24:	8c7fffc4 	addi	r17,r17,-1
   86b28:	88000d16 	blt	r17,zero,86b60 <_fwalk+0x84>
   86b2c:	94000304 	addi	r16,r18,12
   86b30:	94800384 	addi	r18,r18,14
   86b34:	8080000b 	ldhu	r2,0(r16)
   86b38:	8c7fffc4 	addi	r17,r17,-1
   86b3c:	813ffd04 	addi	r4,r16,-12
   86b40:	b080042e 	bgeu	r22,r2,86b54 <_fwalk+0x78>
   86b44:	9080000f 	ldh	r2,0(r18)
   86b48:	14c00226 	beq	r2,r19,86b54 <_fwalk+0x78>
   86b4c:	a83ee83a 	callr	r21
   86b50:	b8aeb03a 	or	r23,r23,r2
   86b54:	84001a04 	addi	r16,r16,104
   86b58:	94801a04 	addi	r18,r18,104
   86b5c:	8cfff51e 	bne	r17,r19,86b34 <__alt_data_end+0xfffa6b34>
   86b60:	a5000017 	ldw	r20,0(r20)
   86b64:	a03fed1e 	bne	r20,zero,86b1c <__alt_data_end+0xfffa6b1c>
   86b68:	b805883a 	mov	r2,r23
   86b6c:	dfc00817 	ldw	ra,32(sp)
   86b70:	ddc00717 	ldw	r23,28(sp)
   86b74:	dd800617 	ldw	r22,24(sp)
   86b78:	dd400517 	ldw	r21,20(sp)
   86b7c:	dd000417 	ldw	r20,16(sp)
   86b80:	dcc00317 	ldw	r19,12(sp)
   86b84:	dc800217 	ldw	r18,8(sp)
   86b88:	dc400117 	ldw	r17,4(sp)
   86b8c:	dc000017 	ldw	r16,0(sp)
   86b90:	dec00904 	addi	sp,sp,36
   86b94:	f800283a 	ret
   86b98:	002f883a 	mov	r23,zero
   86b9c:	003ff206 	br	86b68 <__alt_data_end+0xfffa6b68>

00086ba0 <_fwalk_reent>:
   86ba0:	defff704 	addi	sp,sp,-36
   86ba4:	dd000415 	stw	r20,16(sp)
   86ba8:	dfc00815 	stw	ra,32(sp)
   86bac:	ddc00715 	stw	r23,28(sp)
   86bb0:	dd800615 	stw	r22,24(sp)
   86bb4:	dd400515 	stw	r21,20(sp)
   86bb8:	dcc00315 	stw	r19,12(sp)
   86bbc:	dc800215 	stw	r18,8(sp)
   86bc0:	dc400115 	stw	r17,4(sp)
   86bc4:	dc000015 	stw	r16,0(sp)
   86bc8:	2500b804 	addi	r20,r4,736
   86bcc:	a0002326 	beq	r20,zero,86c5c <_fwalk_reent+0xbc>
   86bd0:	282b883a 	mov	r21,r5
   86bd4:	2027883a 	mov	r19,r4
   86bd8:	002f883a 	mov	r23,zero
   86bdc:	05800044 	movi	r22,1
   86be0:	04bfffc4 	movi	r18,-1
   86be4:	a4400117 	ldw	r17,4(r20)
   86be8:	a4000217 	ldw	r16,8(r20)
   86bec:	8c7fffc4 	addi	r17,r17,-1
   86bf0:	88000c16 	blt	r17,zero,86c24 <_fwalk_reent+0x84>
   86bf4:	84000304 	addi	r16,r16,12
   86bf8:	8080000b 	ldhu	r2,0(r16)
   86bfc:	8c7fffc4 	addi	r17,r17,-1
   86c00:	817ffd04 	addi	r5,r16,-12
   86c04:	b080052e 	bgeu	r22,r2,86c1c <_fwalk_reent+0x7c>
   86c08:	8080008f 	ldh	r2,2(r16)
   86c0c:	9809883a 	mov	r4,r19
   86c10:	14800226 	beq	r2,r18,86c1c <_fwalk_reent+0x7c>
   86c14:	a83ee83a 	callr	r21
   86c18:	b8aeb03a 	or	r23,r23,r2
   86c1c:	84001a04 	addi	r16,r16,104
   86c20:	8cbff51e 	bne	r17,r18,86bf8 <__alt_data_end+0xfffa6bf8>
   86c24:	a5000017 	ldw	r20,0(r20)
   86c28:	a03fee1e 	bne	r20,zero,86be4 <__alt_data_end+0xfffa6be4>
   86c2c:	b805883a 	mov	r2,r23
   86c30:	dfc00817 	ldw	ra,32(sp)
   86c34:	ddc00717 	ldw	r23,28(sp)
   86c38:	dd800617 	ldw	r22,24(sp)
   86c3c:	dd400517 	ldw	r21,20(sp)
   86c40:	dd000417 	ldw	r20,16(sp)
   86c44:	dcc00317 	ldw	r19,12(sp)
   86c48:	dc800217 	ldw	r18,8(sp)
   86c4c:	dc400117 	ldw	r17,4(sp)
   86c50:	dc000017 	ldw	r16,0(sp)
   86c54:	dec00904 	addi	sp,sp,36
   86c58:	f800283a 	ret
   86c5c:	002f883a 	mov	r23,zero
   86c60:	003ff206 	br	86c2c <__alt_data_end+0xfffa6c2c>

00086c64 <_setlocale_r>:
   86c64:	30001b26 	beq	r6,zero,86cd4 <_setlocale_r+0x70>
   86c68:	01400274 	movhi	r5,9
   86c6c:	defffe04 	addi	sp,sp,-8
   86c70:	29456304 	addi	r5,r5,5516
   86c74:	3009883a 	mov	r4,r6
   86c78:	dc000015 	stw	r16,0(sp)
   86c7c:	dfc00115 	stw	ra,4(sp)
   86c80:	3021883a 	mov	r16,r6
   86c84:	00895400 	call	89540 <strcmp>
   86c88:	1000061e 	bne	r2,zero,86ca4 <_setlocale_r+0x40>
   86c8c:	00800274 	movhi	r2,9
   86c90:	10856204 	addi	r2,r2,5512
   86c94:	dfc00117 	ldw	ra,4(sp)
   86c98:	dc000017 	ldw	r16,0(sp)
   86c9c:	dec00204 	addi	sp,sp,8
   86ca0:	f800283a 	ret
   86ca4:	01400274 	movhi	r5,9
   86ca8:	29456204 	addi	r5,r5,5512
   86cac:	8009883a 	mov	r4,r16
   86cb0:	00895400 	call	89540 <strcmp>
   86cb4:	103ff526 	beq	r2,zero,86c8c <__alt_data_end+0xfffa6c8c>
   86cb8:	01400274 	movhi	r5,9
   86cbc:	29454d04 	addi	r5,r5,5428
   86cc0:	8009883a 	mov	r4,r16
   86cc4:	00895400 	call	89540 <strcmp>
   86cc8:	103ff026 	beq	r2,zero,86c8c <__alt_data_end+0xfffa6c8c>
   86ccc:	0005883a 	mov	r2,zero
   86cd0:	003ff006 	br	86c94 <__alt_data_end+0xfffa6c94>
   86cd4:	00800274 	movhi	r2,9
   86cd8:	10856204 	addi	r2,r2,5512
   86cdc:	f800283a 	ret

00086ce0 <__locale_charset>:
   86ce0:	00800274 	movhi	r2,9
   86ce4:	1089e304 	addi	r2,r2,10124
   86ce8:	f800283a 	ret

00086cec <__locale_mb_cur_max>:
   86cec:	00800274 	movhi	r2,9
   86cf0:	108f7f04 	addi	r2,r2,15868
   86cf4:	10800017 	ldw	r2,0(r2)
   86cf8:	f800283a 	ret

00086cfc <__locale_msgcharset>:
   86cfc:	00800274 	movhi	r2,9
   86d00:	1089db04 	addi	r2,r2,10092
   86d04:	f800283a 	ret

00086d08 <__locale_cjk_lang>:
   86d08:	0005883a 	mov	r2,zero
   86d0c:	f800283a 	ret

00086d10 <_localeconv_r>:
   86d10:	00800274 	movhi	r2,9
   86d14:	1089eb04 	addi	r2,r2,10156
   86d18:	f800283a 	ret

00086d1c <setlocale>:
   86d1c:	00800274 	movhi	r2,9
   86d20:	108f7e04 	addi	r2,r2,15864
   86d24:	280d883a 	mov	r6,r5
   86d28:	200b883a 	mov	r5,r4
   86d2c:	11000017 	ldw	r4,0(r2)
   86d30:	0086c641 	jmpi	86c64 <_setlocale_r>

00086d34 <localeconv>:
   86d34:	00800274 	movhi	r2,9
   86d38:	1089eb04 	addi	r2,r2,10156
   86d3c:	f800283a 	ret

00086d40 <__smakebuf_r>:
   86d40:	2880030b 	ldhu	r2,12(r5)
   86d44:	10c0008c 	andi	r3,r2,2
   86d48:	1800411e 	bne	r3,zero,86e50 <__smakebuf_r+0x110>
   86d4c:	deffec04 	addi	sp,sp,-80
   86d50:	dc000f15 	stw	r16,60(sp)
   86d54:	2821883a 	mov	r16,r5
   86d58:	2940038f 	ldh	r5,14(r5)
   86d5c:	dc401015 	stw	r17,64(sp)
   86d60:	dfc01315 	stw	ra,76(sp)
   86d64:	dcc01215 	stw	r19,72(sp)
   86d68:	dc801115 	stw	r18,68(sp)
   86d6c:	2023883a 	mov	r17,r4
   86d70:	28001c16 	blt	r5,zero,86de4 <__smakebuf_r+0xa4>
   86d74:	d80d883a 	mov	r6,sp
   86d78:	008b3080 	call	8b308 <_fstat_r>
   86d7c:	10001816 	blt	r2,zero,86de0 <__smakebuf_r+0xa0>
   86d80:	d8800117 	ldw	r2,4(sp)
   86d84:	00e00014 	movui	r3,32768
   86d88:	10bc000c 	andi	r2,r2,61440
   86d8c:	14c80020 	cmpeqi	r19,r2,8192
   86d90:	10c03726 	beq	r2,r3,86e70 <__smakebuf_r+0x130>
   86d94:	80c0030b 	ldhu	r3,12(r16)
   86d98:	18c20014 	ori	r3,r3,2048
   86d9c:	80c0030d 	sth	r3,12(r16)
   86da0:	00c80004 	movi	r3,8192
   86da4:	10c0521e 	bne	r2,r3,86ef0 <__smakebuf_r+0x1b0>
   86da8:	8140038f 	ldh	r5,14(r16)
   86dac:	8809883a 	mov	r4,r17
   86db0:	008b3640 	call	8b364 <_isatty_r>
   86db4:	10004c26 	beq	r2,zero,86ee8 <__smakebuf_r+0x1a8>
   86db8:	8080030b 	ldhu	r2,12(r16)
   86dbc:	80c010c4 	addi	r3,r16,67
   86dc0:	80c00015 	stw	r3,0(r16)
   86dc4:	10800054 	ori	r2,r2,1
   86dc8:	8080030d 	sth	r2,12(r16)
   86dcc:	00800044 	movi	r2,1
   86dd0:	80c00415 	stw	r3,16(r16)
   86dd4:	80800515 	stw	r2,20(r16)
   86dd8:	04810004 	movi	r18,1024
   86ddc:	00000706 	br	86dfc <__smakebuf_r+0xbc>
   86de0:	8080030b 	ldhu	r2,12(r16)
   86de4:	10c0200c 	andi	r3,r2,128
   86de8:	18001f1e 	bne	r3,zero,86e68 <__smakebuf_r+0x128>
   86dec:	04810004 	movi	r18,1024
   86df0:	10820014 	ori	r2,r2,2048
   86df4:	8080030d 	sth	r2,12(r16)
   86df8:	0027883a 	mov	r19,zero
   86dfc:	900b883a 	mov	r5,r18
   86e00:	8809883a 	mov	r4,r17
   86e04:	0086efc0 	call	86efc <_malloc_r>
   86e08:	10002c26 	beq	r2,zero,86ebc <__smakebuf_r+0x17c>
   86e0c:	80c0030b 	ldhu	r3,12(r16)
   86e10:	01000234 	movhi	r4,8
   86e14:	21178e04 	addi	r4,r4,24120
   86e18:	89000f15 	stw	r4,60(r17)
   86e1c:	18c02014 	ori	r3,r3,128
   86e20:	80c0030d 	sth	r3,12(r16)
   86e24:	80800015 	stw	r2,0(r16)
   86e28:	80800415 	stw	r2,16(r16)
   86e2c:	84800515 	stw	r18,20(r16)
   86e30:	98001a1e 	bne	r19,zero,86e9c <__smakebuf_r+0x15c>
   86e34:	dfc01317 	ldw	ra,76(sp)
   86e38:	dcc01217 	ldw	r19,72(sp)
   86e3c:	dc801117 	ldw	r18,68(sp)
   86e40:	dc401017 	ldw	r17,64(sp)
   86e44:	dc000f17 	ldw	r16,60(sp)
   86e48:	dec01404 	addi	sp,sp,80
   86e4c:	f800283a 	ret
   86e50:	288010c4 	addi	r2,r5,67
   86e54:	28800015 	stw	r2,0(r5)
   86e58:	28800415 	stw	r2,16(r5)
   86e5c:	00800044 	movi	r2,1
   86e60:	28800515 	stw	r2,20(r5)
   86e64:	f800283a 	ret
   86e68:	04801004 	movi	r18,64
   86e6c:	003fe006 	br	86df0 <__alt_data_end+0xfffa6df0>
   86e70:	81000a17 	ldw	r4,40(r16)
   86e74:	00c00274 	movhi	r3,9
   86e78:	18e53704 	addi	r3,r3,-27428
   86e7c:	20ffc51e 	bne	r4,r3,86d94 <__alt_data_end+0xfffa6d94>
   86e80:	8080030b 	ldhu	r2,12(r16)
   86e84:	04810004 	movi	r18,1024
   86e88:	84801315 	stw	r18,76(r16)
   86e8c:	1484b03a 	or	r2,r2,r18
   86e90:	8080030d 	sth	r2,12(r16)
   86e94:	0027883a 	mov	r19,zero
   86e98:	003fd806 	br	86dfc <__alt_data_end+0xfffa6dfc>
   86e9c:	8140038f 	ldh	r5,14(r16)
   86ea0:	8809883a 	mov	r4,r17
   86ea4:	008b3640 	call	8b364 <_isatty_r>
   86ea8:	103fe226 	beq	r2,zero,86e34 <__alt_data_end+0xfffa6e34>
   86eac:	8080030b 	ldhu	r2,12(r16)
   86eb0:	10800054 	ori	r2,r2,1
   86eb4:	8080030d 	sth	r2,12(r16)
   86eb8:	003fde06 	br	86e34 <__alt_data_end+0xfffa6e34>
   86ebc:	8080030b 	ldhu	r2,12(r16)
   86ec0:	10c0800c 	andi	r3,r2,512
   86ec4:	183fdb1e 	bne	r3,zero,86e34 <__alt_data_end+0xfffa6e34>
   86ec8:	10800094 	ori	r2,r2,2
   86ecc:	80c010c4 	addi	r3,r16,67
   86ed0:	8080030d 	sth	r2,12(r16)
   86ed4:	00800044 	movi	r2,1
   86ed8:	80c00015 	stw	r3,0(r16)
   86edc:	80c00415 	stw	r3,16(r16)
   86ee0:	80800515 	stw	r2,20(r16)
   86ee4:	003fd306 	br	86e34 <__alt_data_end+0xfffa6e34>
   86ee8:	04810004 	movi	r18,1024
   86eec:	003fc306 	br	86dfc <__alt_data_end+0xfffa6dfc>
   86ef0:	0027883a 	mov	r19,zero
   86ef4:	04810004 	movi	r18,1024
   86ef8:	003fc006 	br	86dfc <__alt_data_end+0xfffa6dfc>

00086efc <_malloc_r>:
   86efc:	defff504 	addi	sp,sp,-44
   86f00:	dc800315 	stw	r18,12(sp)
   86f04:	dfc00a15 	stw	ra,40(sp)
   86f08:	df000915 	stw	fp,36(sp)
   86f0c:	ddc00815 	stw	r23,32(sp)
   86f10:	dd800715 	stw	r22,28(sp)
   86f14:	dd400615 	stw	r21,24(sp)
   86f18:	dd000515 	stw	r20,20(sp)
   86f1c:	dcc00415 	stw	r19,16(sp)
   86f20:	dc400215 	stw	r17,8(sp)
   86f24:	dc000115 	stw	r16,4(sp)
   86f28:	288002c4 	addi	r2,r5,11
   86f2c:	00c00584 	movi	r3,22
   86f30:	2025883a 	mov	r18,r4
   86f34:	18807f2e 	bgeu	r3,r2,87134 <_malloc_r+0x238>
   86f38:	047ffe04 	movi	r17,-8
   86f3c:	1462703a 	and	r17,r2,r17
   86f40:	8800a316 	blt	r17,zero,871d0 <_malloc_r+0x2d4>
   86f44:	8940a236 	bltu	r17,r5,871d0 <_malloc_r+0x2d4>
   86f48:	008f16c0 	call	8f16c <__malloc_lock>
   86f4c:	00807dc4 	movi	r2,503
   86f50:	1441e92e 	bgeu	r2,r17,876f8 <_malloc_r+0x7fc>
   86f54:	8804d27a 	srli	r2,r17,9
   86f58:	1000a126 	beq	r2,zero,871e0 <_malloc_r+0x2e4>
   86f5c:	00c00104 	movi	r3,4
   86f60:	18811e36 	bltu	r3,r2,873dc <_malloc_r+0x4e0>
   86f64:	8804d1ba 	srli	r2,r17,6
   86f68:	12000e44 	addi	r8,r2,57
   86f6c:	11c00e04 	addi	r7,r2,56
   86f70:	4209883a 	add	r4,r8,r8
   86f74:	04c00274 	movhi	r19,9
   86f78:	2109883a 	add	r4,r4,r4
   86f7c:	9cc9f904 	addi	r19,r19,10212
   86f80:	2109883a 	add	r4,r4,r4
   86f84:	9909883a 	add	r4,r19,r4
   86f88:	24000117 	ldw	r16,4(r4)
   86f8c:	213ffe04 	addi	r4,r4,-8
   86f90:	24009726 	beq	r4,r16,871f0 <_malloc_r+0x2f4>
   86f94:	80800117 	ldw	r2,4(r16)
   86f98:	01bfff04 	movi	r6,-4
   86f9c:	014003c4 	movi	r5,15
   86fa0:	1184703a 	and	r2,r2,r6
   86fa4:	1447c83a 	sub	r3,r2,r17
   86fa8:	28c00716 	blt	r5,r3,86fc8 <_malloc_r+0xcc>
   86fac:	1800920e 	bge	r3,zero,871f8 <_malloc_r+0x2fc>
   86fb0:	84000317 	ldw	r16,12(r16)
   86fb4:	24008e26 	beq	r4,r16,871f0 <_malloc_r+0x2f4>
   86fb8:	80800117 	ldw	r2,4(r16)
   86fbc:	1184703a 	and	r2,r2,r6
   86fc0:	1447c83a 	sub	r3,r2,r17
   86fc4:	28fff90e 	bge	r5,r3,86fac <__alt_data_end+0xfffa6fac>
   86fc8:	3809883a 	mov	r4,r7
   86fcc:	01800274 	movhi	r6,9
   86fd0:	9c000417 	ldw	r16,16(r19)
   86fd4:	3189f904 	addi	r6,r6,10212
   86fd8:	32000204 	addi	r8,r6,8
   86fdc:	82013426 	beq	r16,r8,874b0 <_malloc_r+0x5b4>
   86fe0:	80c00117 	ldw	r3,4(r16)
   86fe4:	00bfff04 	movi	r2,-4
   86fe8:	188e703a 	and	r7,r3,r2
   86fec:	3c45c83a 	sub	r2,r7,r17
   86ff0:	00c003c4 	movi	r3,15
   86ff4:	18811f16 	blt	r3,r2,87474 <_malloc_r+0x578>
   86ff8:	32000515 	stw	r8,20(r6)
   86ffc:	32000415 	stw	r8,16(r6)
   87000:	10007f0e 	bge	r2,zero,87200 <_malloc_r+0x304>
   87004:	00807fc4 	movi	r2,511
   87008:	11c0fd36 	bltu	r2,r7,87400 <_malloc_r+0x504>
   8700c:	3806d0fa 	srli	r3,r7,3
   87010:	01c00044 	movi	r7,1
   87014:	30800117 	ldw	r2,4(r6)
   87018:	19400044 	addi	r5,r3,1
   8701c:	294b883a 	add	r5,r5,r5
   87020:	1807d0ba 	srai	r3,r3,2
   87024:	294b883a 	add	r5,r5,r5
   87028:	294b883a 	add	r5,r5,r5
   8702c:	298b883a 	add	r5,r5,r6
   87030:	38c6983a 	sll	r3,r7,r3
   87034:	29c00017 	ldw	r7,0(r5)
   87038:	2a7ffe04 	addi	r9,r5,-8
   8703c:	1886b03a 	or	r3,r3,r2
   87040:	82400315 	stw	r9,12(r16)
   87044:	81c00215 	stw	r7,8(r16)
   87048:	30c00115 	stw	r3,4(r6)
   8704c:	2c000015 	stw	r16,0(r5)
   87050:	3c000315 	stw	r16,12(r7)
   87054:	2005d0ba 	srai	r2,r4,2
   87058:	01400044 	movi	r5,1
   8705c:	288a983a 	sll	r5,r5,r2
   87060:	19406f36 	bltu	r3,r5,87220 <_malloc_r+0x324>
   87064:	28c4703a 	and	r2,r5,r3
   87068:	10000a1e 	bne	r2,zero,87094 <_malloc_r+0x198>
   8706c:	00bfff04 	movi	r2,-4
   87070:	294b883a 	add	r5,r5,r5
   87074:	2088703a 	and	r4,r4,r2
   87078:	28c4703a 	and	r2,r5,r3
   8707c:	21000104 	addi	r4,r4,4
   87080:	1000041e 	bne	r2,zero,87094 <_malloc_r+0x198>
   87084:	294b883a 	add	r5,r5,r5
   87088:	28c4703a 	and	r2,r5,r3
   8708c:	21000104 	addi	r4,r4,4
   87090:	103ffc26 	beq	r2,zero,87084 <__alt_data_end+0xfffa7084>
   87094:	02bfff04 	movi	r10,-4
   87098:	024003c4 	movi	r9,15
   8709c:	21800044 	addi	r6,r4,1
   870a0:	318d883a 	add	r6,r6,r6
   870a4:	318d883a 	add	r6,r6,r6
   870a8:	318d883a 	add	r6,r6,r6
   870ac:	998d883a 	add	r6,r19,r6
   870b0:	333ffe04 	addi	r12,r6,-8
   870b4:	2017883a 	mov	r11,r4
   870b8:	31800104 	addi	r6,r6,4
   870bc:	34000017 	ldw	r16,0(r6)
   870c0:	31fffd04 	addi	r7,r6,-12
   870c4:	81c0041e 	bne	r16,r7,870d8 <_malloc_r+0x1dc>
   870c8:	0000fb06 	br	874b8 <_malloc_r+0x5bc>
   870cc:	1801030e 	bge	r3,zero,874dc <_malloc_r+0x5e0>
   870d0:	84000317 	ldw	r16,12(r16)
   870d4:	81c0f826 	beq	r16,r7,874b8 <_malloc_r+0x5bc>
   870d8:	80800117 	ldw	r2,4(r16)
   870dc:	1284703a 	and	r2,r2,r10
   870e0:	1447c83a 	sub	r3,r2,r17
   870e4:	48fff90e 	bge	r9,r3,870cc <__alt_data_end+0xfffa70cc>
   870e8:	80800317 	ldw	r2,12(r16)
   870ec:	81000217 	ldw	r4,8(r16)
   870f0:	89400054 	ori	r5,r17,1
   870f4:	81400115 	stw	r5,4(r16)
   870f8:	20800315 	stw	r2,12(r4)
   870fc:	11000215 	stw	r4,8(r2)
   87100:	8463883a 	add	r17,r16,r17
   87104:	9c400515 	stw	r17,20(r19)
   87108:	9c400415 	stw	r17,16(r19)
   8710c:	18800054 	ori	r2,r3,1
   87110:	88800115 	stw	r2,4(r17)
   87114:	8a000315 	stw	r8,12(r17)
   87118:	8a000215 	stw	r8,8(r17)
   8711c:	88e3883a 	add	r17,r17,r3
   87120:	88c00015 	stw	r3,0(r17)
   87124:	9009883a 	mov	r4,r18
   87128:	008f1900 	call	8f190 <__malloc_unlock>
   8712c:	80800204 	addi	r2,r16,8
   87130:	00001b06 	br	871a0 <_malloc_r+0x2a4>
   87134:	04400404 	movi	r17,16
   87138:	89402536 	bltu	r17,r5,871d0 <_malloc_r+0x2d4>
   8713c:	008f16c0 	call	8f16c <__malloc_lock>
   87140:	00800184 	movi	r2,6
   87144:	01000084 	movi	r4,2
   87148:	04c00274 	movhi	r19,9
   8714c:	1085883a 	add	r2,r2,r2
   87150:	9cc9f904 	addi	r19,r19,10212
   87154:	1085883a 	add	r2,r2,r2
   87158:	9885883a 	add	r2,r19,r2
   8715c:	14000117 	ldw	r16,4(r2)
   87160:	10fffe04 	addi	r3,r2,-8
   87164:	80c0d926 	beq	r16,r3,874cc <_malloc_r+0x5d0>
   87168:	80c00117 	ldw	r3,4(r16)
   8716c:	81000317 	ldw	r4,12(r16)
   87170:	00bfff04 	movi	r2,-4
   87174:	1884703a 	and	r2,r3,r2
   87178:	81400217 	ldw	r5,8(r16)
   8717c:	8085883a 	add	r2,r16,r2
   87180:	10c00117 	ldw	r3,4(r2)
   87184:	29000315 	stw	r4,12(r5)
   87188:	21400215 	stw	r5,8(r4)
   8718c:	18c00054 	ori	r3,r3,1
   87190:	10c00115 	stw	r3,4(r2)
   87194:	9009883a 	mov	r4,r18
   87198:	008f1900 	call	8f190 <__malloc_unlock>
   8719c:	80800204 	addi	r2,r16,8
   871a0:	dfc00a17 	ldw	ra,40(sp)
   871a4:	df000917 	ldw	fp,36(sp)
   871a8:	ddc00817 	ldw	r23,32(sp)
   871ac:	dd800717 	ldw	r22,28(sp)
   871b0:	dd400617 	ldw	r21,24(sp)
   871b4:	dd000517 	ldw	r20,20(sp)
   871b8:	dcc00417 	ldw	r19,16(sp)
   871bc:	dc800317 	ldw	r18,12(sp)
   871c0:	dc400217 	ldw	r17,8(sp)
   871c4:	dc000117 	ldw	r16,4(sp)
   871c8:	dec00b04 	addi	sp,sp,44
   871cc:	f800283a 	ret
   871d0:	00800304 	movi	r2,12
   871d4:	90800015 	stw	r2,0(r18)
   871d8:	0005883a 	mov	r2,zero
   871dc:	003ff006 	br	871a0 <__alt_data_end+0xfffa71a0>
   871e0:	01002004 	movi	r4,128
   871e4:	02001004 	movi	r8,64
   871e8:	01c00fc4 	movi	r7,63
   871ec:	003f6106 	br	86f74 <__alt_data_end+0xfffa6f74>
   871f0:	4009883a 	mov	r4,r8
   871f4:	003f7506 	br	86fcc <__alt_data_end+0xfffa6fcc>
   871f8:	81000317 	ldw	r4,12(r16)
   871fc:	003fde06 	br	87178 <__alt_data_end+0xfffa7178>
   87200:	81c5883a 	add	r2,r16,r7
   87204:	11400117 	ldw	r5,4(r2)
   87208:	9009883a 	mov	r4,r18
   8720c:	29400054 	ori	r5,r5,1
   87210:	11400115 	stw	r5,4(r2)
   87214:	008f1900 	call	8f190 <__malloc_unlock>
   87218:	80800204 	addi	r2,r16,8
   8721c:	003fe006 	br	871a0 <__alt_data_end+0xfffa71a0>
   87220:	9c000217 	ldw	r16,8(r19)
   87224:	00bfff04 	movi	r2,-4
   87228:	85800117 	ldw	r22,4(r16)
   8722c:	b0ac703a 	and	r22,r22,r2
   87230:	b4400336 	bltu	r22,r17,87240 <_malloc_r+0x344>
   87234:	b445c83a 	sub	r2,r22,r17
   87238:	00c003c4 	movi	r3,15
   8723c:	18805d16 	blt	r3,r2,873b4 <_malloc_r+0x4b8>
   87240:	05c00274 	movhi	r23,9
   87244:	00800274 	movhi	r2,9
   87248:	10991d04 	addi	r2,r2,25716
   8724c:	bdcf8004 	addi	r23,r23,15872
   87250:	15400017 	ldw	r21,0(r2)
   87254:	b8c00017 	ldw	r3,0(r23)
   87258:	00bfffc4 	movi	r2,-1
   8725c:	858d883a 	add	r6,r16,r22
   87260:	8d6b883a 	add	r21,r17,r21
   87264:	1880ea26 	beq	r3,r2,87610 <_malloc_r+0x714>
   87268:	ad4403c4 	addi	r21,r21,4111
   8726c:	00bc0004 	movi	r2,-4096
   87270:	a8aa703a 	and	r21,r21,r2
   87274:	a80b883a 	mov	r5,r21
   87278:	9009883a 	mov	r4,r18
   8727c:	d9800015 	stw	r6,0(sp)
   87280:	00893b00 	call	893b0 <_sbrk_r>
   87284:	1029883a 	mov	r20,r2
   87288:	00bfffc4 	movi	r2,-1
   8728c:	d9800017 	ldw	r6,0(sp)
   87290:	a080e826 	beq	r20,r2,87634 <_malloc_r+0x738>
   87294:	a180a636 	bltu	r20,r6,87530 <_malloc_r+0x634>
   87298:	07000274 	movhi	fp,9
   8729c:	e7192604 	addi	fp,fp,25752
   872a0:	e0800017 	ldw	r2,0(fp)
   872a4:	a887883a 	add	r3,r21,r2
   872a8:	e0c00015 	stw	r3,0(fp)
   872ac:	3500e626 	beq	r6,r20,87648 <_malloc_r+0x74c>
   872b0:	b9000017 	ldw	r4,0(r23)
   872b4:	00bfffc4 	movi	r2,-1
   872b8:	2080ee26 	beq	r4,r2,87674 <_malloc_r+0x778>
   872bc:	a185c83a 	sub	r2,r20,r6
   872c0:	10c5883a 	add	r2,r2,r3
   872c4:	e0800015 	stw	r2,0(fp)
   872c8:	a0c001cc 	andi	r3,r20,7
   872cc:	1800bc26 	beq	r3,zero,875c0 <_malloc_r+0x6c4>
   872d0:	a0e9c83a 	sub	r20,r20,r3
   872d4:	00840204 	movi	r2,4104
   872d8:	a5000204 	addi	r20,r20,8
   872dc:	10c7c83a 	sub	r3,r2,r3
   872e0:	a545883a 	add	r2,r20,r21
   872e4:	1083ffcc 	andi	r2,r2,4095
   872e8:	18abc83a 	sub	r21,r3,r2
   872ec:	a80b883a 	mov	r5,r21
   872f0:	9009883a 	mov	r4,r18
   872f4:	00893b00 	call	893b0 <_sbrk_r>
   872f8:	00ffffc4 	movi	r3,-1
   872fc:	10c0e126 	beq	r2,r3,87684 <_malloc_r+0x788>
   87300:	1505c83a 	sub	r2,r2,r20
   87304:	1545883a 	add	r2,r2,r21
   87308:	10800054 	ori	r2,r2,1
   8730c:	e0c00017 	ldw	r3,0(fp)
   87310:	9d000215 	stw	r20,8(r19)
   87314:	a0800115 	stw	r2,4(r20)
   87318:	a8c7883a 	add	r3,r21,r3
   8731c:	e0c00015 	stw	r3,0(fp)
   87320:	84c00e26 	beq	r16,r19,8735c <_malloc_r+0x460>
   87324:	018003c4 	movi	r6,15
   87328:	3580a72e 	bgeu	r6,r22,875c8 <_malloc_r+0x6cc>
   8732c:	81400117 	ldw	r5,4(r16)
   87330:	013ffe04 	movi	r4,-8
   87334:	b0bffd04 	addi	r2,r22,-12
   87338:	1104703a 	and	r2,r2,r4
   8733c:	2900004c 	andi	r4,r5,1
   87340:	2088b03a 	or	r4,r4,r2
   87344:	81000115 	stw	r4,4(r16)
   87348:	01400144 	movi	r5,5
   8734c:	8089883a 	add	r4,r16,r2
   87350:	21400115 	stw	r5,4(r4)
   87354:	21400215 	stw	r5,8(r4)
   87358:	3080cd36 	bltu	r6,r2,87690 <_malloc_r+0x794>
   8735c:	00800274 	movhi	r2,9
   87360:	10991c04 	addi	r2,r2,25712
   87364:	11000017 	ldw	r4,0(r2)
   87368:	20c0012e 	bgeu	r4,r3,87370 <_malloc_r+0x474>
   8736c:	10c00015 	stw	r3,0(r2)
   87370:	00800274 	movhi	r2,9
   87374:	10991b04 	addi	r2,r2,25708
   87378:	11000017 	ldw	r4,0(r2)
   8737c:	9c000217 	ldw	r16,8(r19)
   87380:	20c0012e 	bgeu	r4,r3,87388 <_malloc_r+0x48c>
   87384:	10c00015 	stw	r3,0(r2)
   87388:	80c00117 	ldw	r3,4(r16)
   8738c:	00bfff04 	movi	r2,-4
   87390:	1886703a 	and	r3,r3,r2
   87394:	1c45c83a 	sub	r2,r3,r17
   87398:	1c400236 	bltu	r3,r17,873a4 <_malloc_r+0x4a8>
   8739c:	00c003c4 	movi	r3,15
   873a0:	18800416 	blt	r3,r2,873b4 <_malloc_r+0x4b8>
   873a4:	9009883a 	mov	r4,r18
   873a8:	008f1900 	call	8f190 <__malloc_unlock>
   873ac:	0005883a 	mov	r2,zero
   873b0:	003f7b06 	br	871a0 <__alt_data_end+0xfffa71a0>
   873b4:	88c00054 	ori	r3,r17,1
   873b8:	80c00115 	stw	r3,4(r16)
   873bc:	8463883a 	add	r17,r16,r17
   873c0:	10800054 	ori	r2,r2,1
   873c4:	9c400215 	stw	r17,8(r19)
   873c8:	88800115 	stw	r2,4(r17)
   873cc:	9009883a 	mov	r4,r18
   873d0:	008f1900 	call	8f190 <__malloc_unlock>
   873d4:	80800204 	addi	r2,r16,8
   873d8:	003f7106 	br	871a0 <__alt_data_end+0xfffa71a0>
   873dc:	00c00504 	movi	r3,20
   873e0:	18804a2e 	bgeu	r3,r2,8750c <_malloc_r+0x610>
   873e4:	00c01504 	movi	r3,84
   873e8:	18806e36 	bltu	r3,r2,875a4 <_malloc_r+0x6a8>
   873ec:	8804d33a 	srli	r2,r17,12
   873f0:	12001bc4 	addi	r8,r2,111
   873f4:	11c01b84 	addi	r7,r2,110
   873f8:	4209883a 	add	r4,r8,r8
   873fc:	003edd06 	br	86f74 <__alt_data_end+0xfffa6f74>
   87400:	3804d27a 	srli	r2,r7,9
   87404:	00c00104 	movi	r3,4
   87408:	1880442e 	bgeu	r3,r2,8751c <_malloc_r+0x620>
   8740c:	00c00504 	movi	r3,20
   87410:	18808136 	bltu	r3,r2,87618 <_malloc_r+0x71c>
   87414:	11401704 	addi	r5,r2,92
   87418:	10c016c4 	addi	r3,r2,91
   8741c:	294b883a 	add	r5,r5,r5
   87420:	294b883a 	add	r5,r5,r5
   87424:	294b883a 	add	r5,r5,r5
   87428:	994b883a 	add	r5,r19,r5
   8742c:	28800017 	ldw	r2,0(r5)
   87430:	01800274 	movhi	r6,9
   87434:	297ffe04 	addi	r5,r5,-8
   87438:	3189f904 	addi	r6,r6,10212
   8743c:	28806526 	beq	r5,r2,875d4 <_malloc_r+0x6d8>
   87440:	01bfff04 	movi	r6,-4
   87444:	10c00117 	ldw	r3,4(r2)
   87448:	1986703a 	and	r3,r3,r6
   8744c:	38c0022e 	bgeu	r7,r3,87458 <_malloc_r+0x55c>
   87450:	10800217 	ldw	r2,8(r2)
   87454:	28bffb1e 	bne	r5,r2,87444 <__alt_data_end+0xfffa7444>
   87458:	11400317 	ldw	r5,12(r2)
   8745c:	98c00117 	ldw	r3,4(r19)
   87460:	81400315 	stw	r5,12(r16)
   87464:	80800215 	stw	r2,8(r16)
   87468:	2c000215 	stw	r16,8(r5)
   8746c:	14000315 	stw	r16,12(r2)
   87470:	003ef806 	br	87054 <__alt_data_end+0xfffa7054>
   87474:	88c00054 	ori	r3,r17,1
   87478:	80c00115 	stw	r3,4(r16)
   8747c:	8463883a 	add	r17,r16,r17
   87480:	34400515 	stw	r17,20(r6)
   87484:	34400415 	stw	r17,16(r6)
   87488:	10c00054 	ori	r3,r2,1
   8748c:	8a000315 	stw	r8,12(r17)
   87490:	8a000215 	stw	r8,8(r17)
   87494:	88c00115 	stw	r3,4(r17)
   87498:	88a3883a 	add	r17,r17,r2
   8749c:	88800015 	stw	r2,0(r17)
   874a0:	9009883a 	mov	r4,r18
   874a4:	008f1900 	call	8f190 <__malloc_unlock>
   874a8:	80800204 	addi	r2,r16,8
   874ac:	003f3c06 	br	871a0 <__alt_data_end+0xfffa71a0>
   874b0:	30c00117 	ldw	r3,4(r6)
   874b4:	003ee706 	br	87054 <__alt_data_end+0xfffa7054>
   874b8:	5ac00044 	addi	r11,r11,1
   874bc:	588000cc 	andi	r2,r11,3
   874c0:	31800204 	addi	r6,r6,8
   874c4:	103efd1e 	bne	r2,zero,870bc <__alt_data_end+0xfffa70bc>
   874c8:	00002406 	br	8755c <_malloc_r+0x660>
   874cc:	14000317 	ldw	r16,12(r2)
   874d0:	143f251e 	bne	r2,r16,87168 <__alt_data_end+0xfffa7168>
   874d4:	21000084 	addi	r4,r4,2
   874d8:	003ebc06 	br	86fcc <__alt_data_end+0xfffa6fcc>
   874dc:	8085883a 	add	r2,r16,r2
   874e0:	10c00117 	ldw	r3,4(r2)
   874e4:	81000317 	ldw	r4,12(r16)
   874e8:	81400217 	ldw	r5,8(r16)
   874ec:	18c00054 	ori	r3,r3,1
   874f0:	10c00115 	stw	r3,4(r2)
   874f4:	29000315 	stw	r4,12(r5)
   874f8:	21400215 	stw	r5,8(r4)
   874fc:	9009883a 	mov	r4,r18
   87500:	008f1900 	call	8f190 <__malloc_unlock>
   87504:	80800204 	addi	r2,r16,8
   87508:	003f2506 	br	871a0 <__alt_data_end+0xfffa71a0>
   8750c:	12001704 	addi	r8,r2,92
   87510:	11c016c4 	addi	r7,r2,91
   87514:	4209883a 	add	r4,r8,r8
   87518:	003e9606 	br	86f74 <__alt_data_end+0xfffa6f74>
   8751c:	3804d1ba 	srli	r2,r7,6
   87520:	11400e44 	addi	r5,r2,57
   87524:	10c00e04 	addi	r3,r2,56
   87528:	294b883a 	add	r5,r5,r5
   8752c:	003fbc06 	br	87420 <__alt_data_end+0xfffa7420>
   87530:	84ff5926 	beq	r16,r19,87298 <__alt_data_end+0xfffa7298>
   87534:	00800274 	movhi	r2,9
   87538:	1089f904 	addi	r2,r2,10212
   8753c:	14000217 	ldw	r16,8(r2)
   87540:	00bfff04 	movi	r2,-4
   87544:	80c00117 	ldw	r3,4(r16)
   87548:	1886703a 	and	r3,r3,r2
   8754c:	003f9106 	br	87394 <__alt_data_end+0xfffa7394>
   87550:	60800217 	ldw	r2,8(r12)
   87554:	213fffc4 	addi	r4,r4,-1
   87558:	1300651e 	bne	r2,r12,876f0 <_malloc_r+0x7f4>
   8755c:	208000cc 	andi	r2,r4,3
   87560:	633ffe04 	addi	r12,r12,-8
   87564:	103ffa1e 	bne	r2,zero,87550 <__alt_data_end+0xfffa7550>
   87568:	98800117 	ldw	r2,4(r19)
   8756c:	0146303a 	nor	r3,zero,r5
   87570:	1884703a 	and	r2,r3,r2
   87574:	98800115 	stw	r2,4(r19)
   87578:	294b883a 	add	r5,r5,r5
   8757c:	117f2836 	bltu	r2,r5,87220 <__alt_data_end+0xfffa7220>
   87580:	283f2726 	beq	r5,zero,87220 <__alt_data_end+0xfffa7220>
   87584:	2886703a 	and	r3,r5,r2
   87588:	5809883a 	mov	r4,r11
   8758c:	183ec31e 	bne	r3,zero,8709c <__alt_data_end+0xfffa709c>
   87590:	294b883a 	add	r5,r5,r5
   87594:	2886703a 	and	r3,r5,r2
   87598:	21000104 	addi	r4,r4,4
   8759c:	183ffc26 	beq	r3,zero,87590 <__alt_data_end+0xfffa7590>
   875a0:	003ebe06 	br	8709c <__alt_data_end+0xfffa709c>
   875a4:	00c05504 	movi	r3,340
   875a8:	18801236 	bltu	r3,r2,875f4 <_malloc_r+0x6f8>
   875ac:	8804d3fa 	srli	r2,r17,15
   875b0:	12001e04 	addi	r8,r2,120
   875b4:	11c01dc4 	addi	r7,r2,119
   875b8:	4209883a 	add	r4,r8,r8
   875bc:	003e6d06 	br	86f74 <__alt_data_end+0xfffa6f74>
   875c0:	00c40004 	movi	r3,4096
   875c4:	003f4606 	br	872e0 <__alt_data_end+0xfffa72e0>
   875c8:	00800044 	movi	r2,1
   875cc:	a0800115 	stw	r2,4(r20)
   875d0:	003f7406 	br	873a4 <__alt_data_end+0xfffa73a4>
   875d4:	1805d0ba 	srai	r2,r3,2
   875d8:	01c00044 	movi	r7,1
   875dc:	30c00117 	ldw	r3,4(r6)
   875e0:	388e983a 	sll	r7,r7,r2
   875e4:	2805883a 	mov	r2,r5
   875e8:	38c6b03a 	or	r3,r7,r3
   875ec:	30c00115 	stw	r3,4(r6)
   875f0:	003f9b06 	br	87460 <__alt_data_end+0xfffa7460>
   875f4:	00c15504 	movi	r3,1364
   875f8:	18801a36 	bltu	r3,r2,87664 <_malloc_r+0x768>
   875fc:	8804d4ba 	srli	r2,r17,18
   87600:	12001f44 	addi	r8,r2,125
   87604:	11c01f04 	addi	r7,r2,124
   87608:	4209883a 	add	r4,r8,r8
   8760c:	003e5906 	br	86f74 <__alt_data_end+0xfffa6f74>
   87610:	ad400404 	addi	r21,r21,16
   87614:	003f1706 	br	87274 <__alt_data_end+0xfffa7274>
   87618:	00c01504 	movi	r3,84
   8761c:	18802336 	bltu	r3,r2,876ac <_malloc_r+0x7b0>
   87620:	3804d33a 	srli	r2,r7,12
   87624:	11401bc4 	addi	r5,r2,111
   87628:	10c01b84 	addi	r3,r2,110
   8762c:	294b883a 	add	r5,r5,r5
   87630:	003f7b06 	br	87420 <__alt_data_end+0xfffa7420>
   87634:	9c000217 	ldw	r16,8(r19)
   87638:	00bfff04 	movi	r2,-4
   8763c:	80c00117 	ldw	r3,4(r16)
   87640:	1886703a 	and	r3,r3,r2
   87644:	003f5306 	br	87394 <__alt_data_end+0xfffa7394>
   87648:	3083ffcc 	andi	r2,r6,4095
   8764c:	103f181e 	bne	r2,zero,872b0 <__alt_data_end+0xfffa72b0>
   87650:	99000217 	ldw	r4,8(r19)
   87654:	b545883a 	add	r2,r22,r21
   87658:	10800054 	ori	r2,r2,1
   8765c:	20800115 	stw	r2,4(r4)
   87660:	003f3e06 	br	8735c <__alt_data_end+0xfffa735c>
   87664:	01003f84 	movi	r4,254
   87668:	02001fc4 	movi	r8,127
   8766c:	01c01f84 	movi	r7,126
   87670:	003e4006 	br	86f74 <__alt_data_end+0xfffa6f74>
   87674:	00800274 	movhi	r2,9
   87678:	108f8004 	addi	r2,r2,15872
   8767c:	15000015 	stw	r20,0(r2)
   87680:	003f1106 	br	872c8 <__alt_data_end+0xfffa72c8>
   87684:	00800044 	movi	r2,1
   87688:	002b883a 	mov	r21,zero
   8768c:	003f1f06 	br	8730c <__alt_data_end+0xfffa730c>
   87690:	81400204 	addi	r5,r16,8
   87694:	9009883a 	mov	r4,r18
   87698:	00863040 	call	86304 <_free_r>
   8769c:	00800274 	movhi	r2,9
   876a0:	10992604 	addi	r2,r2,25752
   876a4:	10c00017 	ldw	r3,0(r2)
   876a8:	003f2c06 	br	8735c <__alt_data_end+0xfffa735c>
   876ac:	00c05504 	movi	r3,340
   876b0:	18800536 	bltu	r3,r2,876c8 <_malloc_r+0x7cc>
   876b4:	3804d3fa 	srli	r2,r7,15
   876b8:	11401e04 	addi	r5,r2,120
   876bc:	10c01dc4 	addi	r3,r2,119
   876c0:	294b883a 	add	r5,r5,r5
   876c4:	003f5606 	br	87420 <__alt_data_end+0xfffa7420>
   876c8:	00c15504 	movi	r3,1364
   876cc:	18800536 	bltu	r3,r2,876e4 <_malloc_r+0x7e8>
   876d0:	3804d4ba 	srli	r2,r7,18
   876d4:	11401f44 	addi	r5,r2,125
   876d8:	10c01f04 	addi	r3,r2,124
   876dc:	294b883a 	add	r5,r5,r5
   876e0:	003f4f06 	br	87420 <__alt_data_end+0xfffa7420>
   876e4:	01403f84 	movi	r5,254
   876e8:	00c01f84 	movi	r3,126
   876ec:	003f4c06 	br	87420 <__alt_data_end+0xfffa7420>
   876f0:	98800117 	ldw	r2,4(r19)
   876f4:	003fa006 	br	87578 <__alt_data_end+0xfffa7578>
   876f8:	8808d0fa 	srli	r4,r17,3
   876fc:	20800044 	addi	r2,r4,1
   87700:	1085883a 	add	r2,r2,r2
   87704:	003e9006 	br	87148 <__alt_data_end+0xfffa7148>

00087708 <memchr>:
   87708:	208000cc 	andi	r2,r4,3
   8770c:	280f883a 	mov	r7,r5
   87710:	10003426 	beq	r2,zero,877e4 <memchr+0xdc>
   87714:	30bfffc4 	addi	r2,r6,-1
   87718:	30001a26 	beq	r6,zero,87784 <memchr+0x7c>
   8771c:	20c00003 	ldbu	r3,0(r4)
   87720:	29803fcc 	andi	r6,r5,255
   87724:	30c0051e 	bne	r6,r3,8773c <memchr+0x34>
   87728:	00001806 	br	8778c <memchr+0x84>
   8772c:	10001526 	beq	r2,zero,87784 <memchr+0x7c>
   87730:	20c00003 	ldbu	r3,0(r4)
   87734:	10bfffc4 	addi	r2,r2,-1
   87738:	30c01426 	beq	r6,r3,8778c <memchr+0x84>
   8773c:	21000044 	addi	r4,r4,1
   87740:	20c000cc 	andi	r3,r4,3
   87744:	183ff91e 	bne	r3,zero,8772c <__alt_data_end+0xfffa772c>
   87748:	020000c4 	movi	r8,3
   8774c:	40801136 	bltu	r8,r2,87794 <memchr+0x8c>
   87750:	10000c26 	beq	r2,zero,87784 <memchr+0x7c>
   87754:	20c00003 	ldbu	r3,0(r4)
   87758:	29403fcc 	andi	r5,r5,255
   8775c:	28c00b26 	beq	r5,r3,8778c <memchr+0x84>
   87760:	20c00044 	addi	r3,r4,1
   87764:	39803fcc 	andi	r6,r7,255
   87768:	2089883a 	add	r4,r4,r2
   8776c:	00000306 	br	8777c <memchr+0x74>
   87770:	18c00044 	addi	r3,r3,1
   87774:	197fffc3 	ldbu	r5,-1(r3)
   87778:	31400526 	beq	r6,r5,87790 <memchr+0x88>
   8777c:	1805883a 	mov	r2,r3
   87780:	20fffb1e 	bne	r4,r3,87770 <__alt_data_end+0xfffa7770>
   87784:	0005883a 	mov	r2,zero
   87788:	f800283a 	ret
   8778c:	2005883a 	mov	r2,r4
   87790:	f800283a 	ret
   87794:	28c03fcc 	andi	r3,r5,255
   87798:	1812923a 	slli	r9,r3,8
   8779c:	02ffbff4 	movhi	r11,65279
   877a0:	02a02074 	movhi	r10,32897
   877a4:	48d2b03a 	or	r9,r9,r3
   877a8:	4806943a 	slli	r3,r9,16
   877ac:	5affbfc4 	addi	r11,r11,-257
   877b0:	52a02004 	addi	r10,r10,-32640
   877b4:	48d2b03a 	or	r9,r9,r3
   877b8:	20c00017 	ldw	r3,0(r4)
   877bc:	48c6f03a 	xor	r3,r9,r3
   877c0:	1acd883a 	add	r6,r3,r11
   877c4:	00c6303a 	nor	r3,zero,r3
   877c8:	30c6703a 	and	r3,r6,r3
   877cc:	1a86703a 	and	r3,r3,r10
   877d0:	183fe01e 	bne	r3,zero,87754 <__alt_data_end+0xfffa7754>
   877d4:	10bfff04 	addi	r2,r2,-4
   877d8:	21000104 	addi	r4,r4,4
   877dc:	40bff636 	bltu	r8,r2,877b8 <__alt_data_end+0xfffa77b8>
   877e0:	003fdb06 	br	87750 <__alt_data_end+0xfffa7750>
   877e4:	3005883a 	mov	r2,r6
   877e8:	003fd706 	br	87748 <__alt_data_end+0xfffa7748>

000877ec <memcpy>:
   877ec:	defffd04 	addi	sp,sp,-12
   877f0:	dfc00215 	stw	ra,8(sp)
   877f4:	dc400115 	stw	r17,4(sp)
   877f8:	dc000015 	stw	r16,0(sp)
   877fc:	00c003c4 	movi	r3,15
   87800:	2005883a 	mov	r2,r4
   87804:	1980452e 	bgeu	r3,r6,8791c <memcpy+0x130>
   87808:	2906b03a 	or	r3,r5,r4
   8780c:	18c000cc 	andi	r3,r3,3
   87810:	1800441e 	bne	r3,zero,87924 <memcpy+0x138>
   87814:	347ffc04 	addi	r17,r6,-16
   87818:	8822d13a 	srli	r17,r17,4
   8781c:	28c00104 	addi	r3,r5,4
   87820:	23400104 	addi	r13,r4,4
   87824:	8820913a 	slli	r16,r17,4
   87828:	2b000204 	addi	r12,r5,8
   8782c:	22c00204 	addi	r11,r4,8
   87830:	84000504 	addi	r16,r16,20
   87834:	2a800304 	addi	r10,r5,12
   87838:	22400304 	addi	r9,r4,12
   8783c:	2c21883a 	add	r16,r5,r16
   87840:	2811883a 	mov	r8,r5
   87844:	200f883a 	mov	r7,r4
   87848:	41000017 	ldw	r4,0(r8)
   8784c:	1fc00017 	ldw	ra,0(r3)
   87850:	63c00017 	ldw	r15,0(r12)
   87854:	39000015 	stw	r4,0(r7)
   87858:	53800017 	ldw	r14,0(r10)
   8785c:	6fc00015 	stw	ra,0(r13)
   87860:	5bc00015 	stw	r15,0(r11)
   87864:	4b800015 	stw	r14,0(r9)
   87868:	18c00404 	addi	r3,r3,16
   8786c:	39c00404 	addi	r7,r7,16
   87870:	42000404 	addi	r8,r8,16
   87874:	6b400404 	addi	r13,r13,16
   87878:	63000404 	addi	r12,r12,16
   8787c:	5ac00404 	addi	r11,r11,16
   87880:	52800404 	addi	r10,r10,16
   87884:	4a400404 	addi	r9,r9,16
   87888:	1c3fef1e 	bne	r3,r16,87848 <__alt_data_end+0xfffa7848>
   8788c:	89c00044 	addi	r7,r17,1
   87890:	380e913a 	slli	r7,r7,4
   87894:	310003cc 	andi	r4,r6,15
   87898:	02c000c4 	movi	r11,3
   8789c:	11c7883a 	add	r3,r2,r7
   878a0:	29cb883a 	add	r5,r5,r7
   878a4:	5900212e 	bgeu	r11,r4,8792c <memcpy+0x140>
   878a8:	1813883a 	mov	r9,r3
   878ac:	2811883a 	mov	r8,r5
   878b0:	200f883a 	mov	r7,r4
   878b4:	42800017 	ldw	r10,0(r8)
   878b8:	4a400104 	addi	r9,r9,4
   878bc:	39ffff04 	addi	r7,r7,-4
   878c0:	4abfff15 	stw	r10,-4(r9)
   878c4:	42000104 	addi	r8,r8,4
   878c8:	59fffa36 	bltu	r11,r7,878b4 <__alt_data_end+0xfffa78b4>
   878cc:	213fff04 	addi	r4,r4,-4
   878d0:	2008d0ba 	srli	r4,r4,2
   878d4:	318000cc 	andi	r6,r6,3
   878d8:	21000044 	addi	r4,r4,1
   878dc:	2109883a 	add	r4,r4,r4
   878e0:	2109883a 	add	r4,r4,r4
   878e4:	1907883a 	add	r3,r3,r4
   878e8:	290b883a 	add	r5,r5,r4
   878ec:	30000626 	beq	r6,zero,87908 <memcpy+0x11c>
   878f0:	198d883a 	add	r6,r3,r6
   878f4:	29c00003 	ldbu	r7,0(r5)
   878f8:	18c00044 	addi	r3,r3,1
   878fc:	29400044 	addi	r5,r5,1
   87900:	19ffffc5 	stb	r7,-1(r3)
   87904:	19bffb1e 	bne	r3,r6,878f4 <__alt_data_end+0xfffa78f4>
   87908:	dfc00217 	ldw	ra,8(sp)
   8790c:	dc400117 	ldw	r17,4(sp)
   87910:	dc000017 	ldw	r16,0(sp)
   87914:	dec00304 	addi	sp,sp,12
   87918:	f800283a 	ret
   8791c:	2007883a 	mov	r3,r4
   87920:	003ff206 	br	878ec <__alt_data_end+0xfffa78ec>
   87924:	2007883a 	mov	r3,r4
   87928:	003ff106 	br	878f0 <__alt_data_end+0xfffa78f0>
   8792c:	200d883a 	mov	r6,r4
   87930:	003fee06 	br	878ec <__alt_data_end+0xfffa78ec>

00087934 <memmove>:
   87934:	2005883a 	mov	r2,r4
   87938:	29000b2e 	bgeu	r5,r4,87968 <memmove+0x34>
   8793c:	298f883a 	add	r7,r5,r6
   87940:	21c0092e 	bgeu	r4,r7,87968 <memmove+0x34>
   87944:	2187883a 	add	r3,r4,r6
   87948:	198bc83a 	sub	r5,r3,r6
   8794c:	30004826 	beq	r6,zero,87a70 <memmove+0x13c>
   87950:	39ffffc4 	addi	r7,r7,-1
   87954:	39000003 	ldbu	r4,0(r7)
   87958:	18ffffc4 	addi	r3,r3,-1
   8795c:	19000005 	stb	r4,0(r3)
   87960:	28fffb1e 	bne	r5,r3,87950 <__alt_data_end+0xfffa7950>
   87964:	f800283a 	ret
   87968:	00c003c4 	movi	r3,15
   8796c:	1980412e 	bgeu	r3,r6,87a74 <memmove+0x140>
   87970:	2886b03a 	or	r3,r5,r2
   87974:	18c000cc 	andi	r3,r3,3
   87978:	1800401e 	bne	r3,zero,87a7c <memmove+0x148>
   8797c:	33fffc04 	addi	r15,r6,-16
   87980:	781ed13a 	srli	r15,r15,4
   87984:	28c00104 	addi	r3,r5,4
   87988:	13400104 	addi	r13,r2,4
   8798c:	781c913a 	slli	r14,r15,4
   87990:	2b000204 	addi	r12,r5,8
   87994:	12c00204 	addi	r11,r2,8
   87998:	73800504 	addi	r14,r14,20
   8799c:	2a800304 	addi	r10,r5,12
   879a0:	12400304 	addi	r9,r2,12
   879a4:	2b9d883a 	add	r14,r5,r14
   879a8:	2811883a 	mov	r8,r5
   879ac:	100f883a 	mov	r7,r2
   879b0:	41000017 	ldw	r4,0(r8)
   879b4:	39c00404 	addi	r7,r7,16
   879b8:	18c00404 	addi	r3,r3,16
   879bc:	393ffc15 	stw	r4,-16(r7)
   879c0:	193ffc17 	ldw	r4,-16(r3)
   879c4:	6b400404 	addi	r13,r13,16
   879c8:	5ac00404 	addi	r11,r11,16
   879cc:	693ffc15 	stw	r4,-16(r13)
   879d0:	61000017 	ldw	r4,0(r12)
   879d4:	4a400404 	addi	r9,r9,16
   879d8:	42000404 	addi	r8,r8,16
   879dc:	593ffc15 	stw	r4,-16(r11)
   879e0:	51000017 	ldw	r4,0(r10)
   879e4:	63000404 	addi	r12,r12,16
   879e8:	52800404 	addi	r10,r10,16
   879ec:	493ffc15 	stw	r4,-16(r9)
   879f0:	1bbfef1e 	bne	r3,r14,879b0 <__alt_data_end+0xfffa79b0>
   879f4:	79000044 	addi	r4,r15,1
   879f8:	2008913a 	slli	r4,r4,4
   879fc:	328003cc 	andi	r10,r6,15
   87a00:	02c000c4 	movi	r11,3
   87a04:	1107883a 	add	r3,r2,r4
   87a08:	290b883a 	add	r5,r5,r4
   87a0c:	5a801e2e 	bgeu	r11,r10,87a88 <memmove+0x154>
   87a10:	1813883a 	mov	r9,r3
   87a14:	2811883a 	mov	r8,r5
   87a18:	500f883a 	mov	r7,r10
   87a1c:	41000017 	ldw	r4,0(r8)
   87a20:	4a400104 	addi	r9,r9,4
   87a24:	39ffff04 	addi	r7,r7,-4
   87a28:	493fff15 	stw	r4,-4(r9)
   87a2c:	42000104 	addi	r8,r8,4
   87a30:	59fffa36 	bltu	r11,r7,87a1c <__alt_data_end+0xfffa7a1c>
   87a34:	513fff04 	addi	r4,r10,-4
   87a38:	2008d0ba 	srli	r4,r4,2
   87a3c:	318000cc 	andi	r6,r6,3
   87a40:	21000044 	addi	r4,r4,1
   87a44:	2109883a 	add	r4,r4,r4
   87a48:	2109883a 	add	r4,r4,r4
   87a4c:	1907883a 	add	r3,r3,r4
   87a50:	290b883a 	add	r5,r5,r4
   87a54:	30000b26 	beq	r6,zero,87a84 <memmove+0x150>
   87a58:	198d883a 	add	r6,r3,r6
   87a5c:	29c00003 	ldbu	r7,0(r5)
   87a60:	18c00044 	addi	r3,r3,1
   87a64:	29400044 	addi	r5,r5,1
   87a68:	19ffffc5 	stb	r7,-1(r3)
   87a6c:	19bffb1e 	bne	r3,r6,87a5c <__alt_data_end+0xfffa7a5c>
   87a70:	f800283a 	ret
   87a74:	1007883a 	mov	r3,r2
   87a78:	003ff606 	br	87a54 <__alt_data_end+0xfffa7a54>
   87a7c:	1007883a 	mov	r3,r2
   87a80:	003ff506 	br	87a58 <__alt_data_end+0xfffa7a58>
   87a84:	f800283a 	ret
   87a88:	500d883a 	mov	r6,r10
   87a8c:	003ff106 	br	87a54 <__alt_data_end+0xfffa7a54>

00087a90 <memset>:
   87a90:	20c000cc 	andi	r3,r4,3
   87a94:	2005883a 	mov	r2,r4
   87a98:	18004426 	beq	r3,zero,87bac <memset+0x11c>
   87a9c:	31ffffc4 	addi	r7,r6,-1
   87aa0:	30004026 	beq	r6,zero,87ba4 <memset+0x114>
   87aa4:	2813883a 	mov	r9,r5
   87aa8:	200d883a 	mov	r6,r4
   87aac:	2007883a 	mov	r3,r4
   87ab0:	00000406 	br	87ac4 <memset+0x34>
   87ab4:	3a3fffc4 	addi	r8,r7,-1
   87ab8:	31800044 	addi	r6,r6,1
   87abc:	38003926 	beq	r7,zero,87ba4 <memset+0x114>
   87ac0:	400f883a 	mov	r7,r8
   87ac4:	18c00044 	addi	r3,r3,1
   87ac8:	32400005 	stb	r9,0(r6)
   87acc:	1a0000cc 	andi	r8,r3,3
   87ad0:	403ff81e 	bne	r8,zero,87ab4 <__alt_data_end+0xfffa7ab4>
   87ad4:	010000c4 	movi	r4,3
   87ad8:	21c02d2e 	bgeu	r4,r7,87b90 <memset+0x100>
   87adc:	29003fcc 	andi	r4,r5,255
   87ae0:	200c923a 	slli	r6,r4,8
   87ae4:	3108b03a 	or	r4,r6,r4
   87ae8:	200c943a 	slli	r6,r4,16
   87aec:	218cb03a 	or	r6,r4,r6
   87af0:	010003c4 	movi	r4,15
   87af4:	21c0182e 	bgeu	r4,r7,87b58 <memset+0xc8>
   87af8:	3b3ffc04 	addi	r12,r7,-16
   87afc:	6018d13a 	srli	r12,r12,4
   87b00:	1a000104 	addi	r8,r3,4
   87b04:	1ac00204 	addi	r11,r3,8
   87b08:	6008913a 	slli	r4,r12,4
   87b0c:	1a800304 	addi	r10,r3,12
   87b10:	1813883a 	mov	r9,r3
   87b14:	21000504 	addi	r4,r4,20
   87b18:	1909883a 	add	r4,r3,r4
   87b1c:	49800015 	stw	r6,0(r9)
   87b20:	41800015 	stw	r6,0(r8)
   87b24:	59800015 	stw	r6,0(r11)
   87b28:	51800015 	stw	r6,0(r10)
   87b2c:	42000404 	addi	r8,r8,16
   87b30:	4a400404 	addi	r9,r9,16
   87b34:	5ac00404 	addi	r11,r11,16
   87b38:	52800404 	addi	r10,r10,16
   87b3c:	413ff71e 	bne	r8,r4,87b1c <__alt_data_end+0xfffa7b1c>
   87b40:	63000044 	addi	r12,r12,1
   87b44:	6018913a 	slli	r12,r12,4
   87b48:	39c003cc 	andi	r7,r7,15
   87b4c:	010000c4 	movi	r4,3
   87b50:	1b07883a 	add	r3,r3,r12
   87b54:	21c00e2e 	bgeu	r4,r7,87b90 <memset+0x100>
   87b58:	1813883a 	mov	r9,r3
   87b5c:	3811883a 	mov	r8,r7
   87b60:	010000c4 	movi	r4,3
   87b64:	49800015 	stw	r6,0(r9)
   87b68:	423fff04 	addi	r8,r8,-4
   87b6c:	4a400104 	addi	r9,r9,4
   87b70:	223ffc36 	bltu	r4,r8,87b64 <__alt_data_end+0xfffa7b64>
   87b74:	393fff04 	addi	r4,r7,-4
   87b78:	2008d0ba 	srli	r4,r4,2
   87b7c:	39c000cc 	andi	r7,r7,3
   87b80:	21000044 	addi	r4,r4,1
   87b84:	2109883a 	add	r4,r4,r4
   87b88:	2109883a 	add	r4,r4,r4
   87b8c:	1907883a 	add	r3,r3,r4
   87b90:	38000526 	beq	r7,zero,87ba8 <memset+0x118>
   87b94:	19cf883a 	add	r7,r3,r7
   87b98:	19400005 	stb	r5,0(r3)
   87b9c:	18c00044 	addi	r3,r3,1
   87ba0:	38fffd1e 	bne	r7,r3,87b98 <__alt_data_end+0xfffa7b98>
   87ba4:	f800283a 	ret
   87ba8:	f800283a 	ret
   87bac:	2007883a 	mov	r3,r4
   87bb0:	300f883a 	mov	r7,r6
   87bb4:	003fc706 	br	87ad4 <__alt_data_end+0xfffa7ad4>

00087bb8 <_Balloc>:
   87bb8:	20801317 	ldw	r2,76(r4)
   87bbc:	defffc04 	addi	sp,sp,-16
   87bc0:	dc400115 	stw	r17,4(sp)
   87bc4:	dc000015 	stw	r16,0(sp)
   87bc8:	dfc00315 	stw	ra,12(sp)
   87bcc:	dc800215 	stw	r18,8(sp)
   87bd0:	2023883a 	mov	r17,r4
   87bd4:	2821883a 	mov	r16,r5
   87bd8:	10000f26 	beq	r2,zero,87c18 <_Balloc+0x60>
   87bdc:	8407883a 	add	r3,r16,r16
   87be0:	18c7883a 	add	r3,r3,r3
   87be4:	10c7883a 	add	r3,r2,r3
   87be8:	18800017 	ldw	r2,0(r3)
   87bec:	10001126 	beq	r2,zero,87c34 <_Balloc+0x7c>
   87bf0:	11000017 	ldw	r4,0(r2)
   87bf4:	19000015 	stw	r4,0(r3)
   87bf8:	10000415 	stw	zero,16(r2)
   87bfc:	10000315 	stw	zero,12(r2)
   87c00:	dfc00317 	ldw	ra,12(sp)
   87c04:	dc800217 	ldw	r18,8(sp)
   87c08:	dc400117 	ldw	r17,4(sp)
   87c0c:	dc000017 	ldw	r16,0(sp)
   87c10:	dec00404 	addi	sp,sp,16
   87c14:	f800283a 	ret
   87c18:	01800844 	movi	r6,33
   87c1c:	01400104 	movi	r5,4
   87c20:	008af200 	call	8af20 <_calloc_r>
   87c24:	88801315 	stw	r2,76(r17)
   87c28:	103fec1e 	bne	r2,zero,87bdc <__alt_data_end+0xfffa7bdc>
   87c2c:	0005883a 	mov	r2,zero
   87c30:	003ff306 	br	87c00 <__alt_data_end+0xfffa7c00>
   87c34:	01400044 	movi	r5,1
   87c38:	2c24983a 	sll	r18,r5,r16
   87c3c:	8809883a 	mov	r4,r17
   87c40:	91800144 	addi	r6,r18,5
   87c44:	318d883a 	add	r6,r6,r6
   87c48:	318d883a 	add	r6,r6,r6
   87c4c:	008af200 	call	8af20 <_calloc_r>
   87c50:	103ff626 	beq	r2,zero,87c2c <__alt_data_end+0xfffa7c2c>
   87c54:	14000115 	stw	r16,4(r2)
   87c58:	14800215 	stw	r18,8(r2)
   87c5c:	003fe606 	br	87bf8 <__alt_data_end+0xfffa7bf8>

00087c60 <_Bfree>:
   87c60:	28000826 	beq	r5,zero,87c84 <_Bfree+0x24>
   87c64:	28c00117 	ldw	r3,4(r5)
   87c68:	20801317 	ldw	r2,76(r4)
   87c6c:	18c7883a 	add	r3,r3,r3
   87c70:	18c7883a 	add	r3,r3,r3
   87c74:	10c5883a 	add	r2,r2,r3
   87c78:	10c00017 	ldw	r3,0(r2)
   87c7c:	28c00015 	stw	r3,0(r5)
   87c80:	11400015 	stw	r5,0(r2)
   87c84:	f800283a 	ret

00087c88 <__multadd>:
   87c88:	defff704 	addi	sp,sp,-36
   87c8c:	dc800215 	stw	r18,8(sp)
   87c90:	2c800417 	ldw	r18,16(r5)
   87c94:	dd800615 	stw	r22,24(sp)
   87c98:	dd400515 	stw	r21,20(sp)
   87c9c:	dd000415 	stw	r20,16(sp)
   87ca0:	dcc00315 	stw	r19,12(sp)
   87ca4:	dc400115 	stw	r17,4(sp)
   87ca8:	dc000015 	stw	r16,0(sp)
   87cac:	dfc00815 	stw	ra,32(sp)
   87cb0:	ddc00715 	stw	r23,28(sp)
   87cb4:	2827883a 	mov	r19,r5
   87cb8:	2029883a 	mov	r20,r4
   87cbc:	3023883a 	mov	r17,r6
   87cc0:	3821883a 	mov	r16,r7
   87cc4:	2d400504 	addi	r21,r5,20
   87cc8:	002d883a 	mov	r22,zero
   87ccc:	adc00017 	ldw	r23,0(r21)
   87cd0:	880b883a 	mov	r5,r17
   87cd4:	ad400104 	addi	r21,r21,4
   87cd8:	b93fffcc 	andi	r4,r23,65535
   87cdc:	0081b340 	call	81b34 <__mulsi3>
   87ce0:	b808d43a 	srli	r4,r23,16
   87ce4:	880b883a 	mov	r5,r17
   87ce8:	1421883a 	add	r16,r2,r16
   87cec:	0081b340 	call	81b34 <__mulsi3>
   87cf0:	800ed43a 	srli	r7,r16,16
   87cf4:	80ffffcc 	andi	r3,r16,65535
   87cf8:	b5800044 	addi	r22,r22,1
   87cfc:	11c5883a 	add	r2,r2,r7
   87d00:	100e943a 	slli	r7,r2,16
   87d04:	1020d43a 	srli	r16,r2,16
   87d08:	38c7883a 	add	r3,r7,r3
   87d0c:	a8ffff15 	stw	r3,-4(r21)
   87d10:	b4bfee16 	blt	r22,r18,87ccc <__alt_data_end+0xfffa7ccc>
   87d14:	80000926 	beq	r16,zero,87d3c <__multadd+0xb4>
   87d18:	98800217 	ldw	r2,8(r19)
   87d1c:	9080130e 	bge	r18,r2,87d6c <__multadd+0xe4>
   87d20:	90800144 	addi	r2,r18,5
   87d24:	1085883a 	add	r2,r2,r2
   87d28:	1085883a 	add	r2,r2,r2
   87d2c:	9885883a 	add	r2,r19,r2
   87d30:	14000015 	stw	r16,0(r2)
   87d34:	94800044 	addi	r18,r18,1
   87d38:	9c800415 	stw	r18,16(r19)
   87d3c:	9805883a 	mov	r2,r19
   87d40:	dfc00817 	ldw	ra,32(sp)
   87d44:	ddc00717 	ldw	r23,28(sp)
   87d48:	dd800617 	ldw	r22,24(sp)
   87d4c:	dd400517 	ldw	r21,20(sp)
   87d50:	dd000417 	ldw	r20,16(sp)
   87d54:	dcc00317 	ldw	r19,12(sp)
   87d58:	dc800217 	ldw	r18,8(sp)
   87d5c:	dc400117 	ldw	r17,4(sp)
   87d60:	dc000017 	ldw	r16,0(sp)
   87d64:	dec00904 	addi	sp,sp,36
   87d68:	f800283a 	ret
   87d6c:	99400117 	ldw	r5,4(r19)
   87d70:	a009883a 	mov	r4,r20
   87d74:	29400044 	addi	r5,r5,1
   87d78:	0087bb80 	call	87bb8 <_Balloc>
   87d7c:	99800417 	ldw	r6,16(r19)
   87d80:	99400304 	addi	r5,r19,12
   87d84:	11000304 	addi	r4,r2,12
   87d88:	31800084 	addi	r6,r6,2
   87d8c:	318d883a 	add	r6,r6,r6
   87d90:	318d883a 	add	r6,r6,r6
   87d94:	1023883a 	mov	r17,r2
   87d98:	00877ec0 	call	877ec <memcpy>
   87d9c:	98000a26 	beq	r19,zero,87dc8 <__multadd+0x140>
   87da0:	98c00117 	ldw	r3,4(r19)
   87da4:	a0801317 	ldw	r2,76(r20)
   87da8:	18c7883a 	add	r3,r3,r3
   87dac:	18c7883a 	add	r3,r3,r3
   87db0:	10c5883a 	add	r2,r2,r3
   87db4:	10c00017 	ldw	r3,0(r2)
   87db8:	98c00015 	stw	r3,0(r19)
   87dbc:	14c00015 	stw	r19,0(r2)
   87dc0:	8827883a 	mov	r19,r17
   87dc4:	003fd606 	br	87d20 <__alt_data_end+0xfffa7d20>
   87dc8:	8827883a 	mov	r19,r17
   87dcc:	003fd406 	br	87d20 <__alt_data_end+0xfffa7d20>

00087dd0 <__s2b>:
   87dd0:	defff904 	addi	sp,sp,-28
   87dd4:	dc400115 	stw	r17,4(sp)
   87dd8:	dc000015 	stw	r16,0(sp)
   87ddc:	2023883a 	mov	r17,r4
   87de0:	2821883a 	mov	r16,r5
   87de4:	39000204 	addi	r4,r7,8
   87de8:	01400244 	movi	r5,9
   87dec:	dcc00315 	stw	r19,12(sp)
   87df0:	dc800215 	stw	r18,8(sp)
   87df4:	dfc00615 	stw	ra,24(sp)
   87df8:	dd400515 	stw	r21,20(sp)
   87dfc:	dd000415 	stw	r20,16(sp)
   87e00:	3825883a 	mov	r18,r7
   87e04:	3027883a 	mov	r19,r6
   87e08:	00819800 	call	81980 <__divsi3>
   87e0c:	00c00044 	movi	r3,1
   87e10:	000b883a 	mov	r5,zero
   87e14:	1880030e 	bge	r3,r2,87e24 <__s2b+0x54>
   87e18:	18c7883a 	add	r3,r3,r3
   87e1c:	29400044 	addi	r5,r5,1
   87e20:	18bffd16 	blt	r3,r2,87e18 <__alt_data_end+0xfffa7e18>
   87e24:	8809883a 	mov	r4,r17
   87e28:	0087bb80 	call	87bb8 <_Balloc>
   87e2c:	d8c00717 	ldw	r3,28(sp)
   87e30:	10c00515 	stw	r3,20(r2)
   87e34:	00c00044 	movi	r3,1
   87e38:	10c00415 	stw	r3,16(r2)
   87e3c:	00c00244 	movi	r3,9
   87e40:	1cc0210e 	bge	r3,r19,87ec8 <__s2b+0xf8>
   87e44:	80eb883a 	add	r21,r16,r3
   87e48:	a829883a 	mov	r20,r21
   87e4c:	84e1883a 	add	r16,r16,r19
   87e50:	a1c00007 	ldb	r7,0(r20)
   87e54:	01800284 	movi	r6,10
   87e58:	a5000044 	addi	r20,r20,1
   87e5c:	100b883a 	mov	r5,r2
   87e60:	39fff404 	addi	r7,r7,-48
   87e64:	8809883a 	mov	r4,r17
   87e68:	0087c880 	call	87c88 <__multadd>
   87e6c:	a43ff81e 	bne	r20,r16,87e50 <__alt_data_end+0xfffa7e50>
   87e70:	ace1883a 	add	r16,r21,r19
   87e74:	843ffe04 	addi	r16,r16,-8
   87e78:	9c800a0e 	bge	r19,r18,87ea4 <__s2b+0xd4>
   87e7c:	94e5c83a 	sub	r18,r18,r19
   87e80:	84a5883a 	add	r18,r16,r18
   87e84:	81c00007 	ldb	r7,0(r16)
   87e88:	01800284 	movi	r6,10
   87e8c:	84000044 	addi	r16,r16,1
   87e90:	100b883a 	mov	r5,r2
   87e94:	39fff404 	addi	r7,r7,-48
   87e98:	8809883a 	mov	r4,r17
   87e9c:	0087c880 	call	87c88 <__multadd>
   87ea0:	84bff81e 	bne	r16,r18,87e84 <__alt_data_end+0xfffa7e84>
   87ea4:	dfc00617 	ldw	ra,24(sp)
   87ea8:	dd400517 	ldw	r21,20(sp)
   87eac:	dd000417 	ldw	r20,16(sp)
   87eb0:	dcc00317 	ldw	r19,12(sp)
   87eb4:	dc800217 	ldw	r18,8(sp)
   87eb8:	dc400117 	ldw	r17,4(sp)
   87ebc:	dc000017 	ldw	r16,0(sp)
   87ec0:	dec00704 	addi	sp,sp,28
   87ec4:	f800283a 	ret
   87ec8:	84000284 	addi	r16,r16,10
   87ecc:	1827883a 	mov	r19,r3
   87ed0:	003fe906 	br	87e78 <__alt_data_end+0xfffa7e78>

00087ed4 <__hi0bits>:
   87ed4:	20bfffec 	andhi	r2,r4,65535
   87ed8:	1000141e 	bne	r2,zero,87f2c <__hi0bits+0x58>
   87edc:	2008943a 	slli	r4,r4,16
   87ee0:	00800404 	movi	r2,16
   87ee4:	20ffc02c 	andhi	r3,r4,65280
   87ee8:	1800021e 	bne	r3,zero,87ef4 <__hi0bits+0x20>
   87eec:	2008923a 	slli	r4,r4,8
   87ef0:	10800204 	addi	r2,r2,8
   87ef4:	20fc002c 	andhi	r3,r4,61440
   87ef8:	1800021e 	bne	r3,zero,87f04 <__hi0bits+0x30>
   87efc:	2008913a 	slli	r4,r4,4
   87f00:	10800104 	addi	r2,r2,4
   87f04:	20f0002c 	andhi	r3,r4,49152
   87f08:	1800031e 	bne	r3,zero,87f18 <__hi0bits+0x44>
   87f0c:	2109883a 	add	r4,r4,r4
   87f10:	10800084 	addi	r2,r2,2
   87f14:	2109883a 	add	r4,r4,r4
   87f18:	20000316 	blt	r4,zero,87f28 <__hi0bits+0x54>
   87f1c:	2110002c 	andhi	r4,r4,16384
   87f20:	2000041e 	bne	r4,zero,87f34 <__hi0bits+0x60>
   87f24:	00800804 	movi	r2,32
   87f28:	f800283a 	ret
   87f2c:	0005883a 	mov	r2,zero
   87f30:	003fec06 	br	87ee4 <__alt_data_end+0xfffa7ee4>
   87f34:	10800044 	addi	r2,r2,1
   87f38:	f800283a 	ret

00087f3c <__lo0bits>:
   87f3c:	20c00017 	ldw	r3,0(r4)
   87f40:	188001cc 	andi	r2,r3,7
   87f44:	10000826 	beq	r2,zero,87f68 <__lo0bits+0x2c>
   87f48:	1880004c 	andi	r2,r3,1
   87f4c:	1000211e 	bne	r2,zero,87fd4 <__lo0bits+0x98>
   87f50:	1880008c 	andi	r2,r3,2
   87f54:	1000211e 	bne	r2,zero,87fdc <__lo0bits+0xa0>
   87f58:	1806d0ba 	srli	r3,r3,2
   87f5c:	00800084 	movi	r2,2
   87f60:	20c00015 	stw	r3,0(r4)
   87f64:	f800283a 	ret
   87f68:	18bfffcc 	andi	r2,r3,65535
   87f6c:	10001326 	beq	r2,zero,87fbc <__lo0bits+0x80>
   87f70:	0005883a 	mov	r2,zero
   87f74:	19403fcc 	andi	r5,r3,255
   87f78:	2800021e 	bne	r5,zero,87f84 <__lo0bits+0x48>
   87f7c:	1806d23a 	srli	r3,r3,8
   87f80:	10800204 	addi	r2,r2,8
   87f84:	194003cc 	andi	r5,r3,15
   87f88:	2800021e 	bne	r5,zero,87f94 <__lo0bits+0x58>
   87f8c:	1806d13a 	srli	r3,r3,4
   87f90:	10800104 	addi	r2,r2,4
   87f94:	194000cc 	andi	r5,r3,3
   87f98:	2800021e 	bne	r5,zero,87fa4 <__lo0bits+0x68>
   87f9c:	1806d0ba 	srli	r3,r3,2
   87fa0:	10800084 	addi	r2,r2,2
   87fa4:	1940004c 	andi	r5,r3,1
   87fa8:	2800081e 	bne	r5,zero,87fcc <__lo0bits+0x90>
   87fac:	1806d07a 	srli	r3,r3,1
   87fb0:	1800051e 	bne	r3,zero,87fc8 <__lo0bits+0x8c>
   87fb4:	00800804 	movi	r2,32
   87fb8:	f800283a 	ret
   87fbc:	1806d43a 	srli	r3,r3,16
   87fc0:	00800404 	movi	r2,16
   87fc4:	003feb06 	br	87f74 <__alt_data_end+0xfffa7f74>
   87fc8:	10800044 	addi	r2,r2,1
   87fcc:	20c00015 	stw	r3,0(r4)
   87fd0:	f800283a 	ret
   87fd4:	0005883a 	mov	r2,zero
   87fd8:	f800283a 	ret
   87fdc:	1806d07a 	srli	r3,r3,1
   87fe0:	00800044 	movi	r2,1
   87fe4:	20c00015 	stw	r3,0(r4)
   87fe8:	f800283a 	ret

00087fec <__i2b>:
   87fec:	defffd04 	addi	sp,sp,-12
   87ff0:	dc000015 	stw	r16,0(sp)
   87ff4:	04000044 	movi	r16,1
   87ff8:	dc400115 	stw	r17,4(sp)
   87ffc:	2823883a 	mov	r17,r5
   88000:	800b883a 	mov	r5,r16
   88004:	dfc00215 	stw	ra,8(sp)
   88008:	0087bb80 	call	87bb8 <_Balloc>
   8800c:	14400515 	stw	r17,20(r2)
   88010:	14000415 	stw	r16,16(r2)
   88014:	dfc00217 	ldw	ra,8(sp)
   88018:	dc400117 	ldw	r17,4(sp)
   8801c:	dc000017 	ldw	r16,0(sp)
   88020:	dec00304 	addi	sp,sp,12
   88024:	f800283a 	ret

00088028 <__multiply>:
   88028:	deffef04 	addi	sp,sp,-68
   8802c:	dc400815 	stw	r17,32(sp)
   88030:	dc000715 	stw	r16,28(sp)
   88034:	34400417 	ldw	r17,16(r6)
   88038:	2c000417 	ldw	r16,16(r5)
   8803c:	dd800d15 	stw	r22,52(sp)
   88040:	dc800915 	stw	r18,36(sp)
   88044:	dfc01015 	stw	ra,64(sp)
   88048:	df000f15 	stw	fp,60(sp)
   8804c:	ddc00e15 	stw	r23,56(sp)
   88050:	dd400c15 	stw	r21,48(sp)
   88054:	dd000b15 	stw	r20,44(sp)
   88058:	dcc00a15 	stw	r19,40(sp)
   8805c:	2825883a 	mov	r18,r5
   88060:	302d883a 	mov	r22,r6
   88064:	8440050e 	bge	r16,r17,8807c <__multiply+0x54>
   88068:	8007883a 	mov	r3,r16
   8806c:	3025883a 	mov	r18,r6
   88070:	8821883a 	mov	r16,r17
   88074:	282d883a 	mov	r22,r5
   88078:	1823883a 	mov	r17,r3
   8807c:	90800217 	ldw	r2,8(r18)
   88080:	8447883a 	add	r3,r16,r17
   88084:	d8c00215 	stw	r3,8(sp)
   88088:	91400117 	ldw	r5,4(r18)
   8808c:	10c0010e 	bge	r2,r3,88094 <__multiply+0x6c>
   88090:	29400044 	addi	r5,r5,1
   88094:	0087bb80 	call	87bb8 <_Balloc>
   88098:	d8c00217 	ldw	r3,8(sp)
   8809c:	d8800615 	stw	r2,24(sp)
   880a0:	18eb883a 	add	r21,r3,r3
   880a4:	ad6b883a 	add	r21,r21,r21
   880a8:	10c00504 	addi	r3,r2,20
   880ac:	1d6b883a 	add	r21,r3,r21
   880b0:	d8c00115 	stw	r3,4(sp)
   880b4:	dd400315 	stw	r21,12(sp)
   880b8:	1805883a 	mov	r2,r3
   880bc:	1d40042e 	bgeu	r3,r21,880d0 <__multiply+0xa8>
   880c0:	d8c00317 	ldw	r3,12(sp)
   880c4:	10000015 	stw	zero,0(r2)
   880c8:	10800104 	addi	r2,r2,4
   880cc:	10fffc36 	bltu	r2,r3,880c0 <__alt_data_end+0xfffa80c0>
   880d0:	8c63883a 	add	r17,r17,r17
   880d4:	b5800504 	addi	r22,r22,20
   880d8:	8c63883a 	add	r17,r17,r17
   880dc:	94800504 	addi	r18,r18,20
   880e0:	8421883a 	add	r16,r16,r16
   880e4:	b463883a 	add	r17,r22,r17
   880e8:	8421883a 	add	r16,r16,r16
   880ec:	dd800015 	stw	r22,0(sp)
   880f0:	dc800415 	stw	r18,16(sp)
   880f4:	dc400515 	stw	r17,20(sp)
   880f8:	9429883a 	add	r20,r18,r16
   880fc:	b4404f2e 	bgeu	r22,r17,8823c <__multiply+0x214>
   88100:	d8c00017 	ldw	r3,0(sp)
   88104:	1c800017 	ldw	r18,0(r3)
   88108:	947fffcc 	andi	r17,r18,65535
   8810c:	88001e26 	beq	r17,zero,88188 <__multiply+0x160>
   88110:	dd800117 	ldw	r22,4(sp)
   88114:	dd400417 	ldw	r21,16(sp)
   88118:	0027883a 	mov	r19,zero
   8811c:	ac800017 	ldw	r18,0(r21)
   88120:	b4000017 	ldw	r16,0(r22)
   88124:	880b883a 	mov	r5,r17
   88128:	913fffcc 	andi	r4,r18,65535
   8812c:	0081b340 	call	81b34 <__mulsi3>
   88130:	9008d43a 	srli	r4,r18,16
   88134:	84bfffcc 	andi	r18,r16,65535
   88138:	1485883a 	add	r2,r2,r18
   8813c:	14e5883a 	add	r18,r2,r19
   88140:	8020d43a 	srli	r16,r16,16
   88144:	9026d43a 	srli	r19,r18,16
   88148:	880b883a 	mov	r5,r17
   8814c:	0081b340 	call	81b34 <__mulsi3>
   88150:	1405883a 	add	r2,r2,r16
   88154:	14e1883a 	add	r16,r2,r19
   88158:	90ffffcc 	andi	r3,r18,65535
   8815c:	8024943a 	slli	r18,r16,16
   88160:	ad400104 	addi	r21,r21,4
   88164:	b005883a 	mov	r2,r22
   88168:	90c6b03a 	or	r3,r18,r3
   8816c:	b0c00015 	stw	r3,0(r22)
   88170:	8026d43a 	srli	r19,r16,16
   88174:	b5800104 	addi	r22,r22,4
   88178:	ad3fe836 	bltu	r21,r20,8811c <__alt_data_end+0xfffa811c>
   8817c:	d8c00017 	ldw	r3,0(sp)
   88180:	14c00115 	stw	r19,4(r2)
   88184:	1c800017 	ldw	r18,0(r3)
   88188:	9024d43a 	srli	r18,r18,16
   8818c:	90002226 	beq	r18,zero,88218 <__multiply+0x1f0>
   88190:	d8c00117 	ldw	r3,4(sp)
   88194:	dd800417 	ldw	r22,16(sp)
   88198:	002f883a 	mov	r23,zero
   8819c:	1f000017 	ldw	fp,0(r3)
   881a0:	1823883a 	mov	r17,r3
   881a4:	182b883a 	mov	r21,r3
   881a8:	e021883a 	mov	r16,fp
   881ac:	00000106 	br	881b4 <__multiply+0x18c>
   881b0:	982b883a 	mov	r21,r19
   881b4:	b100000b 	ldhu	r4,0(r22)
   881b8:	8020d43a 	srli	r16,r16,16
   881bc:	900b883a 	mov	r5,r18
   881c0:	0081b340 	call	81b34 <__mulsi3>
   881c4:	1405883a 	add	r2,r2,r16
   881c8:	15ef883a 	add	r23,r2,r23
   881cc:	b804943a 	slli	r2,r23,16
   881d0:	e0ffffcc 	andi	r3,fp,65535
   881d4:	8c400104 	addi	r17,r17,4
   881d8:	10c6b03a 	or	r3,r2,r3
   881dc:	88ffff15 	stw	r3,-4(r17)
   881e0:	b5800104 	addi	r22,r22,4
   881e4:	b13fff17 	ldw	r4,-4(r22)
   881e8:	acc00104 	addi	r19,r21,4
   881ec:	900b883a 	mov	r5,r18
   881f0:	2008d43a 	srli	r4,r4,16
   881f4:	9c000017 	ldw	r16,0(r19)
   881f8:	0081b340 	call	81b34 <__mulsi3>
   881fc:	b806d43a 	srli	r3,r23,16
   88200:	813fffcc 	andi	r4,r16,65535
   88204:	1105883a 	add	r2,r2,r4
   88208:	10f9883a 	add	fp,r2,r3
   8820c:	e02ed43a 	srli	r23,fp,16
   88210:	b53fe736 	bltu	r22,r20,881b0 <__alt_data_end+0xfffa81b0>
   88214:	af000115 	stw	fp,4(r21)
   88218:	d8c00017 	ldw	r3,0(sp)
   8821c:	d9000517 	ldw	r4,20(sp)
   88220:	18c00104 	addi	r3,r3,4
   88224:	d8c00015 	stw	r3,0(sp)
   88228:	d8c00117 	ldw	r3,4(sp)
   8822c:	18c00104 	addi	r3,r3,4
   88230:	d8c00115 	stw	r3,4(sp)
   88234:	d8c00017 	ldw	r3,0(sp)
   88238:	193fb136 	bltu	r3,r4,88100 <__alt_data_end+0xfffa8100>
   8823c:	d8c00217 	ldw	r3,8(sp)
   88240:	00c00c0e 	bge	zero,r3,88274 <__multiply+0x24c>
   88244:	d8c00317 	ldw	r3,12(sp)
   88248:	18bfff17 	ldw	r2,-4(r3)
   8824c:	1d7fff04 	addi	r21,r3,-4
   88250:	10000326 	beq	r2,zero,88260 <__multiply+0x238>
   88254:	00000706 	br	88274 <__multiply+0x24c>
   88258:	a8800017 	ldw	r2,0(r21)
   8825c:	1000051e 	bne	r2,zero,88274 <__multiply+0x24c>
   88260:	d8c00217 	ldw	r3,8(sp)
   88264:	ad7fff04 	addi	r21,r21,-4
   88268:	18ffffc4 	addi	r3,r3,-1
   8826c:	d8c00215 	stw	r3,8(sp)
   88270:	183ff91e 	bne	r3,zero,88258 <__alt_data_end+0xfffa8258>
   88274:	d8c00617 	ldw	r3,24(sp)
   88278:	d9000217 	ldw	r4,8(sp)
   8827c:	1805883a 	mov	r2,r3
   88280:	19000415 	stw	r4,16(r3)
   88284:	dfc01017 	ldw	ra,64(sp)
   88288:	df000f17 	ldw	fp,60(sp)
   8828c:	ddc00e17 	ldw	r23,56(sp)
   88290:	dd800d17 	ldw	r22,52(sp)
   88294:	dd400c17 	ldw	r21,48(sp)
   88298:	dd000b17 	ldw	r20,44(sp)
   8829c:	dcc00a17 	ldw	r19,40(sp)
   882a0:	dc800917 	ldw	r18,36(sp)
   882a4:	dc400817 	ldw	r17,32(sp)
   882a8:	dc000717 	ldw	r16,28(sp)
   882ac:	dec01104 	addi	sp,sp,68
   882b0:	f800283a 	ret

000882b4 <__pow5mult>:
   882b4:	defffa04 	addi	sp,sp,-24
   882b8:	dcc00315 	stw	r19,12(sp)
   882bc:	dc000015 	stw	r16,0(sp)
   882c0:	dfc00515 	stw	ra,20(sp)
   882c4:	dd000415 	stw	r20,16(sp)
   882c8:	dc800215 	stw	r18,8(sp)
   882cc:	dc400115 	stw	r17,4(sp)
   882d0:	308000cc 	andi	r2,r6,3
   882d4:	3021883a 	mov	r16,r6
   882d8:	2027883a 	mov	r19,r4
   882dc:	10002f1e 	bne	r2,zero,8839c <__pow5mult+0xe8>
   882e0:	2825883a 	mov	r18,r5
   882e4:	8021d0ba 	srai	r16,r16,2
   882e8:	80001a26 	beq	r16,zero,88354 <__pow5mult+0xa0>
   882ec:	9c401217 	ldw	r17,72(r19)
   882f0:	8800061e 	bne	r17,zero,8830c <__pow5mult+0x58>
   882f4:	00003406 	br	883c8 <__pow5mult+0x114>
   882f8:	8021d07a 	srai	r16,r16,1
   882fc:	80001526 	beq	r16,zero,88354 <__pow5mult+0xa0>
   88300:	88800017 	ldw	r2,0(r17)
   88304:	10001c26 	beq	r2,zero,88378 <__pow5mult+0xc4>
   88308:	1023883a 	mov	r17,r2
   8830c:	8080004c 	andi	r2,r16,1
   88310:	103ff926 	beq	r2,zero,882f8 <__alt_data_end+0xfffa82f8>
   88314:	880d883a 	mov	r6,r17
   88318:	900b883a 	mov	r5,r18
   8831c:	9809883a 	mov	r4,r19
   88320:	00880280 	call	88028 <__multiply>
   88324:	90001b26 	beq	r18,zero,88394 <__pow5mult+0xe0>
   88328:	91000117 	ldw	r4,4(r18)
   8832c:	98c01317 	ldw	r3,76(r19)
   88330:	8021d07a 	srai	r16,r16,1
   88334:	2109883a 	add	r4,r4,r4
   88338:	2109883a 	add	r4,r4,r4
   8833c:	1907883a 	add	r3,r3,r4
   88340:	19000017 	ldw	r4,0(r3)
   88344:	91000015 	stw	r4,0(r18)
   88348:	1c800015 	stw	r18,0(r3)
   8834c:	1025883a 	mov	r18,r2
   88350:	803feb1e 	bne	r16,zero,88300 <__alt_data_end+0xfffa8300>
   88354:	9005883a 	mov	r2,r18
   88358:	dfc00517 	ldw	ra,20(sp)
   8835c:	dd000417 	ldw	r20,16(sp)
   88360:	dcc00317 	ldw	r19,12(sp)
   88364:	dc800217 	ldw	r18,8(sp)
   88368:	dc400117 	ldw	r17,4(sp)
   8836c:	dc000017 	ldw	r16,0(sp)
   88370:	dec00604 	addi	sp,sp,24
   88374:	f800283a 	ret
   88378:	880d883a 	mov	r6,r17
   8837c:	880b883a 	mov	r5,r17
   88380:	9809883a 	mov	r4,r19
   88384:	00880280 	call	88028 <__multiply>
   88388:	88800015 	stw	r2,0(r17)
   8838c:	10000015 	stw	zero,0(r2)
   88390:	003fdd06 	br	88308 <__alt_data_end+0xfffa8308>
   88394:	1025883a 	mov	r18,r2
   88398:	003fd706 	br	882f8 <__alt_data_end+0xfffa82f8>
   8839c:	10bfffc4 	addi	r2,r2,-1
   883a0:	1085883a 	add	r2,r2,r2
   883a4:	00c00274 	movhi	r3,9
   883a8:	18c56604 	addi	r3,r3,5528
   883ac:	1085883a 	add	r2,r2,r2
   883b0:	1885883a 	add	r2,r3,r2
   883b4:	11800017 	ldw	r6,0(r2)
   883b8:	000f883a 	mov	r7,zero
   883bc:	0087c880 	call	87c88 <__multadd>
   883c0:	1025883a 	mov	r18,r2
   883c4:	003fc706 	br	882e4 <__alt_data_end+0xfffa82e4>
   883c8:	05000044 	movi	r20,1
   883cc:	a00b883a 	mov	r5,r20
   883d0:	9809883a 	mov	r4,r19
   883d4:	0087bb80 	call	87bb8 <_Balloc>
   883d8:	1023883a 	mov	r17,r2
   883dc:	00809c44 	movi	r2,625
   883e0:	88800515 	stw	r2,20(r17)
   883e4:	8d000415 	stw	r20,16(r17)
   883e8:	9c401215 	stw	r17,72(r19)
   883ec:	88000015 	stw	zero,0(r17)
   883f0:	003fc606 	br	8830c <__alt_data_end+0xfffa830c>

000883f4 <__lshift>:
   883f4:	defff904 	addi	sp,sp,-28
   883f8:	dd400515 	stw	r21,20(sp)
   883fc:	dcc00315 	stw	r19,12(sp)
   88400:	302bd17a 	srai	r21,r6,5
   88404:	2cc00417 	ldw	r19,16(r5)
   88408:	28800217 	ldw	r2,8(r5)
   8840c:	dd000415 	stw	r20,16(sp)
   88410:	ace7883a 	add	r19,r21,r19
   88414:	dc800215 	stw	r18,8(sp)
   88418:	dc400115 	stw	r17,4(sp)
   8841c:	dc000015 	stw	r16,0(sp)
   88420:	dfc00615 	stw	ra,24(sp)
   88424:	9c000044 	addi	r16,r19,1
   88428:	2823883a 	mov	r17,r5
   8842c:	3029883a 	mov	r20,r6
   88430:	2025883a 	mov	r18,r4
   88434:	29400117 	ldw	r5,4(r5)
   88438:	1400030e 	bge	r2,r16,88448 <__lshift+0x54>
   8843c:	1085883a 	add	r2,r2,r2
   88440:	29400044 	addi	r5,r5,1
   88444:	143ffd16 	blt	r2,r16,8843c <__alt_data_end+0xfffa843c>
   88448:	9009883a 	mov	r4,r18
   8844c:	0087bb80 	call	87bb8 <_Balloc>
   88450:	10c00504 	addi	r3,r2,20
   88454:	0540070e 	bge	zero,r21,88474 <__lshift+0x80>
   88458:	ad6b883a 	add	r21,r21,r21
   8845c:	ad6b883a 	add	r21,r21,r21
   88460:	1809883a 	mov	r4,r3
   88464:	1d47883a 	add	r3,r3,r21
   88468:	20000015 	stw	zero,0(r4)
   8846c:	21000104 	addi	r4,r4,4
   88470:	193ffd1e 	bne	r3,r4,88468 <__alt_data_end+0xfffa8468>
   88474:	8a000417 	ldw	r8,16(r17)
   88478:	89000504 	addi	r4,r17,20
   8847c:	a18007cc 	andi	r6,r20,31
   88480:	4211883a 	add	r8,r8,r8
   88484:	4211883a 	add	r8,r8,r8
   88488:	2211883a 	add	r8,r4,r8
   8848c:	30002326 	beq	r6,zero,8851c <__lshift+0x128>
   88490:	02400804 	movi	r9,32
   88494:	4993c83a 	sub	r9,r9,r6
   88498:	000b883a 	mov	r5,zero
   8849c:	21c00017 	ldw	r7,0(r4)
   884a0:	1815883a 	mov	r10,r3
   884a4:	18c00104 	addi	r3,r3,4
   884a8:	398e983a 	sll	r7,r7,r6
   884ac:	21000104 	addi	r4,r4,4
   884b0:	394ab03a 	or	r5,r7,r5
   884b4:	197fff15 	stw	r5,-4(r3)
   884b8:	217fff17 	ldw	r5,-4(r4)
   884bc:	2a4ad83a 	srl	r5,r5,r9
   884c0:	223ff636 	bltu	r4,r8,8849c <__alt_data_end+0xfffa849c>
   884c4:	51400115 	stw	r5,4(r10)
   884c8:	28001a1e 	bne	r5,zero,88534 <__lshift+0x140>
   884cc:	843fffc4 	addi	r16,r16,-1
   884d0:	14000415 	stw	r16,16(r2)
   884d4:	88000826 	beq	r17,zero,884f8 <__lshift+0x104>
   884d8:	89000117 	ldw	r4,4(r17)
   884dc:	90c01317 	ldw	r3,76(r18)
   884e0:	2109883a 	add	r4,r4,r4
   884e4:	2109883a 	add	r4,r4,r4
   884e8:	1907883a 	add	r3,r3,r4
   884ec:	19000017 	ldw	r4,0(r3)
   884f0:	89000015 	stw	r4,0(r17)
   884f4:	1c400015 	stw	r17,0(r3)
   884f8:	dfc00617 	ldw	ra,24(sp)
   884fc:	dd400517 	ldw	r21,20(sp)
   88500:	dd000417 	ldw	r20,16(sp)
   88504:	dcc00317 	ldw	r19,12(sp)
   88508:	dc800217 	ldw	r18,8(sp)
   8850c:	dc400117 	ldw	r17,4(sp)
   88510:	dc000017 	ldw	r16,0(sp)
   88514:	dec00704 	addi	sp,sp,28
   88518:	f800283a 	ret
   8851c:	21400017 	ldw	r5,0(r4)
   88520:	18c00104 	addi	r3,r3,4
   88524:	21000104 	addi	r4,r4,4
   88528:	197fff15 	stw	r5,-4(r3)
   8852c:	223ffb36 	bltu	r4,r8,8851c <__alt_data_end+0xfffa851c>
   88530:	003fe606 	br	884cc <__alt_data_end+0xfffa84cc>
   88534:	9c000084 	addi	r16,r19,2
   88538:	003fe406 	br	884cc <__alt_data_end+0xfffa84cc>

0008853c <__mcmp>:
   8853c:	20800417 	ldw	r2,16(r4)
   88540:	28c00417 	ldw	r3,16(r5)
   88544:	10c5c83a 	sub	r2,r2,r3
   88548:	1000111e 	bne	r2,zero,88590 <__mcmp+0x54>
   8854c:	18c7883a 	add	r3,r3,r3
   88550:	18c7883a 	add	r3,r3,r3
   88554:	21000504 	addi	r4,r4,20
   88558:	29400504 	addi	r5,r5,20
   8855c:	20c5883a 	add	r2,r4,r3
   88560:	28cb883a 	add	r5,r5,r3
   88564:	00000106 	br	8856c <__mcmp+0x30>
   88568:	20800a2e 	bgeu	r4,r2,88594 <__mcmp+0x58>
   8856c:	10bfff04 	addi	r2,r2,-4
   88570:	297fff04 	addi	r5,r5,-4
   88574:	11800017 	ldw	r6,0(r2)
   88578:	28c00017 	ldw	r3,0(r5)
   8857c:	30fffa26 	beq	r6,r3,88568 <__alt_data_end+0xfffa8568>
   88580:	30c00236 	bltu	r6,r3,8858c <__mcmp+0x50>
   88584:	00800044 	movi	r2,1
   88588:	f800283a 	ret
   8858c:	00bfffc4 	movi	r2,-1
   88590:	f800283a 	ret
   88594:	0005883a 	mov	r2,zero
   88598:	f800283a 	ret

0008859c <__mdiff>:
   8859c:	28c00417 	ldw	r3,16(r5)
   885a0:	30800417 	ldw	r2,16(r6)
   885a4:	defffa04 	addi	sp,sp,-24
   885a8:	dcc00315 	stw	r19,12(sp)
   885ac:	dc800215 	stw	r18,8(sp)
   885b0:	dfc00515 	stw	ra,20(sp)
   885b4:	dd000415 	stw	r20,16(sp)
   885b8:	dc400115 	stw	r17,4(sp)
   885bc:	dc000015 	stw	r16,0(sp)
   885c0:	1887c83a 	sub	r3,r3,r2
   885c4:	2825883a 	mov	r18,r5
   885c8:	3027883a 	mov	r19,r6
   885cc:	1800141e 	bne	r3,zero,88620 <__mdiff+0x84>
   885d0:	1085883a 	add	r2,r2,r2
   885d4:	1085883a 	add	r2,r2,r2
   885d8:	2a000504 	addi	r8,r5,20
   885dc:	34000504 	addi	r16,r6,20
   885e0:	4087883a 	add	r3,r8,r2
   885e4:	8085883a 	add	r2,r16,r2
   885e8:	00000106 	br	885f0 <__mdiff+0x54>
   885ec:	40c0592e 	bgeu	r8,r3,88754 <__mdiff+0x1b8>
   885f0:	18ffff04 	addi	r3,r3,-4
   885f4:	10bfff04 	addi	r2,r2,-4
   885f8:	19c00017 	ldw	r7,0(r3)
   885fc:	11400017 	ldw	r5,0(r2)
   88600:	397ffa26 	beq	r7,r5,885ec <__alt_data_end+0xfffa85ec>
   88604:	3940592e 	bgeu	r7,r5,8876c <__mdiff+0x1d0>
   88608:	9005883a 	mov	r2,r18
   8860c:	4023883a 	mov	r17,r8
   88610:	9825883a 	mov	r18,r19
   88614:	05000044 	movi	r20,1
   88618:	1027883a 	mov	r19,r2
   8861c:	00000406 	br	88630 <__mdiff+0x94>
   88620:	18005616 	blt	r3,zero,8877c <__mdiff+0x1e0>
   88624:	34400504 	addi	r17,r6,20
   88628:	2c000504 	addi	r16,r5,20
   8862c:	0029883a 	mov	r20,zero
   88630:	91400117 	ldw	r5,4(r18)
   88634:	0087bb80 	call	87bb8 <_Balloc>
   88638:	92400417 	ldw	r9,16(r18)
   8863c:	9b000417 	ldw	r12,16(r19)
   88640:	12c00504 	addi	r11,r2,20
   88644:	4a51883a 	add	r8,r9,r9
   88648:	6319883a 	add	r12,r12,r12
   8864c:	4211883a 	add	r8,r8,r8
   88650:	6319883a 	add	r12,r12,r12
   88654:	15000315 	stw	r20,12(r2)
   88658:	8211883a 	add	r8,r16,r8
   8865c:	8b19883a 	add	r12,r17,r12
   88660:	0007883a 	mov	r3,zero
   88664:	81400017 	ldw	r5,0(r16)
   88668:	89c00017 	ldw	r7,0(r17)
   8866c:	59800104 	addi	r6,r11,4
   88670:	293fffcc 	andi	r4,r5,65535
   88674:	20c7883a 	add	r3,r4,r3
   88678:	393fffcc 	andi	r4,r7,65535
   8867c:	1909c83a 	sub	r4,r3,r4
   88680:	280ad43a 	srli	r5,r5,16
   88684:	380ed43a 	srli	r7,r7,16
   88688:	2007d43a 	srai	r3,r4,16
   8868c:	213fffcc 	andi	r4,r4,65535
   88690:	29cbc83a 	sub	r5,r5,r7
   88694:	28c7883a 	add	r3,r5,r3
   88698:	180a943a 	slli	r5,r3,16
   8869c:	8c400104 	addi	r17,r17,4
   886a0:	84000104 	addi	r16,r16,4
   886a4:	2908b03a 	or	r4,r5,r4
   886a8:	59000015 	stw	r4,0(r11)
   886ac:	1807d43a 	srai	r3,r3,16
   886b0:	3015883a 	mov	r10,r6
   886b4:	3017883a 	mov	r11,r6
   886b8:	8b3fea36 	bltu	r17,r12,88664 <__alt_data_end+0xfffa8664>
   886bc:	8200162e 	bgeu	r16,r8,88718 <__mdiff+0x17c>
   886c0:	8017883a 	mov	r11,r16
   886c4:	59400017 	ldw	r5,0(r11)
   886c8:	31800104 	addi	r6,r6,4
   886cc:	5ac00104 	addi	r11,r11,4
   886d0:	293fffcc 	andi	r4,r5,65535
   886d4:	20c7883a 	add	r3,r4,r3
   886d8:	280ed43a 	srli	r7,r5,16
   886dc:	180bd43a 	srai	r5,r3,16
   886e0:	193fffcc 	andi	r4,r3,65535
   886e4:	3947883a 	add	r3,r7,r5
   886e8:	180a943a 	slli	r5,r3,16
   886ec:	1807d43a 	srai	r3,r3,16
   886f0:	2908b03a 	or	r4,r5,r4
   886f4:	313fff15 	stw	r4,-4(r6)
   886f8:	5a3ff236 	bltu	r11,r8,886c4 <__alt_data_end+0xfffa86c4>
   886fc:	0406303a 	nor	r3,zero,r16
   88700:	1a07883a 	add	r3,r3,r8
   88704:	1806d0ba 	srli	r3,r3,2
   88708:	18c00044 	addi	r3,r3,1
   8870c:	18c7883a 	add	r3,r3,r3
   88710:	18c7883a 	add	r3,r3,r3
   88714:	50d5883a 	add	r10,r10,r3
   88718:	50ffff04 	addi	r3,r10,-4
   8871c:	2000041e 	bne	r4,zero,88730 <__mdiff+0x194>
   88720:	18ffff04 	addi	r3,r3,-4
   88724:	19000017 	ldw	r4,0(r3)
   88728:	4a7fffc4 	addi	r9,r9,-1
   8872c:	203ffc26 	beq	r4,zero,88720 <__alt_data_end+0xfffa8720>
   88730:	12400415 	stw	r9,16(r2)
   88734:	dfc00517 	ldw	ra,20(sp)
   88738:	dd000417 	ldw	r20,16(sp)
   8873c:	dcc00317 	ldw	r19,12(sp)
   88740:	dc800217 	ldw	r18,8(sp)
   88744:	dc400117 	ldw	r17,4(sp)
   88748:	dc000017 	ldw	r16,0(sp)
   8874c:	dec00604 	addi	sp,sp,24
   88750:	f800283a 	ret
   88754:	000b883a 	mov	r5,zero
   88758:	0087bb80 	call	87bb8 <_Balloc>
   8875c:	00c00044 	movi	r3,1
   88760:	10c00415 	stw	r3,16(r2)
   88764:	10000515 	stw	zero,20(r2)
   88768:	003ff206 	br	88734 <__alt_data_end+0xfffa8734>
   8876c:	8023883a 	mov	r17,r16
   88770:	0029883a 	mov	r20,zero
   88774:	4021883a 	mov	r16,r8
   88778:	003fad06 	br	88630 <__alt_data_end+0xfffa8630>
   8877c:	9005883a 	mov	r2,r18
   88780:	94400504 	addi	r17,r18,20
   88784:	9c000504 	addi	r16,r19,20
   88788:	9825883a 	mov	r18,r19
   8878c:	05000044 	movi	r20,1
   88790:	1027883a 	mov	r19,r2
   88794:	003fa606 	br	88630 <__alt_data_end+0xfffa8630>

00088798 <__ulp>:
   88798:	295ffc2c 	andhi	r5,r5,32752
   8879c:	00bf3034 	movhi	r2,64704
   887a0:	2887883a 	add	r3,r5,r2
   887a4:	00c0020e 	bge	zero,r3,887b0 <__ulp+0x18>
   887a8:	0005883a 	mov	r2,zero
   887ac:	f800283a 	ret
   887b0:	00c7c83a 	sub	r3,zero,r3
   887b4:	1807d53a 	srai	r3,r3,20
   887b8:	008004c4 	movi	r2,19
   887bc:	10c00b0e 	bge	r2,r3,887ec <__ulp+0x54>
   887c0:	18bffb04 	addi	r2,r3,-20
   887c4:	01000784 	movi	r4,30
   887c8:	0007883a 	mov	r3,zero
   887cc:	20800516 	blt	r4,r2,887e4 <__ulp+0x4c>
   887d0:	010007c4 	movi	r4,31
   887d4:	2089c83a 	sub	r4,r4,r2
   887d8:	00800044 	movi	r2,1
   887dc:	1104983a 	sll	r2,r2,r4
   887e0:	f800283a 	ret
   887e4:	00800044 	movi	r2,1
   887e8:	f800283a 	ret
   887ec:	01400234 	movhi	r5,8
   887f0:	28c7d83a 	sra	r3,r5,r3
   887f4:	0005883a 	mov	r2,zero
   887f8:	f800283a 	ret

000887fc <__b2d>:
   887fc:	defffa04 	addi	sp,sp,-24
   88800:	dc000015 	stw	r16,0(sp)
   88804:	24000417 	ldw	r16,16(r4)
   88808:	dc400115 	stw	r17,4(sp)
   8880c:	24400504 	addi	r17,r4,20
   88810:	8421883a 	add	r16,r16,r16
   88814:	8421883a 	add	r16,r16,r16
   88818:	8c21883a 	add	r16,r17,r16
   8881c:	dc800215 	stw	r18,8(sp)
   88820:	84bfff17 	ldw	r18,-4(r16)
   88824:	dd000415 	stw	r20,16(sp)
   88828:	dcc00315 	stw	r19,12(sp)
   8882c:	9009883a 	mov	r4,r18
   88830:	2829883a 	mov	r20,r5
   88834:	dfc00515 	stw	ra,20(sp)
   88838:	0087ed40 	call	87ed4 <__hi0bits>
   8883c:	00c00804 	movi	r3,32
   88840:	1889c83a 	sub	r4,r3,r2
   88844:	a1000015 	stw	r4,0(r20)
   88848:	01000284 	movi	r4,10
   8884c:	84ffff04 	addi	r19,r16,-4
   88850:	20801216 	blt	r4,r2,8889c <__b2d+0xa0>
   88854:	018002c4 	movi	r6,11
   88858:	308dc83a 	sub	r6,r6,r2
   8885c:	9186d83a 	srl	r3,r18,r6
   88860:	18cffc34 	orhi	r3,r3,16368
   88864:	8cc0212e 	bgeu	r17,r19,888ec <__b2d+0xf0>
   88868:	813ffe17 	ldw	r4,-8(r16)
   8886c:	218cd83a 	srl	r6,r4,r6
   88870:	10800544 	addi	r2,r2,21
   88874:	9084983a 	sll	r2,r18,r2
   88878:	1184b03a 	or	r2,r2,r6
   8887c:	dfc00517 	ldw	ra,20(sp)
   88880:	dd000417 	ldw	r20,16(sp)
   88884:	dcc00317 	ldw	r19,12(sp)
   88888:	dc800217 	ldw	r18,8(sp)
   8888c:	dc400117 	ldw	r17,4(sp)
   88890:	dc000017 	ldw	r16,0(sp)
   88894:	dec00604 	addi	sp,sp,24
   88898:	f800283a 	ret
   8889c:	8cc00f2e 	bgeu	r17,r19,888dc <__b2d+0xe0>
   888a0:	117ffd44 	addi	r5,r2,-11
   888a4:	80bffe17 	ldw	r2,-8(r16)
   888a8:	28000e26 	beq	r5,zero,888e4 <__b2d+0xe8>
   888ac:	1949c83a 	sub	r4,r3,r5
   888b0:	9164983a 	sll	r18,r18,r5
   888b4:	1106d83a 	srl	r3,r2,r4
   888b8:	81bffe04 	addi	r6,r16,-8
   888bc:	948ffc34 	orhi	r18,r18,16368
   888c0:	90c6b03a 	or	r3,r18,r3
   888c4:	89800e2e 	bgeu	r17,r6,88900 <__b2d+0x104>
   888c8:	81bffd17 	ldw	r6,-12(r16)
   888cc:	1144983a 	sll	r2,r2,r5
   888d0:	310ad83a 	srl	r5,r6,r4
   888d4:	2884b03a 	or	r2,r5,r2
   888d8:	003fe806 	br	8887c <__alt_data_end+0xfffa887c>
   888dc:	10bffd44 	addi	r2,r2,-11
   888e0:	1000041e 	bne	r2,zero,888f4 <__b2d+0xf8>
   888e4:	90cffc34 	orhi	r3,r18,16368
   888e8:	003fe406 	br	8887c <__alt_data_end+0xfffa887c>
   888ec:	000d883a 	mov	r6,zero
   888f0:	003fdf06 	br	88870 <__alt_data_end+0xfffa8870>
   888f4:	90a4983a 	sll	r18,r18,r2
   888f8:	0005883a 	mov	r2,zero
   888fc:	003ff906 	br	888e4 <__alt_data_end+0xfffa88e4>
   88900:	1144983a 	sll	r2,r2,r5
   88904:	003fdd06 	br	8887c <__alt_data_end+0xfffa887c>

00088908 <__d2b>:
   88908:	defff804 	addi	sp,sp,-32
   8890c:	dc000215 	stw	r16,8(sp)
   88910:	3021883a 	mov	r16,r6
   88914:	dc400315 	stw	r17,12(sp)
   88918:	8022907a 	slli	r17,r16,1
   8891c:	dd000615 	stw	r20,24(sp)
   88920:	2829883a 	mov	r20,r5
   88924:	01400044 	movi	r5,1
   88928:	dcc00515 	stw	r19,20(sp)
   8892c:	dc800415 	stw	r18,16(sp)
   88930:	dfc00715 	stw	ra,28(sp)
   88934:	3825883a 	mov	r18,r7
   88938:	8822d57a 	srli	r17,r17,21
   8893c:	0087bb80 	call	87bb8 <_Balloc>
   88940:	1027883a 	mov	r19,r2
   88944:	00800434 	movhi	r2,16
   88948:	10bfffc4 	addi	r2,r2,-1
   8894c:	808c703a 	and	r6,r16,r2
   88950:	88000126 	beq	r17,zero,88958 <__d2b+0x50>
   88954:	31800434 	orhi	r6,r6,16
   88958:	d9800015 	stw	r6,0(sp)
   8895c:	a0002426 	beq	r20,zero,889f0 <__d2b+0xe8>
   88960:	d9000104 	addi	r4,sp,4
   88964:	dd000115 	stw	r20,4(sp)
   88968:	0087f3c0 	call	87f3c <__lo0bits>
   8896c:	d8c00017 	ldw	r3,0(sp)
   88970:	10002f1e 	bne	r2,zero,88a30 <__d2b+0x128>
   88974:	d9000117 	ldw	r4,4(sp)
   88978:	99000515 	stw	r4,20(r19)
   8897c:	1821003a 	cmpeq	r16,r3,zero
   88980:	01000084 	movi	r4,2
   88984:	2421c83a 	sub	r16,r4,r16
   88988:	98c00615 	stw	r3,24(r19)
   8898c:	9c000415 	stw	r16,16(r19)
   88990:	88001f1e 	bne	r17,zero,88a10 <__d2b+0x108>
   88994:	10bef384 	addi	r2,r2,-1074
   88998:	90800015 	stw	r2,0(r18)
   8899c:	00900034 	movhi	r2,16384
   889a0:	10bfffc4 	addi	r2,r2,-1
   889a4:	8085883a 	add	r2,r16,r2
   889a8:	1085883a 	add	r2,r2,r2
   889ac:	1085883a 	add	r2,r2,r2
   889b0:	9885883a 	add	r2,r19,r2
   889b4:	11000517 	ldw	r4,20(r2)
   889b8:	8020917a 	slli	r16,r16,5
   889bc:	0087ed40 	call	87ed4 <__hi0bits>
   889c0:	d8c00817 	ldw	r3,32(sp)
   889c4:	8085c83a 	sub	r2,r16,r2
   889c8:	18800015 	stw	r2,0(r3)
   889cc:	9805883a 	mov	r2,r19
   889d0:	dfc00717 	ldw	ra,28(sp)
   889d4:	dd000617 	ldw	r20,24(sp)
   889d8:	dcc00517 	ldw	r19,20(sp)
   889dc:	dc800417 	ldw	r18,16(sp)
   889e0:	dc400317 	ldw	r17,12(sp)
   889e4:	dc000217 	ldw	r16,8(sp)
   889e8:	dec00804 	addi	sp,sp,32
   889ec:	f800283a 	ret
   889f0:	d809883a 	mov	r4,sp
   889f4:	0087f3c0 	call	87f3c <__lo0bits>
   889f8:	d8c00017 	ldw	r3,0(sp)
   889fc:	04000044 	movi	r16,1
   88a00:	9c000415 	stw	r16,16(r19)
   88a04:	98c00515 	stw	r3,20(r19)
   88a08:	10800804 	addi	r2,r2,32
   88a0c:	883fe126 	beq	r17,zero,88994 <__alt_data_end+0xfffa8994>
   88a10:	00c00d44 	movi	r3,53
   88a14:	8c7ef344 	addi	r17,r17,-1075
   88a18:	88a3883a 	add	r17,r17,r2
   88a1c:	1885c83a 	sub	r2,r3,r2
   88a20:	d8c00817 	ldw	r3,32(sp)
   88a24:	94400015 	stw	r17,0(r18)
   88a28:	18800015 	stw	r2,0(r3)
   88a2c:	003fe706 	br	889cc <__alt_data_end+0xfffa89cc>
   88a30:	01000804 	movi	r4,32
   88a34:	2089c83a 	sub	r4,r4,r2
   88a38:	1908983a 	sll	r4,r3,r4
   88a3c:	d9400117 	ldw	r5,4(sp)
   88a40:	1886d83a 	srl	r3,r3,r2
   88a44:	2148b03a 	or	r4,r4,r5
   88a48:	99000515 	stw	r4,20(r19)
   88a4c:	d8c00015 	stw	r3,0(sp)
   88a50:	003fca06 	br	8897c <__alt_data_end+0xfffa897c>

00088a54 <__ratio>:
   88a54:	defff904 	addi	sp,sp,-28
   88a58:	dc400315 	stw	r17,12(sp)
   88a5c:	2823883a 	mov	r17,r5
   88a60:	d9400104 	addi	r5,sp,4
   88a64:	dfc00615 	stw	ra,24(sp)
   88a68:	dcc00515 	stw	r19,20(sp)
   88a6c:	dc800415 	stw	r18,16(sp)
   88a70:	2027883a 	mov	r19,r4
   88a74:	dc000215 	stw	r16,8(sp)
   88a78:	00887fc0 	call	887fc <__b2d>
   88a7c:	d80b883a 	mov	r5,sp
   88a80:	8809883a 	mov	r4,r17
   88a84:	1025883a 	mov	r18,r2
   88a88:	1821883a 	mov	r16,r3
   88a8c:	00887fc0 	call	887fc <__b2d>
   88a90:	8a000417 	ldw	r8,16(r17)
   88a94:	99000417 	ldw	r4,16(r19)
   88a98:	d9400117 	ldw	r5,4(sp)
   88a9c:	2209c83a 	sub	r4,r4,r8
   88aa0:	2010917a 	slli	r8,r4,5
   88aa4:	d9000017 	ldw	r4,0(sp)
   88aa8:	2909c83a 	sub	r4,r5,r4
   88aac:	4109883a 	add	r4,r8,r4
   88ab0:	01000e0e 	bge	zero,r4,88aec <__ratio+0x98>
   88ab4:	2008953a 	slli	r4,r4,20
   88ab8:	2421883a 	add	r16,r4,r16
   88abc:	100d883a 	mov	r6,r2
   88ac0:	180f883a 	mov	r7,r3
   88ac4:	9009883a 	mov	r4,r18
   88ac8:	800b883a 	mov	r5,r16
   88acc:	008cbd80 	call	8cbd8 <__divdf3>
   88ad0:	dfc00617 	ldw	ra,24(sp)
   88ad4:	dcc00517 	ldw	r19,20(sp)
   88ad8:	dc800417 	ldw	r18,16(sp)
   88adc:	dc400317 	ldw	r17,12(sp)
   88ae0:	dc000217 	ldw	r16,8(sp)
   88ae4:	dec00704 	addi	sp,sp,28
   88ae8:	f800283a 	ret
   88aec:	2008953a 	slli	r4,r4,20
   88af0:	1907c83a 	sub	r3,r3,r4
   88af4:	003ff106 	br	88abc <__alt_data_end+0xfffa8abc>

00088af8 <_mprec_log10>:
   88af8:	defffe04 	addi	sp,sp,-8
   88afc:	dc000015 	stw	r16,0(sp)
   88b00:	dfc00115 	stw	ra,4(sp)
   88b04:	008005c4 	movi	r2,23
   88b08:	2021883a 	mov	r16,r4
   88b0c:	11000d0e 	bge	r2,r4,88b44 <_mprec_log10+0x4c>
   88b10:	0005883a 	mov	r2,zero
   88b14:	00cffc34 	movhi	r3,16368
   88b18:	843fffc4 	addi	r16,r16,-1
   88b1c:	000d883a 	mov	r6,zero
   88b20:	01d00934 	movhi	r7,16420
   88b24:	1009883a 	mov	r4,r2
   88b28:	180b883a 	mov	r5,r3
   88b2c:	008d8000 	call	8d800 <__muldf3>
   88b30:	803ff91e 	bne	r16,zero,88b18 <__alt_data_end+0xfffa8b18>
   88b34:	dfc00117 	ldw	ra,4(sp)
   88b38:	dc000017 	ldw	r16,0(sp)
   88b3c:	dec00204 	addi	sp,sp,8
   88b40:	f800283a 	ret
   88b44:	202090fa 	slli	r16,r4,3
   88b48:	00800274 	movhi	r2,9
   88b4c:	10857d04 	addi	r2,r2,5620
   88b50:	1421883a 	add	r16,r2,r16
   88b54:	80800017 	ldw	r2,0(r16)
   88b58:	80c00117 	ldw	r3,4(r16)
   88b5c:	dfc00117 	ldw	ra,4(sp)
   88b60:	dc000017 	ldw	r16,0(sp)
   88b64:	dec00204 	addi	sp,sp,8
   88b68:	f800283a 	ret

00088b6c <__copybits>:
   88b6c:	297fffc4 	addi	r5,r5,-1
   88b70:	280fd17a 	srai	r7,r5,5
   88b74:	30c00417 	ldw	r3,16(r6)
   88b78:	30800504 	addi	r2,r6,20
   88b7c:	39c00044 	addi	r7,r7,1
   88b80:	18c7883a 	add	r3,r3,r3
   88b84:	39cf883a 	add	r7,r7,r7
   88b88:	18c7883a 	add	r3,r3,r3
   88b8c:	39cf883a 	add	r7,r7,r7
   88b90:	10c7883a 	add	r3,r2,r3
   88b94:	21cf883a 	add	r7,r4,r7
   88b98:	10c00d2e 	bgeu	r2,r3,88bd0 <__copybits+0x64>
   88b9c:	200b883a 	mov	r5,r4
   88ba0:	12000017 	ldw	r8,0(r2)
   88ba4:	29400104 	addi	r5,r5,4
   88ba8:	10800104 	addi	r2,r2,4
   88bac:	2a3fff15 	stw	r8,-4(r5)
   88bb0:	10fffb36 	bltu	r2,r3,88ba0 <__alt_data_end+0xfffa8ba0>
   88bb4:	1985c83a 	sub	r2,r3,r6
   88bb8:	10bffac4 	addi	r2,r2,-21
   88bbc:	1004d0ba 	srli	r2,r2,2
   88bc0:	10800044 	addi	r2,r2,1
   88bc4:	1085883a 	add	r2,r2,r2
   88bc8:	1085883a 	add	r2,r2,r2
   88bcc:	2089883a 	add	r4,r4,r2
   88bd0:	21c0032e 	bgeu	r4,r7,88be0 <__copybits+0x74>
   88bd4:	20000015 	stw	zero,0(r4)
   88bd8:	21000104 	addi	r4,r4,4
   88bdc:	21fffd36 	bltu	r4,r7,88bd4 <__alt_data_end+0xfffa8bd4>
   88be0:	f800283a 	ret

00088be4 <__any_on>:
   88be4:	20c00417 	ldw	r3,16(r4)
   88be8:	2805d17a 	srai	r2,r5,5
   88bec:	21000504 	addi	r4,r4,20
   88bf0:	18800d0e 	bge	r3,r2,88c28 <__any_on+0x44>
   88bf4:	18c7883a 	add	r3,r3,r3
   88bf8:	18c7883a 	add	r3,r3,r3
   88bfc:	20c7883a 	add	r3,r4,r3
   88c00:	20c0192e 	bgeu	r4,r3,88c68 <__any_on+0x84>
   88c04:	18bfff17 	ldw	r2,-4(r3)
   88c08:	18ffff04 	addi	r3,r3,-4
   88c0c:	1000041e 	bne	r2,zero,88c20 <__any_on+0x3c>
   88c10:	20c0142e 	bgeu	r4,r3,88c64 <__any_on+0x80>
   88c14:	18ffff04 	addi	r3,r3,-4
   88c18:	19400017 	ldw	r5,0(r3)
   88c1c:	283ffc26 	beq	r5,zero,88c10 <__alt_data_end+0xfffa8c10>
   88c20:	00800044 	movi	r2,1
   88c24:	f800283a 	ret
   88c28:	10c00a0e 	bge	r2,r3,88c54 <__any_on+0x70>
   88c2c:	1085883a 	add	r2,r2,r2
   88c30:	1085883a 	add	r2,r2,r2
   88c34:	294007cc 	andi	r5,r5,31
   88c38:	2087883a 	add	r3,r4,r2
   88c3c:	283ff026 	beq	r5,zero,88c00 <__alt_data_end+0xfffa8c00>
   88c40:	19800017 	ldw	r6,0(r3)
   88c44:	3144d83a 	srl	r2,r6,r5
   88c48:	114a983a 	sll	r5,r2,r5
   88c4c:	317ff41e 	bne	r6,r5,88c20 <__alt_data_end+0xfffa8c20>
   88c50:	003feb06 	br	88c00 <__alt_data_end+0xfffa8c00>
   88c54:	1085883a 	add	r2,r2,r2
   88c58:	1085883a 	add	r2,r2,r2
   88c5c:	2087883a 	add	r3,r4,r2
   88c60:	003fe706 	br	88c00 <__alt_data_end+0xfffa8c00>
   88c64:	f800283a 	ret
   88c68:	0005883a 	mov	r2,zero
   88c6c:	f800283a 	ret

00088c70 <_putc_r>:
   88c70:	defffc04 	addi	sp,sp,-16
   88c74:	dc000215 	stw	r16,8(sp)
   88c78:	dfc00315 	stw	ra,12(sp)
   88c7c:	2021883a 	mov	r16,r4
   88c80:	20000226 	beq	r4,zero,88c8c <_putc_r+0x1c>
   88c84:	20800e17 	ldw	r2,56(r4)
   88c88:	10001b26 	beq	r2,zero,88cf8 <_putc_r+0x88>
   88c8c:	30800217 	ldw	r2,8(r6)
   88c90:	10bfffc4 	addi	r2,r2,-1
   88c94:	30800215 	stw	r2,8(r6)
   88c98:	10000a16 	blt	r2,zero,88cc4 <_putc_r+0x54>
   88c9c:	30800017 	ldw	r2,0(r6)
   88ca0:	11400005 	stb	r5,0(r2)
   88ca4:	30800017 	ldw	r2,0(r6)
   88ca8:	10c00044 	addi	r3,r2,1
   88cac:	30c00015 	stw	r3,0(r6)
   88cb0:	10800003 	ldbu	r2,0(r2)
   88cb4:	dfc00317 	ldw	ra,12(sp)
   88cb8:	dc000217 	ldw	r16,8(sp)
   88cbc:	dec00404 	addi	sp,sp,16
   88cc0:	f800283a 	ret
   88cc4:	30c00617 	ldw	r3,24(r6)
   88cc8:	10c00616 	blt	r2,r3,88ce4 <_putc_r+0x74>
   88ccc:	30800017 	ldw	r2,0(r6)
   88cd0:	00c00284 	movi	r3,10
   88cd4:	11400005 	stb	r5,0(r2)
   88cd8:	30800017 	ldw	r2,0(r6)
   88cdc:	11400003 	ldbu	r5,0(r2)
   88ce0:	28fff11e 	bne	r5,r3,88ca8 <__alt_data_end+0xfffa8ca8>
   88ce4:	8009883a 	mov	r4,r16
   88ce8:	dfc00317 	ldw	ra,12(sp)
   88cec:	dc000217 	ldw	r16,8(sp)
   88cf0:	dec00404 	addi	sp,sp,16
   88cf4:	008ad141 	jmpi	8ad14 <__swbuf_r>
   88cf8:	d9400015 	stw	r5,0(sp)
   88cfc:	d9800115 	stw	r6,4(sp)
   88d00:	00861900 	call	86190 <__sinit>
   88d04:	d9800117 	ldw	r6,4(sp)
   88d08:	d9400017 	ldw	r5,0(sp)
   88d0c:	003fdf06 	br	88c8c <__alt_data_end+0xfffa8c8c>

00088d10 <putc>:
   88d10:	00800274 	movhi	r2,9
   88d14:	defffc04 	addi	sp,sp,-16
   88d18:	108f7e04 	addi	r2,r2,15864
   88d1c:	dc000115 	stw	r16,4(sp)
   88d20:	14000017 	ldw	r16,0(r2)
   88d24:	dc400215 	stw	r17,8(sp)
   88d28:	dfc00315 	stw	ra,12(sp)
   88d2c:	2023883a 	mov	r17,r4
   88d30:	80000226 	beq	r16,zero,88d3c <putc+0x2c>
   88d34:	80800e17 	ldw	r2,56(r16)
   88d38:	10001a26 	beq	r2,zero,88da4 <putc+0x94>
   88d3c:	28800217 	ldw	r2,8(r5)
   88d40:	10bfffc4 	addi	r2,r2,-1
   88d44:	28800215 	stw	r2,8(r5)
   88d48:	10000b16 	blt	r2,zero,88d78 <putc+0x68>
   88d4c:	28800017 	ldw	r2,0(r5)
   88d50:	14400005 	stb	r17,0(r2)
   88d54:	28800017 	ldw	r2,0(r5)
   88d58:	10c00044 	addi	r3,r2,1
   88d5c:	28c00015 	stw	r3,0(r5)
   88d60:	10800003 	ldbu	r2,0(r2)
   88d64:	dfc00317 	ldw	ra,12(sp)
   88d68:	dc400217 	ldw	r17,8(sp)
   88d6c:	dc000117 	ldw	r16,4(sp)
   88d70:	dec00404 	addi	sp,sp,16
   88d74:	f800283a 	ret
   88d78:	28c00617 	ldw	r3,24(r5)
   88d7c:	10c00e16 	blt	r2,r3,88db8 <putc+0xa8>
   88d80:	28800017 	ldw	r2,0(r5)
   88d84:	01000284 	movi	r4,10
   88d88:	14400005 	stb	r17,0(r2)
   88d8c:	28800017 	ldw	r2,0(r5)
   88d90:	10c00003 	ldbu	r3,0(r2)
   88d94:	193ff01e 	bne	r3,r4,88d58 <__alt_data_end+0xfffa8d58>
   88d98:	280d883a 	mov	r6,r5
   88d9c:	180b883a 	mov	r5,r3
   88da0:	00000706 	br	88dc0 <putc+0xb0>
   88da4:	8009883a 	mov	r4,r16
   88da8:	d9400015 	stw	r5,0(sp)
   88dac:	00861900 	call	86190 <__sinit>
   88db0:	d9400017 	ldw	r5,0(sp)
   88db4:	003fe106 	br	88d3c <__alt_data_end+0xfffa8d3c>
   88db8:	280d883a 	mov	r6,r5
   88dbc:	880b883a 	mov	r5,r17
   88dc0:	8009883a 	mov	r4,r16
   88dc4:	dfc00317 	ldw	ra,12(sp)
   88dc8:	dc400217 	ldw	r17,8(sp)
   88dcc:	dc000117 	ldw	r16,4(sp)
   88dd0:	dec00404 	addi	sp,sp,16
   88dd4:	008ad141 	jmpi	8ad14 <__swbuf_r>

00088dd8 <_realloc_r>:
   88dd8:	defff604 	addi	sp,sp,-40
   88ddc:	dc800215 	stw	r18,8(sp)
   88de0:	dfc00915 	stw	ra,36(sp)
   88de4:	df000815 	stw	fp,32(sp)
   88de8:	ddc00715 	stw	r23,28(sp)
   88dec:	dd800615 	stw	r22,24(sp)
   88df0:	dd400515 	stw	r21,20(sp)
   88df4:	dd000415 	stw	r20,16(sp)
   88df8:	dcc00315 	stw	r19,12(sp)
   88dfc:	dc400115 	stw	r17,4(sp)
   88e00:	dc000015 	stw	r16,0(sp)
   88e04:	3025883a 	mov	r18,r6
   88e08:	2800b726 	beq	r5,zero,890e8 <_realloc_r+0x310>
   88e0c:	282b883a 	mov	r21,r5
   88e10:	2029883a 	mov	r20,r4
   88e14:	008f16c0 	call	8f16c <__malloc_lock>
   88e18:	a8bfff17 	ldw	r2,-4(r21)
   88e1c:	043fff04 	movi	r16,-4
   88e20:	90c002c4 	addi	r3,r18,11
   88e24:	01000584 	movi	r4,22
   88e28:	acfffe04 	addi	r19,r21,-8
   88e2c:	1420703a 	and	r16,r2,r16
   88e30:	20c0332e 	bgeu	r4,r3,88f00 <_realloc_r+0x128>
   88e34:	047ffe04 	movi	r17,-8
   88e38:	1c62703a 	and	r17,r3,r17
   88e3c:	8807883a 	mov	r3,r17
   88e40:	88005816 	blt	r17,zero,88fa4 <_realloc_r+0x1cc>
   88e44:	8c805736 	bltu	r17,r18,88fa4 <_realloc_r+0x1cc>
   88e48:	80c0300e 	bge	r16,r3,88f0c <_realloc_r+0x134>
   88e4c:	07000274 	movhi	fp,9
   88e50:	e709f904 	addi	fp,fp,10212
   88e54:	e1c00217 	ldw	r7,8(fp)
   88e58:	9c09883a 	add	r4,r19,r16
   88e5c:	22000117 	ldw	r8,4(r4)
   88e60:	21c06326 	beq	r4,r7,88ff0 <_realloc_r+0x218>
   88e64:	017fff84 	movi	r5,-2
   88e68:	414a703a 	and	r5,r8,r5
   88e6c:	214b883a 	add	r5,r4,r5
   88e70:	29800117 	ldw	r6,4(r5)
   88e74:	3180004c 	andi	r6,r6,1
   88e78:	30003f26 	beq	r6,zero,88f78 <_realloc_r+0x1a0>
   88e7c:	1080004c 	andi	r2,r2,1
   88e80:	10008326 	beq	r2,zero,89090 <_realloc_r+0x2b8>
   88e84:	900b883a 	mov	r5,r18
   88e88:	a009883a 	mov	r4,r20
   88e8c:	0086efc0 	call	86efc <_malloc_r>
   88e90:	1025883a 	mov	r18,r2
   88e94:	10011e26 	beq	r2,zero,89310 <_realloc_r+0x538>
   88e98:	a93fff17 	ldw	r4,-4(r21)
   88e9c:	10fffe04 	addi	r3,r2,-8
   88ea0:	00bfff84 	movi	r2,-2
   88ea4:	2084703a 	and	r2,r4,r2
   88ea8:	9885883a 	add	r2,r19,r2
   88eac:	1880ee26 	beq	r3,r2,89268 <_realloc_r+0x490>
   88eb0:	81bfff04 	addi	r6,r16,-4
   88eb4:	00800904 	movi	r2,36
   88eb8:	1180b836 	bltu	r2,r6,8919c <_realloc_r+0x3c4>
   88ebc:	00c004c4 	movi	r3,19
   88ec0:	19809636 	bltu	r3,r6,8911c <_realloc_r+0x344>
   88ec4:	9005883a 	mov	r2,r18
   88ec8:	a807883a 	mov	r3,r21
   88ecc:	19000017 	ldw	r4,0(r3)
   88ed0:	11000015 	stw	r4,0(r2)
   88ed4:	19000117 	ldw	r4,4(r3)
   88ed8:	11000115 	stw	r4,4(r2)
   88edc:	18c00217 	ldw	r3,8(r3)
   88ee0:	10c00215 	stw	r3,8(r2)
   88ee4:	a80b883a 	mov	r5,r21
   88ee8:	a009883a 	mov	r4,r20
   88eec:	00863040 	call	86304 <_free_r>
   88ef0:	a009883a 	mov	r4,r20
   88ef4:	008f1900 	call	8f190 <__malloc_unlock>
   88ef8:	9005883a 	mov	r2,r18
   88efc:	00001206 	br	88f48 <_realloc_r+0x170>
   88f00:	00c00404 	movi	r3,16
   88f04:	1823883a 	mov	r17,r3
   88f08:	003fce06 	br	88e44 <__alt_data_end+0xfffa8e44>
   88f0c:	a825883a 	mov	r18,r21
   88f10:	8445c83a 	sub	r2,r16,r17
   88f14:	00c003c4 	movi	r3,15
   88f18:	18802636 	bltu	r3,r2,88fb4 <_realloc_r+0x1dc>
   88f1c:	99800117 	ldw	r6,4(r19)
   88f20:	9c07883a 	add	r3,r19,r16
   88f24:	3180004c 	andi	r6,r6,1
   88f28:	3420b03a 	or	r16,r6,r16
   88f2c:	9c000115 	stw	r16,4(r19)
   88f30:	18800117 	ldw	r2,4(r3)
   88f34:	10800054 	ori	r2,r2,1
   88f38:	18800115 	stw	r2,4(r3)
   88f3c:	a009883a 	mov	r4,r20
   88f40:	008f1900 	call	8f190 <__malloc_unlock>
   88f44:	9005883a 	mov	r2,r18
   88f48:	dfc00917 	ldw	ra,36(sp)
   88f4c:	df000817 	ldw	fp,32(sp)
   88f50:	ddc00717 	ldw	r23,28(sp)
   88f54:	dd800617 	ldw	r22,24(sp)
   88f58:	dd400517 	ldw	r21,20(sp)
   88f5c:	dd000417 	ldw	r20,16(sp)
   88f60:	dcc00317 	ldw	r19,12(sp)
   88f64:	dc800217 	ldw	r18,8(sp)
   88f68:	dc400117 	ldw	r17,4(sp)
   88f6c:	dc000017 	ldw	r16,0(sp)
   88f70:	dec00a04 	addi	sp,sp,40
   88f74:	f800283a 	ret
   88f78:	017fff04 	movi	r5,-4
   88f7c:	414a703a 	and	r5,r8,r5
   88f80:	814d883a 	add	r6,r16,r5
   88f84:	30c01f16 	blt	r6,r3,89004 <_realloc_r+0x22c>
   88f88:	20800317 	ldw	r2,12(r4)
   88f8c:	20c00217 	ldw	r3,8(r4)
   88f90:	a825883a 	mov	r18,r21
   88f94:	3021883a 	mov	r16,r6
   88f98:	18800315 	stw	r2,12(r3)
   88f9c:	10c00215 	stw	r3,8(r2)
   88fa0:	003fdb06 	br	88f10 <__alt_data_end+0xfffa8f10>
   88fa4:	00800304 	movi	r2,12
   88fa8:	a0800015 	stw	r2,0(r20)
   88fac:	0005883a 	mov	r2,zero
   88fb0:	003fe506 	br	88f48 <__alt_data_end+0xfffa8f48>
   88fb4:	98c00117 	ldw	r3,4(r19)
   88fb8:	9c4b883a 	add	r5,r19,r17
   88fbc:	11000054 	ori	r4,r2,1
   88fc0:	18c0004c 	andi	r3,r3,1
   88fc4:	1c62b03a 	or	r17,r3,r17
   88fc8:	9c400115 	stw	r17,4(r19)
   88fcc:	29000115 	stw	r4,4(r5)
   88fd0:	2885883a 	add	r2,r5,r2
   88fd4:	10c00117 	ldw	r3,4(r2)
   88fd8:	29400204 	addi	r5,r5,8
   88fdc:	a009883a 	mov	r4,r20
   88fe0:	18c00054 	ori	r3,r3,1
   88fe4:	10c00115 	stw	r3,4(r2)
   88fe8:	00863040 	call	86304 <_free_r>
   88fec:	003fd306 	br	88f3c <__alt_data_end+0xfffa8f3c>
   88ff0:	017fff04 	movi	r5,-4
   88ff4:	414a703a 	and	r5,r8,r5
   88ff8:	89800404 	addi	r6,r17,16
   88ffc:	8151883a 	add	r8,r16,r5
   89000:	4180590e 	bge	r8,r6,89168 <_realloc_r+0x390>
   89004:	1080004c 	andi	r2,r2,1
   89008:	103f9e1e 	bne	r2,zero,88e84 <__alt_data_end+0xfffa8e84>
   8900c:	adbffe17 	ldw	r22,-8(r21)
   89010:	00bfff04 	movi	r2,-4
   89014:	9dadc83a 	sub	r22,r19,r22
   89018:	b1800117 	ldw	r6,4(r22)
   8901c:	3084703a 	and	r2,r6,r2
   89020:	20002026 	beq	r4,zero,890a4 <_realloc_r+0x2cc>
   89024:	80af883a 	add	r23,r16,r2
   89028:	b96f883a 	add	r23,r23,r5
   8902c:	21c05f26 	beq	r4,r7,891ac <_realloc_r+0x3d4>
   89030:	b8c01c16 	blt	r23,r3,890a4 <_realloc_r+0x2cc>
   89034:	20800317 	ldw	r2,12(r4)
   89038:	20c00217 	ldw	r3,8(r4)
   8903c:	81bfff04 	addi	r6,r16,-4
   89040:	01000904 	movi	r4,36
   89044:	18800315 	stw	r2,12(r3)
   89048:	10c00215 	stw	r3,8(r2)
   8904c:	b0c00217 	ldw	r3,8(r22)
   89050:	b0800317 	ldw	r2,12(r22)
   89054:	b4800204 	addi	r18,r22,8
   89058:	18800315 	stw	r2,12(r3)
   8905c:	10c00215 	stw	r3,8(r2)
   89060:	21801b36 	bltu	r4,r6,890d0 <_realloc_r+0x2f8>
   89064:	008004c4 	movi	r2,19
   89068:	1180352e 	bgeu	r2,r6,89140 <_realloc_r+0x368>
   8906c:	a8800017 	ldw	r2,0(r21)
   89070:	b0800215 	stw	r2,8(r22)
   89074:	a8800117 	ldw	r2,4(r21)
   89078:	b0800315 	stw	r2,12(r22)
   8907c:	008006c4 	movi	r2,27
   89080:	11807f36 	bltu	r2,r6,89280 <_realloc_r+0x4a8>
   89084:	b0800404 	addi	r2,r22,16
   89088:	ad400204 	addi	r21,r21,8
   8908c:	00002d06 	br	89144 <_realloc_r+0x36c>
   89090:	adbffe17 	ldw	r22,-8(r21)
   89094:	00bfff04 	movi	r2,-4
   89098:	9dadc83a 	sub	r22,r19,r22
   8909c:	b1000117 	ldw	r4,4(r22)
   890a0:	2084703a 	and	r2,r4,r2
   890a4:	b03f7726 	beq	r22,zero,88e84 <__alt_data_end+0xfffa8e84>
   890a8:	80af883a 	add	r23,r16,r2
   890ac:	b8ff7516 	blt	r23,r3,88e84 <__alt_data_end+0xfffa8e84>
   890b0:	b0800317 	ldw	r2,12(r22)
   890b4:	b0c00217 	ldw	r3,8(r22)
   890b8:	81bfff04 	addi	r6,r16,-4
   890bc:	01000904 	movi	r4,36
   890c0:	18800315 	stw	r2,12(r3)
   890c4:	10c00215 	stw	r3,8(r2)
   890c8:	b4800204 	addi	r18,r22,8
   890cc:	21bfe52e 	bgeu	r4,r6,89064 <__alt_data_end+0xfffa9064>
   890d0:	a80b883a 	mov	r5,r21
   890d4:	9009883a 	mov	r4,r18
   890d8:	00879340 	call	87934 <memmove>
   890dc:	b821883a 	mov	r16,r23
   890e0:	b027883a 	mov	r19,r22
   890e4:	003f8a06 	br	88f10 <__alt_data_end+0xfffa8f10>
   890e8:	300b883a 	mov	r5,r6
   890ec:	dfc00917 	ldw	ra,36(sp)
   890f0:	df000817 	ldw	fp,32(sp)
   890f4:	ddc00717 	ldw	r23,28(sp)
   890f8:	dd800617 	ldw	r22,24(sp)
   890fc:	dd400517 	ldw	r21,20(sp)
   89100:	dd000417 	ldw	r20,16(sp)
   89104:	dcc00317 	ldw	r19,12(sp)
   89108:	dc800217 	ldw	r18,8(sp)
   8910c:	dc400117 	ldw	r17,4(sp)
   89110:	dc000017 	ldw	r16,0(sp)
   89114:	dec00a04 	addi	sp,sp,40
   89118:	0086efc1 	jmpi	86efc <_malloc_r>
   8911c:	a8c00017 	ldw	r3,0(r21)
   89120:	90c00015 	stw	r3,0(r18)
   89124:	a8c00117 	ldw	r3,4(r21)
   89128:	90c00115 	stw	r3,4(r18)
   8912c:	00c006c4 	movi	r3,27
   89130:	19804536 	bltu	r3,r6,89248 <_realloc_r+0x470>
   89134:	90800204 	addi	r2,r18,8
   89138:	a8c00204 	addi	r3,r21,8
   8913c:	003f6306 	br	88ecc <__alt_data_end+0xfffa8ecc>
   89140:	9005883a 	mov	r2,r18
   89144:	a8c00017 	ldw	r3,0(r21)
   89148:	b821883a 	mov	r16,r23
   8914c:	b027883a 	mov	r19,r22
   89150:	10c00015 	stw	r3,0(r2)
   89154:	a8c00117 	ldw	r3,4(r21)
   89158:	10c00115 	stw	r3,4(r2)
   8915c:	a8c00217 	ldw	r3,8(r21)
   89160:	10c00215 	stw	r3,8(r2)
   89164:	003f6a06 	br	88f10 <__alt_data_end+0xfffa8f10>
   89168:	9c67883a 	add	r19,r19,r17
   8916c:	4445c83a 	sub	r2,r8,r17
   89170:	e4c00215 	stw	r19,8(fp)
   89174:	10800054 	ori	r2,r2,1
   89178:	98800115 	stw	r2,4(r19)
   8917c:	a8bfff17 	ldw	r2,-4(r21)
   89180:	a009883a 	mov	r4,r20
   89184:	1080004c 	andi	r2,r2,1
   89188:	1462b03a 	or	r17,r2,r17
   8918c:	ac7fff15 	stw	r17,-4(r21)
   89190:	008f1900 	call	8f190 <__malloc_unlock>
   89194:	a805883a 	mov	r2,r21
   89198:	003f6b06 	br	88f48 <__alt_data_end+0xfffa8f48>
   8919c:	a80b883a 	mov	r5,r21
   891a0:	9009883a 	mov	r4,r18
   891a4:	00879340 	call	87934 <memmove>
   891a8:	003f4e06 	br	88ee4 <__alt_data_end+0xfffa8ee4>
   891ac:	89000404 	addi	r4,r17,16
   891b0:	b93fbc16 	blt	r23,r4,890a4 <__alt_data_end+0xfffa90a4>
   891b4:	b0800317 	ldw	r2,12(r22)
   891b8:	b0c00217 	ldw	r3,8(r22)
   891bc:	81bfff04 	addi	r6,r16,-4
   891c0:	01000904 	movi	r4,36
   891c4:	18800315 	stw	r2,12(r3)
   891c8:	10c00215 	stw	r3,8(r2)
   891cc:	b4800204 	addi	r18,r22,8
   891d0:	21804336 	bltu	r4,r6,892e0 <_realloc_r+0x508>
   891d4:	008004c4 	movi	r2,19
   891d8:	11803f2e 	bgeu	r2,r6,892d8 <_realloc_r+0x500>
   891dc:	a8800017 	ldw	r2,0(r21)
   891e0:	b0800215 	stw	r2,8(r22)
   891e4:	a8800117 	ldw	r2,4(r21)
   891e8:	b0800315 	stw	r2,12(r22)
   891ec:	008006c4 	movi	r2,27
   891f0:	11803f36 	bltu	r2,r6,892f0 <_realloc_r+0x518>
   891f4:	b0800404 	addi	r2,r22,16
   891f8:	ad400204 	addi	r21,r21,8
   891fc:	a8c00017 	ldw	r3,0(r21)
   89200:	10c00015 	stw	r3,0(r2)
   89204:	a8c00117 	ldw	r3,4(r21)
   89208:	10c00115 	stw	r3,4(r2)
   8920c:	a8c00217 	ldw	r3,8(r21)
   89210:	10c00215 	stw	r3,8(r2)
   89214:	b447883a 	add	r3,r22,r17
   89218:	bc45c83a 	sub	r2,r23,r17
   8921c:	e0c00215 	stw	r3,8(fp)
   89220:	10800054 	ori	r2,r2,1
   89224:	18800115 	stw	r2,4(r3)
   89228:	b0800117 	ldw	r2,4(r22)
   8922c:	a009883a 	mov	r4,r20
   89230:	1080004c 	andi	r2,r2,1
   89234:	1462b03a 	or	r17,r2,r17
   89238:	b4400115 	stw	r17,4(r22)
   8923c:	008f1900 	call	8f190 <__malloc_unlock>
   89240:	9005883a 	mov	r2,r18
   89244:	003f4006 	br	88f48 <__alt_data_end+0xfffa8f48>
   89248:	a8c00217 	ldw	r3,8(r21)
   8924c:	90c00215 	stw	r3,8(r18)
   89250:	a8c00317 	ldw	r3,12(r21)
   89254:	90c00315 	stw	r3,12(r18)
   89258:	30801126 	beq	r6,r2,892a0 <_realloc_r+0x4c8>
   8925c:	90800404 	addi	r2,r18,16
   89260:	a8c00404 	addi	r3,r21,16
   89264:	003f1906 	br	88ecc <__alt_data_end+0xfffa8ecc>
   89268:	90ffff17 	ldw	r3,-4(r18)
   8926c:	00bfff04 	movi	r2,-4
   89270:	a825883a 	mov	r18,r21
   89274:	1884703a 	and	r2,r3,r2
   89278:	80a1883a 	add	r16,r16,r2
   8927c:	003f2406 	br	88f10 <__alt_data_end+0xfffa8f10>
   89280:	a8800217 	ldw	r2,8(r21)
   89284:	b0800415 	stw	r2,16(r22)
   89288:	a8800317 	ldw	r2,12(r21)
   8928c:	b0800515 	stw	r2,20(r22)
   89290:	31000a26 	beq	r6,r4,892bc <_realloc_r+0x4e4>
   89294:	b0800604 	addi	r2,r22,24
   89298:	ad400404 	addi	r21,r21,16
   8929c:	003fa906 	br	89144 <__alt_data_end+0xfffa9144>
   892a0:	a9000417 	ldw	r4,16(r21)
   892a4:	90800604 	addi	r2,r18,24
   892a8:	a8c00604 	addi	r3,r21,24
   892ac:	91000415 	stw	r4,16(r18)
   892b0:	a9000517 	ldw	r4,20(r21)
   892b4:	91000515 	stw	r4,20(r18)
   892b8:	003f0406 	br	88ecc <__alt_data_end+0xfffa8ecc>
   892bc:	a8c00417 	ldw	r3,16(r21)
   892c0:	ad400604 	addi	r21,r21,24
   892c4:	b0800804 	addi	r2,r22,32
   892c8:	b0c00615 	stw	r3,24(r22)
   892cc:	a8ffff17 	ldw	r3,-4(r21)
   892d0:	b0c00715 	stw	r3,28(r22)
   892d4:	003f9b06 	br	89144 <__alt_data_end+0xfffa9144>
   892d8:	9005883a 	mov	r2,r18
   892dc:	003fc706 	br	891fc <__alt_data_end+0xfffa91fc>
   892e0:	a80b883a 	mov	r5,r21
   892e4:	9009883a 	mov	r4,r18
   892e8:	00879340 	call	87934 <memmove>
   892ec:	003fc906 	br	89214 <__alt_data_end+0xfffa9214>
   892f0:	a8800217 	ldw	r2,8(r21)
   892f4:	b0800415 	stw	r2,16(r22)
   892f8:	a8800317 	ldw	r2,12(r21)
   892fc:	b0800515 	stw	r2,20(r22)
   89300:	31000726 	beq	r6,r4,89320 <_realloc_r+0x548>
   89304:	b0800604 	addi	r2,r22,24
   89308:	ad400404 	addi	r21,r21,16
   8930c:	003fbb06 	br	891fc <__alt_data_end+0xfffa91fc>
   89310:	a009883a 	mov	r4,r20
   89314:	008f1900 	call	8f190 <__malloc_unlock>
   89318:	0005883a 	mov	r2,zero
   8931c:	003f0a06 	br	88f48 <__alt_data_end+0xfffa8f48>
   89320:	a8c00417 	ldw	r3,16(r21)
   89324:	ad400604 	addi	r21,r21,24
   89328:	b0800804 	addi	r2,r22,32
   8932c:	b0c00615 	stw	r3,24(r22)
   89330:	a8ffff17 	ldw	r3,-4(r21)
   89334:	b0c00715 	stw	r3,28(r22)
   89338:	003fb006 	br	891fc <__alt_data_end+0xfffa91fc>

0008933c <__fpclassifyd>:
   8933c:	00a00034 	movhi	r2,32768
   89340:	10bfffc4 	addi	r2,r2,-1
   89344:	2884703a 	and	r2,r5,r2
   89348:	10000726 	beq	r2,zero,89368 <__fpclassifyd+0x2c>
   8934c:	00fffc34 	movhi	r3,65520
   89350:	019ff834 	movhi	r6,32736
   89354:	28c7883a 	add	r3,r5,r3
   89358:	31bfffc4 	addi	r6,r6,-1
   8935c:	30c00536 	bltu	r6,r3,89374 <__fpclassifyd+0x38>
   89360:	00800104 	movi	r2,4
   89364:	f800283a 	ret
   89368:	2000021e 	bne	r4,zero,89374 <__fpclassifyd+0x38>
   8936c:	00800084 	movi	r2,2
   89370:	f800283a 	ret
   89374:	00dffc34 	movhi	r3,32752
   89378:	019ff834 	movhi	r6,32736
   8937c:	28cb883a 	add	r5,r5,r3
   89380:	31bfffc4 	addi	r6,r6,-1
   89384:	317ff62e 	bgeu	r6,r5,89360 <__alt_data_end+0xfffa9360>
   89388:	01400434 	movhi	r5,16
   8938c:	297fffc4 	addi	r5,r5,-1
   89390:	28800236 	bltu	r5,r2,8939c <__fpclassifyd+0x60>
   89394:	008000c4 	movi	r2,3
   89398:	f800283a 	ret
   8939c:	10c00226 	beq	r2,r3,893a8 <__fpclassifyd+0x6c>
   893a0:	0005883a 	mov	r2,zero
   893a4:	f800283a 	ret
   893a8:	2005003a 	cmpeq	r2,r4,zero
   893ac:	f800283a 	ret

000893b0 <_sbrk_r>:
   893b0:	defffd04 	addi	sp,sp,-12
   893b4:	dc000015 	stw	r16,0(sp)
   893b8:	04000274 	movhi	r16,9
   893bc:	dc400115 	stw	r17,4(sp)
   893c0:	84191e04 	addi	r16,r16,25720
   893c4:	2023883a 	mov	r17,r4
   893c8:	2809883a 	mov	r4,r5
   893cc:	dfc00215 	stw	ra,8(sp)
   893d0:	80000015 	stw	zero,0(r16)
   893d4:	008f3b40 	call	8f3b4 <sbrk>
   893d8:	00ffffc4 	movi	r3,-1
   893dc:	10c00526 	beq	r2,r3,893f4 <_sbrk_r+0x44>
   893e0:	dfc00217 	ldw	ra,8(sp)
   893e4:	dc400117 	ldw	r17,4(sp)
   893e8:	dc000017 	ldw	r16,0(sp)
   893ec:	dec00304 	addi	sp,sp,12
   893f0:	f800283a 	ret
   893f4:	80c00017 	ldw	r3,0(r16)
   893f8:	183ff926 	beq	r3,zero,893e0 <__alt_data_end+0xfffa93e0>
   893fc:	88c00015 	stw	r3,0(r17)
   89400:	003ff706 	br	893e0 <__alt_data_end+0xfffa93e0>

00089404 <__sread>:
   89404:	defffe04 	addi	sp,sp,-8
   89408:	dc000015 	stw	r16,0(sp)
   8940c:	2821883a 	mov	r16,r5
   89410:	2940038f 	ldh	r5,14(r5)
   89414:	dfc00115 	stw	ra,4(sp)
   89418:	008b4180 	call	8b418 <_read_r>
   8941c:	10000716 	blt	r2,zero,8943c <__sread+0x38>
   89420:	80c01417 	ldw	r3,80(r16)
   89424:	1887883a 	add	r3,r3,r2
   89428:	80c01415 	stw	r3,80(r16)
   8942c:	dfc00117 	ldw	ra,4(sp)
   89430:	dc000017 	ldw	r16,0(sp)
   89434:	dec00204 	addi	sp,sp,8
   89438:	f800283a 	ret
   8943c:	80c0030b 	ldhu	r3,12(r16)
   89440:	18fbffcc 	andi	r3,r3,61439
   89444:	80c0030d 	sth	r3,12(r16)
   89448:	dfc00117 	ldw	ra,4(sp)
   8944c:	dc000017 	ldw	r16,0(sp)
   89450:	dec00204 	addi	sp,sp,8
   89454:	f800283a 	ret

00089458 <__seofread>:
   89458:	0005883a 	mov	r2,zero
   8945c:	f800283a 	ret

00089460 <__swrite>:
   89460:	2880030b 	ldhu	r2,12(r5)
   89464:	defffb04 	addi	sp,sp,-20
   89468:	dcc00315 	stw	r19,12(sp)
   8946c:	dc800215 	stw	r18,8(sp)
   89470:	dc400115 	stw	r17,4(sp)
   89474:	dc000015 	stw	r16,0(sp)
   89478:	dfc00415 	stw	ra,16(sp)
   8947c:	10c0400c 	andi	r3,r2,256
   89480:	2821883a 	mov	r16,r5
   89484:	2023883a 	mov	r17,r4
   89488:	3025883a 	mov	r18,r6
   8948c:	3827883a 	mov	r19,r7
   89490:	18000526 	beq	r3,zero,894a8 <__swrite+0x48>
   89494:	2940038f 	ldh	r5,14(r5)
   89498:	01c00084 	movi	r7,2
   8949c:	000d883a 	mov	r6,zero
   894a0:	008b3b80 	call	8b3b8 <_lseek_r>
   894a4:	8080030b 	ldhu	r2,12(r16)
   894a8:	8140038f 	ldh	r5,14(r16)
   894ac:	10bbffcc 	andi	r2,r2,61439
   894b0:	980f883a 	mov	r7,r19
   894b4:	900d883a 	mov	r6,r18
   894b8:	8809883a 	mov	r4,r17
   894bc:	8080030d 	sth	r2,12(r16)
   894c0:	dfc00417 	ldw	ra,16(sp)
   894c4:	dcc00317 	ldw	r19,12(sp)
   894c8:	dc800217 	ldw	r18,8(sp)
   894cc:	dc400117 	ldw	r17,4(sp)
   894d0:	dc000017 	ldw	r16,0(sp)
   894d4:	dec00504 	addi	sp,sp,20
   894d8:	008ae6c1 	jmpi	8ae6c <_write_r>

000894dc <__sseek>:
   894dc:	defffe04 	addi	sp,sp,-8
   894e0:	dc000015 	stw	r16,0(sp)
   894e4:	2821883a 	mov	r16,r5
   894e8:	2940038f 	ldh	r5,14(r5)
   894ec:	dfc00115 	stw	ra,4(sp)
   894f0:	008b3b80 	call	8b3b8 <_lseek_r>
   894f4:	00ffffc4 	movi	r3,-1
   894f8:	10c00826 	beq	r2,r3,8951c <__sseek+0x40>
   894fc:	80c0030b 	ldhu	r3,12(r16)
   89500:	80801415 	stw	r2,80(r16)
   89504:	18c40014 	ori	r3,r3,4096
   89508:	80c0030d 	sth	r3,12(r16)
   8950c:	dfc00117 	ldw	ra,4(sp)
   89510:	dc000017 	ldw	r16,0(sp)
   89514:	dec00204 	addi	sp,sp,8
   89518:	f800283a 	ret
   8951c:	80c0030b 	ldhu	r3,12(r16)
   89520:	18fbffcc 	andi	r3,r3,61439
   89524:	80c0030d 	sth	r3,12(r16)
   89528:	dfc00117 	ldw	ra,4(sp)
   8952c:	dc000017 	ldw	r16,0(sp)
   89530:	dec00204 	addi	sp,sp,8
   89534:	f800283a 	ret

00089538 <__sclose>:
   89538:	2940038f 	ldh	r5,14(r5)
   8953c:	008aecc1 	jmpi	8aecc <_close_r>

00089540 <strcmp>:
   89540:	2144b03a 	or	r2,r4,r5
   89544:	108000cc 	andi	r2,r2,3
   89548:	1000171e 	bne	r2,zero,895a8 <strcmp+0x68>
   8954c:	20800017 	ldw	r2,0(r4)
   89550:	28c00017 	ldw	r3,0(r5)
   89554:	10c0141e 	bne	r2,r3,895a8 <strcmp+0x68>
   89558:	027fbff4 	movhi	r9,65279
   8955c:	4a7fbfc4 	addi	r9,r9,-257
   89560:	0086303a 	nor	r3,zero,r2
   89564:	02202074 	movhi	r8,32897
   89568:	1245883a 	add	r2,r2,r9
   8956c:	42202004 	addi	r8,r8,-32640
   89570:	10c4703a 	and	r2,r2,r3
   89574:	1204703a 	and	r2,r2,r8
   89578:	10000226 	beq	r2,zero,89584 <strcmp+0x44>
   8957c:	00002306 	br	8960c <strcmp+0xcc>
   89580:	1000221e 	bne	r2,zero,8960c <strcmp+0xcc>
   89584:	21000104 	addi	r4,r4,4
   89588:	20c00017 	ldw	r3,0(r4)
   8958c:	29400104 	addi	r5,r5,4
   89590:	29800017 	ldw	r6,0(r5)
   89594:	1a4f883a 	add	r7,r3,r9
   89598:	00c4303a 	nor	r2,zero,r3
   8959c:	3884703a 	and	r2,r7,r2
   895a0:	1204703a 	and	r2,r2,r8
   895a4:	19bff626 	beq	r3,r6,89580 <__alt_data_end+0xfffa9580>
   895a8:	20800003 	ldbu	r2,0(r4)
   895ac:	10c03fcc 	andi	r3,r2,255
   895b0:	18c0201c 	xori	r3,r3,128
   895b4:	18ffe004 	addi	r3,r3,-128
   895b8:	18000c26 	beq	r3,zero,895ec <strcmp+0xac>
   895bc:	29800007 	ldb	r6,0(r5)
   895c0:	19800326 	beq	r3,r6,895d0 <strcmp+0x90>
   895c4:	00001306 	br	89614 <strcmp+0xd4>
   895c8:	29800007 	ldb	r6,0(r5)
   895cc:	11800b1e 	bne	r2,r6,895fc <strcmp+0xbc>
   895d0:	21000044 	addi	r4,r4,1
   895d4:	20c00003 	ldbu	r3,0(r4)
   895d8:	29400044 	addi	r5,r5,1
   895dc:	18803fcc 	andi	r2,r3,255
   895e0:	1080201c 	xori	r2,r2,128
   895e4:	10bfe004 	addi	r2,r2,-128
   895e8:	103ff71e 	bne	r2,zero,895c8 <__alt_data_end+0xfffa95c8>
   895ec:	0007883a 	mov	r3,zero
   895f0:	28800003 	ldbu	r2,0(r5)
   895f4:	1885c83a 	sub	r2,r3,r2
   895f8:	f800283a 	ret
   895fc:	28800003 	ldbu	r2,0(r5)
   89600:	18c03fcc 	andi	r3,r3,255
   89604:	1885c83a 	sub	r2,r3,r2
   89608:	f800283a 	ret
   8960c:	0005883a 	mov	r2,zero
   89610:	f800283a 	ret
   89614:	10c03fcc 	andi	r3,r2,255
   89618:	003ff506 	br	895f0 <__alt_data_end+0xfffa95f0>

0008961c <__sprint_r.part.0>:
   8961c:	28801917 	ldw	r2,100(r5)
   89620:	defff604 	addi	sp,sp,-40
   89624:	dd400515 	stw	r21,20(sp)
   89628:	dfc00915 	stw	ra,36(sp)
   8962c:	df000815 	stw	fp,32(sp)
   89630:	ddc00715 	stw	r23,28(sp)
   89634:	dd800615 	stw	r22,24(sp)
   89638:	dd000415 	stw	r20,16(sp)
   8963c:	dcc00315 	stw	r19,12(sp)
   89640:	dc800215 	stw	r18,8(sp)
   89644:	dc400115 	stw	r17,4(sp)
   89648:	dc000015 	stw	r16,0(sp)
   8964c:	1088000c 	andi	r2,r2,8192
   89650:	302b883a 	mov	r21,r6
   89654:	10002e26 	beq	r2,zero,89710 <__sprint_r.part.0+0xf4>
   89658:	30800217 	ldw	r2,8(r6)
   8965c:	35800017 	ldw	r22,0(r6)
   89660:	10002926 	beq	r2,zero,89708 <__sprint_r.part.0+0xec>
   89664:	2827883a 	mov	r19,r5
   89668:	2029883a 	mov	r20,r4
   8966c:	b5c00104 	addi	r23,r22,4
   89670:	04bfffc4 	movi	r18,-1
   89674:	bc400017 	ldw	r17,0(r23)
   89678:	b4000017 	ldw	r16,0(r22)
   8967c:	0039883a 	mov	fp,zero
   89680:	8822d0ba 	srli	r17,r17,2
   89684:	8800031e 	bne	r17,zero,89694 <__sprint_r.part.0+0x78>
   89688:	00001806 	br	896ec <__sprint_r.part.0+0xd0>
   8968c:	84000104 	addi	r16,r16,4
   89690:	8f001526 	beq	r17,fp,896e8 <__sprint_r.part.0+0xcc>
   89694:	81400017 	ldw	r5,0(r16)
   89698:	980d883a 	mov	r6,r19
   8969c:	a009883a 	mov	r4,r20
   896a0:	008b2640 	call	8b264 <_fputwc_r>
   896a4:	e7000044 	addi	fp,fp,1
   896a8:	14bff81e 	bne	r2,r18,8968c <__alt_data_end+0xfffa968c>
   896ac:	9005883a 	mov	r2,r18
   896b0:	a8000215 	stw	zero,8(r21)
   896b4:	a8000115 	stw	zero,4(r21)
   896b8:	dfc00917 	ldw	ra,36(sp)
   896bc:	df000817 	ldw	fp,32(sp)
   896c0:	ddc00717 	ldw	r23,28(sp)
   896c4:	dd800617 	ldw	r22,24(sp)
   896c8:	dd400517 	ldw	r21,20(sp)
   896cc:	dd000417 	ldw	r20,16(sp)
   896d0:	dcc00317 	ldw	r19,12(sp)
   896d4:	dc800217 	ldw	r18,8(sp)
   896d8:	dc400117 	ldw	r17,4(sp)
   896dc:	dc000017 	ldw	r16,0(sp)
   896e0:	dec00a04 	addi	sp,sp,40
   896e4:	f800283a 	ret
   896e8:	a8800217 	ldw	r2,8(r21)
   896ec:	8c63883a 	add	r17,r17,r17
   896f0:	8c63883a 	add	r17,r17,r17
   896f4:	1445c83a 	sub	r2,r2,r17
   896f8:	a8800215 	stw	r2,8(r21)
   896fc:	b5800204 	addi	r22,r22,8
   89700:	bdc00204 	addi	r23,r23,8
   89704:	103fdb1e 	bne	r2,zero,89674 <__alt_data_end+0xfffa9674>
   89708:	0005883a 	mov	r2,zero
   8970c:	003fe806 	br	896b0 <__alt_data_end+0xfffa96b0>
   89710:	00866140 	call	86614 <__sfvwrite_r>
   89714:	003fe606 	br	896b0 <__alt_data_end+0xfffa96b0>

00089718 <__sprint_r>:
   89718:	30c00217 	ldw	r3,8(r6)
   8971c:	18000126 	beq	r3,zero,89724 <__sprint_r+0xc>
   89720:	008961c1 	jmpi	8961c <__sprint_r.part.0>
   89724:	30000115 	stw	zero,4(r6)
   89728:	0005883a 	mov	r2,zero
   8972c:	f800283a 	ret

00089730 <___vfiprintf_internal_r>:
   89730:	deffca04 	addi	sp,sp,-216
   89734:	dd403115 	stw	r21,196(sp)
   89738:	dfc03515 	stw	ra,212(sp)
   8973c:	df003415 	stw	fp,208(sp)
   89740:	ddc03315 	stw	r23,204(sp)
   89744:	dd803215 	stw	r22,200(sp)
   89748:	dd003015 	stw	r20,192(sp)
   8974c:	dcc02f15 	stw	r19,188(sp)
   89750:	dc802e15 	stw	r18,184(sp)
   89754:	dc402d15 	stw	r17,180(sp)
   89758:	dc002c15 	stw	r16,176(sp)
   8975c:	d9002115 	stw	r4,132(sp)
   89760:	d9402015 	stw	r5,128(sp)
   89764:	d9c02215 	stw	r7,136(sp)
   89768:	302b883a 	mov	r21,r6
   8976c:	20000226 	beq	r4,zero,89778 <___vfiprintf_internal_r+0x48>
   89770:	20800e17 	ldw	r2,56(r4)
   89774:	1000cf26 	beq	r2,zero,89ab4 <___vfiprintf_internal_r+0x384>
   89778:	d8c02017 	ldw	r3,128(sp)
   8977c:	1880030b 	ldhu	r2,12(r3)
   89780:	10c8000c 	andi	r3,r2,8192
   89784:	1800071e 	bne	r3,zero,897a4 <___vfiprintf_internal_r+0x74>
   89788:	d9402017 	ldw	r5,128(sp)
   8978c:	00f7ffc4 	movi	r3,-8193
   89790:	10880014 	ori	r2,r2,8192
   89794:	29001917 	ldw	r4,100(r5)
   89798:	2880030d 	sth	r2,12(r5)
   8979c:	20c6703a 	and	r3,r4,r3
   897a0:	28c01915 	stw	r3,100(r5)
   897a4:	10c0020c 	andi	r3,r2,8
   897a8:	1800a526 	beq	r3,zero,89a40 <___vfiprintf_internal_r+0x310>
   897ac:	d9002017 	ldw	r4,128(sp)
   897b0:	20c00417 	ldw	r3,16(r4)
   897b4:	1800a226 	beq	r3,zero,89a40 <___vfiprintf_internal_r+0x310>
   897b8:	1080068c 	andi	r2,r2,26
   897bc:	00c00284 	movi	r3,10
   897c0:	10c0a826 	beq	r2,r3,89a64 <___vfiprintf_internal_r+0x334>
   897c4:	d9001a04 	addi	r4,sp,104
   897c8:	d94019c4 	addi	r5,sp,103
   897cc:	04800274 	movhi	r18,9
   897d0:	2145c83a 	sub	r2,r4,r5
   897d4:	9485af04 	addi	r18,r18,5820
   897d8:	d9001e15 	stw	r4,120(sp)
   897dc:	d9401f15 	stw	r5,124(sp)
   897e0:	dec01a15 	stw	sp,104(sp)
   897e4:	d8001c15 	stw	zero,112(sp)
   897e8:	d8001b15 	stw	zero,108(sp)
   897ec:	d811883a 	mov	r8,sp
   897f0:	d8002615 	stw	zero,152(sp)
   897f4:	d8002415 	stw	zero,144(sp)
   897f8:	d8802815 	stw	r2,160(sp)
   897fc:	a82d883a 	mov	r22,r21
   89800:	b0800007 	ldb	r2,0(r22)
   89804:	10040d26 	beq	r2,zero,8a83c <___vfiprintf_internal_r+0x110c>
   89808:	00c00944 	movi	r3,37
   8980c:	b029883a 	mov	r20,r22
   89810:	10c0021e 	bne	r2,r3,8981c <___vfiprintf_internal_r+0xec>
   89814:	00001606 	br	89870 <___vfiprintf_internal_r+0x140>
   89818:	10c00326 	beq	r2,r3,89828 <___vfiprintf_internal_r+0xf8>
   8981c:	a5000044 	addi	r20,r20,1
   89820:	a0800007 	ldb	r2,0(r20)
   89824:	103ffc1e 	bne	r2,zero,89818 <__alt_data_end+0xfffa9818>
   89828:	a5a1c83a 	sub	r16,r20,r22
   8982c:	80001026 	beq	r16,zero,89870 <___vfiprintf_internal_r+0x140>
   89830:	d8c01c17 	ldw	r3,112(sp)
   89834:	d8801b17 	ldw	r2,108(sp)
   89838:	45800015 	stw	r22,0(r8)
   8983c:	80c7883a 	add	r3,r16,r3
   89840:	10800044 	addi	r2,r2,1
   89844:	44000115 	stw	r16,4(r8)
   89848:	d8c01c15 	stw	r3,112(sp)
   8984c:	d8801b15 	stw	r2,108(sp)
   89850:	010001c4 	movi	r4,7
   89854:	2080750e 	bge	r4,r2,89a2c <___vfiprintf_internal_r+0x2fc>
   89858:	1803951e 	bne	r3,zero,8a6b0 <___vfiprintf_internal_r+0xf80>
   8985c:	d8c02417 	ldw	r3,144(sp)
   89860:	d8001b15 	stw	zero,108(sp)
   89864:	d811883a 	mov	r8,sp
   89868:	1c07883a 	add	r3,r3,r16
   8986c:	d8c02415 	stw	r3,144(sp)
   89870:	a0800007 	ldb	r2,0(r20)
   89874:	1002e026 	beq	r2,zero,8a3f8 <___vfiprintf_internal_r+0xcc8>
   89878:	a5800044 	addi	r22,r20,1
   8987c:	a0c00047 	ldb	r3,1(r20)
   89880:	d8001d85 	stb	zero,118(sp)
   89884:	0027883a 	mov	r19,zero
   89888:	d8002305 	stb	zero,140(sp)
   8988c:	043fffc4 	movi	r16,-1
   89890:	d8002515 	stw	zero,148(sp)
   89894:	0023883a 	mov	r17,zero
   89898:	05001604 	movi	r20,88
   8989c:	05400244 	movi	r21,9
   898a0:	402f883a 	mov	r23,r8
   898a4:	b5800044 	addi	r22,r22,1
   898a8:	18bff804 	addi	r2,r3,-32
   898ac:	a0827736 	bltu	r20,r2,8a28c <___vfiprintf_internal_r+0xb5c>
   898b0:	100490ba 	slli	r2,r2,2
   898b4:	01000274 	movhi	r4,9
   898b8:	21263204 	addi	r4,r4,-26424
   898bc:	1105883a 	add	r2,r2,r4
   898c0:	10800017 	ldw	r2,0(r2)
   898c4:	1000683a 	jmp	r2
   898c8:	00089f8c 	andi	zero,zero,8830
   898cc:	0008a28c 	andi	zero,zero,8842
   898d0:	0008a28c 	andi	zero,zero,8842
   898d4:	00089fa8 	cmpgeui	zero,zero,8830
   898d8:	0008a28c 	andi	zero,zero,8842
   898dc:	0008a28c 	andi	zero,zero,8842
   898e0:	0008a28c 	andi	zero,zero,8842
   898e4:	0008a28c 	andi	zero,zero,8842
   898e8:	0008a28c 	andi	zero,zero,8842
   898ec:	0008a28c 	andi	zero,zero,8842
   898f0:	0008a1b0 	cmpltui	zero,zero,8838
   898f4:	0008a1d4 	movui	zero,8839
   898f8:	0008a28c 	andi	zero,zero,8842
   898fc:	00089acc 	andi	zero,zero,8811
   89900:	0008a1e8 	cmpgeui	zero,zero,8839
   89904:	0008a28c 	andi	zero,zero,8842
   89908:	00089fb4 	movhi	zero,8830
   8990c:	00089fc0 	call	89fc <__alt_mem_onchip_memory2_0-0x77604>
   89910:	00089fc0 	call	89fc <__alt_mem_onchip_memory2_0-0x77604>
   89914:	00089fc0 	call	89fc <__alt_mem_onchip_memory2_0-0x77604>
   89918:	00089fc0 	call	89fc <__alt_mem_onchip_memory2_0-0x77604>
   8991c:	00089fc0 	call	89fc <__alt_mem_onchip_memory2_0-0x77604>
   89920:	00089fc0 	call	89fc <__alt_mem_onchip_memory2_0-0x77604>
   89924:	00089fc0 	call	89fc <__alt_mem_onchip_memory2_0-0x77604>
   89928:	00089fc0 	call	89fc <__alt_mem_onchip_memory2_0-0x77604>
   8992c:	00089fc0 	call	89fc <__alt_mem_onchip_memory2_0-0x77604>
   89930:	0008a28c 	andi	zero,zero,8842
   89934:	0008a28c 	andi	zero,zero,8842
   89938:	0008a28c 	andi	zero,zero,8842
   8993c:	0008a28c 	andi	zero,zero,8842
   89940:	0008a28c 	andi	zero,zero,8842
   89944:	0008a28c 	andi	zero,zero,8842
   89948:	0008a28c 	andi	zero,zero,8842
   8994c:	0008a28c 	andi	zero,zero,8842
   89950:	0008a28c 	andi	zero,zero,8842
   89954:	0008a28c 	andi	zero,zero,8842
   89958:	0008a000 	call	8a00 <__alt_mem_onchip_memory2_0-0x77600>
   8995c:	0008a28c 	andi	zero,zero,8842
   89960:	0008a28c 	andi	zero,zero,8842
   89964:	0008a28c 	andi	zero,zero,8842
   89968:	0008a28c 	andi	zero,zero,8842
   8996c:	0008a28c 	andi	zero,zero,8842
   89970:	0008a28c 	andi	zero,zero,8842
   89974:	0008a28c 	andi	zero,zero,8842
   89978:	0008a28c 	andi	zero,zero,8842
   8997c:	0008a28c 	andi	zero,zero,8842
   89980:	0008a28c 	andi	zero,zero,8842
   89984:	0008a03c 	xorhi	zero,zero,8832
   89988:	0008a28c 	andi	zero,zero,8842
   8998c:	0008a28c 	andi	zero,zero,8842
   89990:	0008a28c 	andi	zero,zero,8842
   89994:	0008a28c 	andi	zero,zero,8842
   89998:	0008a28c 	andi	zero,zero,8842
   8999c:	0008a098 	cmpnei	zero,zero,8834
   899a0:	0008a28c 	andi	zero,zero,8842
   899a4:	0008a28c 	andi	zero,zero,8842
   899a8:	0008a10c 	andi	zero,zero,8836
   899ac:	0008a28c 	andi	zero,zero,8842
   899b0:	0008a28c 	andi	zero,zero,8842
   899b4:	0008a28c 	andi	zero,zero,8842
   899b8:	0008a28c 	andi	zero,zero,8842
   899bc:	0008a28c 	andi	zero,zero,8842
   899c0:	0008a28c 	andi	zero,zero,8842
   899c4:	0008a28c 	andi	zero,zero,8842
   899c8:	0008a28c 	andi	zero,zero,8842
   899cc:	0008a28c 	andi	zero,zero,8842
   899d0:	0008a28c 	andi	zero,zero,8842
   899d4:	00089eb4 	movhi	zero,8826
   899d8:	00089ee4 	muli	zero,zero,8827
   899dc:	0008a28c 	andi	zero,zero,8842
   899e0:	0008a28c 	andi	zero,zero,8842
   899e4:	0008a28c 	andi	zero,zero,8842
   899e8:	0008a234 	movhi	zero,8840
   899ec:	00089ee4 	muli	zero,zero,8827
   899f0:	0008a28c 	andi	zero,zero,8842
   899f4:	0008a28c 	andi	zero,zero,8842
   899f8:	00089d8c 	andi	zero,zero,8822
   899fc:	0008a28c 	andi	zero,zero,8842
   89a00:	00089da0 	cmpeqi	zero,zero,8822
   89a04:	00089dd8 	cmpnei	zero,zero,8823
   89a08:	00089ad8 	cmpnei	zero,zero,8811
   89a0c:	00089d80 	call	89d8 <__alt_mem_onchip_memory2_0-0x77628>
   89a10:	0008a28c 	andi	zero,zero,8842
   89a14:	0008a14c 	andi	zero,zero,8837
   89a18:	0008a28c 	andi	zero,zero,8842
   89a1c:	0008a198 	cmpnei	zero,zero,8838
   89a20:	0008a28c 	andi	zero,zero,8842
   89a24:	0008a28c 	andi	zero,zero,8842
   89a28:	00089e5c 	xori	zero,zero,8825
   89a2c:	42000204 	addi	r8,r8,8
   89a30:	d8c02417 	ldw	r3,144(sp)
   89a34:	1c07883a 	add	r3,r3,r16
   89a38:	d8c02415 	stw	r3,144(sp)
   89a3c:	003f8c06 	br	89870 <__alt_data_end+0xfffa9870>
   89a40:	d9402017 	ldw	r5,128(sp)
   89a44:	d9002117 	ldw	r4,132(sp)
   89a48:	00841840 	call	84184 <__swsetup_r>
   89a4c:	1003c11e 	bne	r2,zero,8a954 <___vfiprintf_internal_r+0x1224>
   89a50:	d9402017 	ldw	r5,128(sp)
   89a54:	00c00284 	movi	r3,10
   89a58:	2880030b 	ldhu	r2,12(r5)
   89a5c:	1080068c 	andi	r2,r2,26
   89a60:	10ff581e 	bne	r2,r3,897c4 <__alt_data_end+0xfffa97c4>
   89a64:	d8c02017 	ldw	r3,128(sp)
   89a68:	1880038f 	ldh	r2,14(r3)
   89a6c:	103f5516 	blt	r2,zero,897c4 <__alt_data_end+0xfffa97c4>
   89a70:	d9c02217 	ldw	r7,136(sp)
   89a74:	d9002117 	ldw	r4,132(sp)
   89a78:	a80d883a 	mov	r6,r21
   89a7c:	180b883a 	mov	r5,r3
   89a80:	008ac580 	call	8ac58 <__sbprintf>
   89a84:	dfc03517 	ldw	ra,212(sp)
   89a88:	df003417 	ldw	fp,208(sp)
   89a8c:	ddc03317 	ldw	r23,204(sp)
   89a90:	dd803217 	ldw	r22,200(sp)
   89a94:	dd403117 	ldw	r21,196(sp)
   89a98:	dd003017 	ldw	r20,192(sp)
   89a9c:	dcc02f17 	ldw	r19,188(sp)
   89aa0:	dc802e17 	ldw	r18,184(sp)
   89aa4:	dc402d17 	ldw	r17,180(sp)
   89aa8:	dc002c17 	ldw	r16,176(sp)
   89aac:	dec03604 	addi	sp,sp,216
   89ab0:	f800283a 	ret
   89ab4:	00861900 	call	86190 <__sinit>
   89ab8:	003f2f06 	br	89778 <__alt_data_end+0xfffa9778>
   89abc:	d8c02517 	ldw	r3,148(sp)
   89ac0:	d8802215 	stw	r2,136(sp)
   89ac4:	00c7c83a 	sub	r3,zero,r3
   89ac8:	d8c02515 	stw	r3,148(sp)
   89acc:	8c400114 	ori	r17,r17,4
   89ad0:	b0c00007 	ldb	r3,0(r22)
   89ad4:	003f7306 	br	898a4 <__alt_data_end+0xfffa98a4>
   89ad8:	00800c04 	movi	r2,48
   89adc:	d9402217 	ldw	r5,136(sp)
   89ae0:	d8801d05 	stb	r2,116(sp)
   89ae4:	00801e04 	movi	r2,120
   89ae8:	d8801d45 	stb	r2,117(sp)
   89aec:	d8001d85 	stb	zero,118(sp)
   89af0:	b811883a 	mov	r8,r23
   89af4:	28c00104 	addi	r3,r5,4
   89af8:	2cc00017 	ldw	r19,0(r5)
   89afc:	0029883a 	mov	r20,zero
   89b00:	88800094 	ori	r2,r17,2
   89b04:	80032516 	blt	r16,zero,8a79c <___vfiprintf_internal_r+0x106c>
   89b08:	00bfdfc4 	movi	r2,-129
   89b0c:	88a2703a 	and	r17,r17,r2
   89b10:	d8c02215 	stw	r3,136(sp)
   89b14:	8c400094 	ori	r17,r17,2
   89b18:	98032a1e 	bne	r19,zero,8a7c4 <___vfiprintf_internal_r+0x1094>
   89b1c:	00800274 	movhi	r2,9
   89b20:	10854e04 	addi	r2,r2,5432
   89b24:	d8802615 	stw	r2,152(sp)
   89b28:	002b883a 	mov	r21,zero
   89b2c:	8001741e 	bne	r16,zero,8a100 <___vfiprintf_internal_r+0x9d0>
   89b30:	0021883a 	mov	r16,zero
   89b34:	0029883a 	mov	r20,zero
   89b38:	ddc01a04 	addi	r23,sp,104
   89b3c:	8027883a 	mov	r19,r16
   89b40:	8500010e 	bge	r16,r20,89b48 <___vfiprintf_internal_r+0x418>
   89b44:	a027883a 	mov	r19,r20
   89b48:	ad403fcc 	andi	r21,r21,255
   89b4c:	ad40201c 	xori	r21,r21,128
   89b50:	ad7fe004 	addi	r21,r21,-128
   89b54:	a8000126 	beq	r21,zero,89b5c <___vfiprintf_internal_r+0x42c>
   89b58:	9cc00044 	addi	r19,r19,1
   89b5c:	89c0008c 	andi	r7,r17,2
   89b60:	38000126 	beq	r7,zero,89b68 <___vfiprintf_internal_r+0x438>
   89b64:	9cc00084 	addi	r19,r19,2
   89b68:	88c0210c 	andi	r3,r17,132
   89b6c:	1801dd1e 	bne	r3,zero,8a2e4 <___vfiprintf_internal_r+0xbb4>
   89b70:	d9402517 	ldw	r5,148(sp)
   89b74:	2cebc83a 	sub	r21,r5,r19
   89b78:	0541da0e 	bge	zero,r21,8a2e4 <___vfiprintf_internal_r+0xbb4>
   89b7c:	07000404 	movi	fp,16
   89b80:	d8801c17 	ldw	r2,112(sp)
   89b84:	e543be0e 	bge	fp,r21,8aa80 <___vfiprintf_internal_r+0x1350>
   89b88:	01400274 	movhi	r5,9
   89b8c:	2945b304 	addi	r5,r5,5836
   89b90:	dc002715 	stw	r16,156(sp)
   89b94:	d9801b17 	ldw	r6,108(sp)
   89b98:	a821883a 	mov	r16,r21
   89b9c:	d9402315 	stw	r5,140(sp)
   89ba0:	028001c4 	movi	r10,7
   89ba4:	d9c02915 	stw	r7,164(sp)
   89ba8:	182b883a 	mov	r21,r3
   89bac:	00000506 	br	89bc4 <___vfiprintf_internal_r+0x494>
   89bb0:	31000084 	addi	r4,r6,2
   89bb4:	42000204 	addi	r8,r8,8
   89bb8:	180d883a 	mov	r6,r3
   89bbc:	843ffc04 	addi	r16,r16,-16
   89bc0:	e4000f0e 	bge	fp,r16,89c00 <___vfiprintf_internal_r+0x4d0>
   89bc4:	01000274 	movhi	r4,9
   89bc8:	10800404 	addi	r2,r2,16
   89bcc:	30c00044 	addi	r3,r6,1
   89bd0:	2105b304 	addi	r4,r4,5836
   89bd4:	41000015 	stw	r4,0(r8)
   89bd8:	47000115 	stw	fp,4(r8)
   89bdc:	d8801c15 	stw	r2,112(sp)
   89be0:	d8c01b15 	stw	r3,108(sp)
   89be4:	50fff20e 	bge	r10,r3,89bb0 <__alt_data_end+0xfffa9bb0>
   89be8:	1001b21e 	bne	r2,zero,8a2b4 <___vfiprintf_internal_r+0xb84>
   89bec:	843ffc04 	addi	r16,r16,-16
   89bf0:	000d883a 	mov	r6,zero
   89bf4:	01000044 	movi	r4,1
   89bf8:	d811883a 	mov	r8,sp
   89bfc:	e43ff116 	blt	fp,r16,89bc4 <__alt_data_end+0xfffa9bc4>
   89c00:	a807883a 	mov	r3,r21
   89c04:	d9c02917 	ldw	r7,164(sp)
   89c08:	802b883a 	mov	r21,r16
   89c0c:	dc002717 	ldw	r16,156(sp)
   89c10:	d9402317 	ldw	r5,140(sp)
   89c14:	a885883a 	add	r2,r21,r2
   89c18:	45400115 	stw	r21,4(r8)
   89c1c:	41400015 	stw	r5,0(r8)
   89c20:	d8801c15 	stw	r2,112(sp)
   89c24:	d9001b15 	stw	r4,108(sp)
   89c28:	014001c4 	movi	r5,7
   89c2c:	29026216 	blt	r5,r4,8a5b8 <___vfiprintf_internal_r+0xe88>
   89c30:	d9801d87 	ldb	r6,118(sp)
   89c34:	42000204 	addi	r8,r8,8
   89c38:	21400044 	addi	r5,r4,1
   89c3c:	3001ae1e 	bne	r6,zero,8a2f8 <___vfiprintf_internal_r+0xbc8>
   89c40:	3801bb26 	beq	r7,zero,8a330 <___vfiprintf_internal_r+0xc00>
   89c44:	d9001d04 	addi	r4,sp,116
   89c48:	10800084 	addi	r2,r2,2
   89c4c:	41000015 	stw	r4,0(r8)
   89c50:	01000084 	movi	r4,2
   89c54:	41000115 	stw	r4,4(r8)
   89c58:	d8801c15 	stw	r2,112(sp)
   89c5c:	d9401b15 	stw	r5,108(sp)
   89c60:	010001c4 	movi	r4,7
   89c64:	2142680e 	bge	r4,r5,8a608 <___vfiprintf_internal_r+0xed8>
   89c68:	1002b11e 	bne	r2,zero,8a730 <___vfiprintf_internal_r+0x1000>
   89c6c:	01802004 	movi	r6,128
   89c70:	01400044 	movi	r5,1
   89c74:	0009883a 	mov	r4,zero
   89c78:	d811883a 	mov	r8,sp
   89c7c:	1981ae1e 	bne	r3,r6,8a338 <___vfiprintf_internal_r+0xc08>
   89c80:	d8c02517 	ldw	r3,148(sp)
   89c84:	1cf9c83a 	sub	fp,r3,r19
   89c88:	0701ab0e 	bge	zero,fp,8a338 <___vfiprintf_internal_r+0xc08>
   89c8c:	05400404 	movi	r21,16
   89c90:	af03a90e 	bge	r21,fp,8ab38 <___vfiprintf_internal_r+0x1408>
   89c94:	01400274 	movhi	r5,9
   89c98:	2945af04 	addi	r5,r5,5820
   89c9c:	d9402315 	stw	r5,140(sp)
   89ca0:	01c001c4 	movi	r7,7
   89ca4:	00000506 	br	89cbc <___vfiprintf_internal_r+0x58c>
   89ca8:	21800084 	addi	r6,r4,2
   89cac:	42000204 	addi	r8,r8,8
   89cb0:	1809883a 	mov	r4,r3
   89cb4:	e73ffc04 	addi	fp,fp,-16
   89cb8:	af000d0e 	bge	r21,fp,89cf0 <___vfiprintf_internal_r+0x5c0>
   89cbc:	10800404 	addi	r2,r2,16
   89cc0:	20c00044 	addi	r3,r4,1
   89cc4:	44800015 	stw	r18,0(r8)
   89cc8:	45400115 	stw	r21,4(r8)
   89ccc:	d8801c15 	stw	r2,112(sp)
   89cd0:	d8c01b15 	stw	r3,108(sp)
   89cd4:	38fff40e 	bge	r7,r3,89ca8 <__alt_data_end+0xfffa9ca8>
   89cd8:	10022b1e 	bne	r2,zero,8a588 <___vfiprintf_internal_r+0xe58>
   89cdc:	e73ffc04 	addi	fp,fp,-16
   89ce0:	01800044 	movi	r6,1
   89ce4:	0009883a 	mov	r4,zero
   89ce8:	d811883a 	mov	r8,sp
   89cec:	af3ff316 	blt	r21,fp,89cbc <__alt_data_end+0xfffa9cbc>
   89cf0:	d8c02317 	ldw	r3,140(sp)
   89cf4:	1705883a 	add	r2,r2,fp
   89cf8:	47000115 	stw	fp,4(r8)
   89cfc:	40c00015 	stw	r3,0(r8)
   89d00:	d8801c15 	stw	r2,112(sp)
   89d04:	d9801b15 	stw	r6,108(sp)
   89d08:	00c001c4 	movi	r3,7
   89d0c:	19829416 	blt	r3,r6,8a760 <___vfiprintf_internal_r+0x1030>
   89d10:	8521c83a 	sub	r16,r16,r20
   89d14:	42000204 	addi	r8,r8,8
   89d18:	31400044 	addi	r5,r6,1
   89d1c:	3009883a 	mov	r4,r6
   89d20:	04018716 	blt	zero,r16,8a340 <___vfiprintf_internal_r+0xc10>
   89d24:	a085883a 	add	r2,r20,r2
   89d28:	45c00015 	stw	r23,0(r8)
   89d2c:	45000115 	stw	r20,4(r8)
   89d30:	d8801c15 	stw	r2,112(sp)
   89d34:	d9401b15 	stw	r5,108(sp)
   89d38:	00c001c4 	movi	r3,7
   89d3c:	1941c20e 	bge	r3,r5,8a448 <___vfiprintf_internal_r+0xd18>
   89d40:	1002531e 	bne	r2,zero,8a690 <___vfiprintf_internal_r+0xf60>
   89d44:	d8001b15 	stw	zero,108(sp)
   89d48:	8c40010c 	andi	r17,r17,4
   89d4c:	88023226 	beq	r17,zero,8a618 <___vfiprintf_internal_r+0xee8>
   89d50:	d9002517 	ldw	r4,148(sp)
   89d54:	24e3c83a 	sub	r17,r4,r19
   89d58:	04432916 	blt	zero,r17,8aa00 <___vfiprintf_internal_r+0x12d0>
   89d5c:	d8802517 	ldw	r2,148(sp)
   89d60:	14c0010e 	bge	r2,r19,89d68 <___vfiprintf_internal_r+0x638>
   89d64:	9805883a 	mov	r2,r19
   89d68:	d8c02417 	ldw	r3,144(sp)
   89d6c:	1887883a 	add	r3,r3,r2
   89d70:	d8c02415 	stw	r3,144(sp)
   89d74:	d8001b15 	stw	zero,108(sp)
   89d78:	d811883a 	mov	r8,sp
   89d7c:	003ea006 	br	89800 <__alt_data_end+0xfffa9800>
   89d80:	8c400814 	ori	r17,r17,32
   89d84:	b0c00007 	ldb	r3,0(r22)
   89d88:	003ec606 	br	898a4 <__alt_data_end+0xfffa98a4>
   89d8c:	b0c00007 	ldb	r3,0(r22)
   89d90:	00801b04 	movi	r2,108
   89d94:	18832026 	beq	r3,r2,8aa18 <___vfiprintf_internal_r+0x12e8>
   89d98:	8c400414 	ori	r17,r17,16
   89d9c:	003ec106 	br	898a4 <__alt_data_end+0xfffa98a4>
   89da0:	9cc03fcc 	andi	r19,r19,255
   89da4:	b811883a 	mov	r8,r23
   89da8:	9803981e 	bne	r19,zero,8ac0c <___vfiprintf_internal_r+0x14dc>
   89dac:	8880080c 	andi	r2,r17,32
   89db0:	1002be26 	beq	r2,zero,8a8ac <___vfiprintf_internal_r+0x117c>
   89db4:	d9002217 	ldw	r4,136(sp)
   89db8:	d9402417 	ldw	r5,144(sp)
   89dbc:	20800017 	ldw	r2,0(r4)
   89dc0:	2807d7fa 	srai	r3,r5,31
   89dc4:	21000104 	addi	r4,r4,4
   89dc8:	d9002215 	stw	r4,136(sp)
   89dcc:	11400015 	stw	r5,0(r2)
   89dd0:	10c00115 	stw	r3,4(r2)
   89dd4:	003e8a06 	br	89800 <__alt_data_end+0xfffa9800>
   89dd8:	9cc03fcc 	andi	r19,r19,255
   89ddc:	b811883a 	mov	r8,r23
   89de0:	9803871e 	bne	r19,zero,8ac00 <___vfiprintf_internal_r+0x14d0>
   89de4:	8880080c 	andi	r2,r17,32
   89de8:	10009a26 	beq	r2,zero,8a054 <___vfiprintf_internal_r+0x924>
   89dec:	d9002217 	ldw	r4,136(sp)
   89df0:	d8001d85 	stb	zero,118(sp)
   89df4:	20800204 	addi	r2,r4,8
   89df8:	24c00017 	ldw	r19,0(r4)
   89dfc:	25000117 	ldw	r20,4(r4)
   89e00:	8002a416 	blt	r16,zero,8a894 <___vfiprintf_internal_r+0x1164>
   89e04:	013fdfc4 	movi	r4,-129
   89e08:	9d06b03a 	or	r3,r19,r20
   89e0c:	d8802215 	stw	r2,136(sp)
   89e10:	8922703a 	and	r17,r17,r4
   89e14:	18009b26 	beq	r3,zero,8a084 <___vfiprintf_internal_r+0x954>
   89e18:	002b883a 	mov	r21,zero
   89e1c:	ddc01a04 	addi	r23,sp,104
   89e20:	9806d0fa 	srli	r3,r19,3
   89e24:	a008977a 	slli	r4,r20,29
   89e28:	a028d0fa 	srli	r20,r20,3
   89e2c:	9cc001cc 	andi	r19,r19,7
   89e30:	98800c04 	addi	r2,r19,48
   89e34:	bdffffc4 	addi	r23,r23,-1
   89e38:	20e6b03a 	or	r19,r4,r3
   89e3c:	b8800005 	stb	r2,0(r23)
   89e40:	9d06b03a 	or	r3,r19,r20
   89e44:	183ff61e 	bne	r3,zero,89e20 <__alt_data_end+0xfffa9e20>
   89e48:	88c0004c 	andi	r3,r17,1
   89e4c:	18021f1e 	bne	r3,zero,8a6cc <___vfiprintf_internal_r+0xf9c>
   89e50:	d9401e17 	ldw	r5,120(sp)
   89e54:	2de9c83a 	sub	r20,r5,r23
   89e58:	003f3806 	br	89b3c <__alt_data_end+0xfffa9b3c>
   89e5c:	9cc03fcc 	andi	r19,r19,255
   89e60:	b811883a 	mov	r8,r23
   89e64:	98034f1e 	bne	r19,zero,8aba4 <___vfiprintf_internal_r+0x1474>
   89e68:	00800274 	movhi	r2,9
   89e6c:	10854e04 	addi	r2,r2,5432
   89e70:	d8802615 	stw	r2,152(sp)
   89e74:	8880080c 	andi	r2,r17,32
   89e78:	1000ac26 	beq	r2,zero,8a12c <___vfiprintf_internal_r+0x9fc>
   89e7c:	d9002217 	ldw	r4,136(sp)
   89e80:	24c00017 	ldw	r19,0(r4)
   89e84:	25000117 	ldw	r20,4(r4)
   89e88:	21000204 	addi	r4,r4,8
   89e8c:	d9002215 	stw	r4,136(sp)
   89e90:	8880004c 	andi	r2,r17,1
   89e94:	1001e726 	beq	r2,zero,8a634 <___vfiprintf_internal_r+0xf04>
   89e98:	9d04b03a 	or	r2,r19,r20
   89e9c:	10025c1e 	bne	r2,zero,8a810 <___vfiprintf_internal_r+0x10e0>
   89ea0:	d8001d85 	stb	zero,118(sp)
   89ea4:	80024416 	blt	r16,zero,8a7b8 <___vfiprintf_internal_r+0x1088>
   89ea8:	00bfdfc4 	movi	r2,-129
   89eac:	88a2703a 	and	r17,r17,r2
   89eb0:	003f1d06 	br	89b28 <__alt_data_end+0xfffa9b28>
   89eb4:	d8c02217 	ldw	r3,136(sp)
   89eb8:	04c00044 	movi	r19,1
   89ebc:	b811883a 	mov	r8,r23
   89ec0:	18800017 	ldw	r2,0(r3)
   89ec4:	18c00104 	addi	r3,r3,4
   89ec8:	d8001d85 	stb	zero,118(sp)
   89ecc:	d8801005 	stb	r2,64(sp)
   89ed0:	d8c02215 	stw	r3,136(sp)
   89ed4:	9829883a 	mov	r20,r19
   89ed8:	ddc01004 	addi	r23,sp,64
   89edc:	0021883a 	mov	r16,zero
   89ee0:	003f1e06 	br	89b5c <__alt_data_end+0xfffa9b5c>
   89ee4:	9cc03fcc 	andi	r19,r19,255
   89ee8:	b811883a 	mov	r8,r23
   89eec:	9803331e 	bne	r19,zero,8abbc <___vfiprintf_internal_r+0x148c>
   89ef0:	8880080c 	andi	r2,r17,32
   89ef4:	10004826 	beq	r2,zero,8a018 <___vfiprintf_internal_r+0x8e8>
   89ef8:	d9002217 	ldw	r4,136(sp)
   89efc:	20800117 	ldw	r2,4(r4)
   89f00:	24c00017 	ldw	r19,0(r4)
   89f04:	21000204 	addi	r4,r4,8
   89f08:	d9002215 	stw	r4,136(sp)
   89f0c:	1029883a 	mov	r20,r2
   89f10:	10024c16 	blt	r2,zero,8a844 <___vfiprintf_internal_r+0x1114>
   89f14:	dd401d83 	ldbu	r21,118(sp)
   89f18:	80007116 	blt	r16,zero,8a0e0 <___vfiprintf_internal_r+0x9b0>
   89f1c:	00ffdfc4 	movi	r3,-129
   89f20:	9d04b03a 	or	r2,r19,r20
   89f24:	88e2703a 	and	r17,r17,r3
   89f28:	1000d126 	beq	r2,zero,8a270 <___vfiprintf_internal_r+0xb40>
   89f2c:	a0023526 	beq	r20,zero,8a804 <___vfiprintf_internal_r+0x10d4>
   89f30:	ddc01a04 	addi	r23,sp,104
   89f34:	4039883a 	mov	fp,r8
   89f38:	9809883a 	mov	r4,r19
   89f3c:	a00b883a 	mov	r5,r20
   89f40:	01800284 	movi	r6,10
   89f44:	000f883a 	mov	r7,zero
   89f48:	008bd680 	call	8bd68 <__umoddi3>
   89f4c:	10800c04 	addi	r2,r2,48
   89f50:	bdffffc4 	addi	r23,r23,-1
   89f54:	9809883a 	mov	r4,r19
   89f58:	a00b883a 	mov	r5,r20
   89f5c:	b8800005 	stb	r2,0(r23)
   89f60:	01800284 	movi	r6,10
   89f64:	000f883a 	mov	r7,zero
   89f68:	008b76c0 	call	8b76c <__udivdi3>
   89f6c:	1027883a 	mov	r19,r2
   89f70:	10c4b03a 	or	r2,r2,r3
   89f74:	1829883a 	mov	r20,r3
   89f78:	103fef1e 	bne	r2,zero,89f38 <__alt_data_end+0xfffa9f38>
   89f7c:	d9001e17 	ldw	r4,120(sp)
   89f80:	e011883a 	mov	r8,fp
   89f84:	25e9c83a 	sub	r20,r4,r23
   89f88:	003eec06 	br	89b3c <__alt_data_end+0xfffa9b3c>
   89f8c:	d8802307 	ldb	r2,140(sp)
   89f90:	1002361e 	bne	r2,zero,8a86c <___vfiprintf_internal_r+0x113c>
   89f94:	00c00804 	movi	r3,32
   89f98:	d8c02305 	stb	r3,140(sp)
   89f9c:	04c00044 	movi	r19,1
   89fa0:	b0c00007 	ldb	r3,0(r22)
   89fa4:	003e3f06 	br	898a4 <__alt_data_end+0xfffa98a4>
   89fa8:	8c400054 	ori	r17,r17,1
   89fac:	b0c00007 	ldb	r3,0(r22)
   89fb0:	003e3c06 	br	898a4 <__alt_data_end+0xfffa98a4>
   89fb4:	8c402014 	ori	r17,r17,128
   89fb8:	b0c00007 	ldb	r3,0(r22)
   89fbc:	003e3906 	br	898a4 <__alt_data_end+0xfffa98a4>
   89fc0:	dc002715 	stw	r16,156(sp)
   89fc4:	d8002515 	stw	zero,148(sp)
   89fc8:	1f3ff404 	addi	fp,r3,-48
   89fcc:	0009883a 	mov	r4,zero
   89fd0:	b021883a 	mov	r16,r22
   89fd4:	01400284 	movi	r5,10
   89fd8:	0081b340 	call	81b34 <__mulsi3>
   89fdc:	80c00007 	ldb	r3,0(r16)
   89fe0:	e089883a 	add	r4,fp,r2
   89fe4:	b5800044 	addi	r22,r22,1
   89fe8:	1f3ff404 	addi	fp,r3,-48
   89fec:	b021883a 	mov	r16,r22
   89ff0:	af3ff82e 	bgeu	r21,fp,89fd4 <__alt_data_end+0xfffa9fd4>
   89ff4:	d9002515 	stw	r4,148(sp)
   89ff8:	dc002717 	ldw	r16,156(sp)
   89ffc:	003e2a06 	br	898a8 <__alt_data_end+0xfffa98a8>
   8a000:	9cc03fcc 	andi	r19,r19,255
   8a004:	b811883a 	mov	r8,r23
   8a008:	9802e91e 	bne	r19,zero,8abb0 <___vfiprintf_internal_r+0x1480>
   8a00c:	8c400414 	ori	r17,r17,16
   8a010:	8880080c 	andi	r2,r17,32
   8a014:	103fb81e 	bne	r2,zero,89ef8 <__alt_data_end+0xfffa9ef8>
   8a018:	8880040c 	andi	r2,r17,16
   8a01c:	10022e26 	beq	r2,zero,8a8d8 <___vfiprintf_internal_r+0x11a8>
   8a020:	d9402217 	ldw	r5,136(sp)
   8a024:	2cc00017 	ldw	r19,0(r5)
   8a028:	29400104 	addi	r5,r5,4
   8a02c:	d9402215 	stw	r5,136(sp)
   8a030:	9829d7fa 	srai	r20,r19,31
   8a034:	a005883a 	mov	r2,r20
   8a038:	003fb506 	br	89f10 <__alt_data_end+0xfffa9f10>
   8a03c:	9cc03fcc 	andi	r19,r19,255
   8a040:	b811883a 	mov	r8,r23
   8a044:	9802fa1e 	bne	r19,zero,8ac30 <___vfiprintf_internal_r+0x1500>
   8a048:	8c400414 	ori	r17,r17,16
   8a04c:	8880080c 	andi	r2,r17,32
   8a050:	103f661e 	bne	r2,zero,89dec <__alt_data_end+0xfffa9dec>
   8a054:	8880040c 	andi	r2,r17,16
   8a058:	10020626 	beq	r2,zero,8a874 <___vfiprintf_internal_r+0x1144>
   8a05c:	d9402217 	ldw	r5,136(sp)
   8a060:	d8001d85 	stb	zero,118(sp)
   8a064:	0029883a 	mov	r20,zero
   8a068:	28800104 	addi	r2,r5,4
   8a06c:	2cc00017 	ldw	r19,0(r5)
   8a070:	80020816 	blt	r16,zero,8a894 <___vfiprintf_internal_r+0x1164>
   8a074:	00ffdfc4 	movi	r3,-129
   8a078:	d8802215 	stw	r2,136(sp)
   8a07c:	88e2703a 	and	r17,r17,r3
   8a080:	983f651e 	bne	r19,zero,89e18 <__alt_data_end+0xfffa9e18>
   8a084:	002b883a 	mov	r21,zero
   8a088:	8002cf26 	beq	r16,zero,8abc8 <___vfiprintf_internal_r+0x1498>
   8a08c:	0027883a 	mov	r19,zero
   8a090:	0029883a 	mov	r20,zero
   8a094:	003f6106 	br	89e1c <__alt_data_end+0xfffa9e1c>
   8a098:	9cc03fcc 	andi	r19,r19,255
   8a09c:	b811883a 	mov	r8,r23
   8a0a0:	9802e01e 	bne	r19,zero,8ac24 <___vfiprintf_internal_r+0x14f4>
   8a0a4:	8c400414 	ori	r17,r17,16
   8a0a8:	8880080c 	andi	r2,r17,32
   8a0ac:	1000641e 	bne	r2,zero,8a240 <___vfiprintf_internal_r+0xb10>
   8a0b0:	8880040c 	andi	r2,r17,16
   8a0b4:	1001c81e 	bne	r2,zero,8a7d8 <___vfiprintf_internal_r+0x10a8>
   8a0b8:	8880100c 	andi	r2,r17,64
   8a0bc:	d8001d85 	stb	zero,118(sp)
   8a0c0:	1002281e 	bne	r2,zero,8a964 <___vfiprintf_internal_r+0x1234>
   8a0c4:	d9002217 	ldw	r4,136(sp)
   8a0c8:	0029883a 	mov	r20,zero
   8a0cc:	20800104 	addi	r2,r4,4
   8a0d0:	24c00017 	ldw	r19,0(r4)
   8a0d4:	8001c60e 	bge	r16,zero,8a7f0 <___vfiprintf_internal_r+0x10c0>
   8a0d8:	d8802215 	stw	r2,136(sp)
   8a0dc:	002b883a 	mov	r21,zero
   8a0e0:	9d04b03a 	or	r2,r19,r20
   8a0e4:	103f911e 	bne	r2,zero,89f2c <__alt_data_end+0xfffa9f2c>
   8a0e8:	00800044 	movi	r2,1
   8a0ec:	10803fcc 	andi	r2,r2,255
   8a0f0:	00c00044 	movi	r3,1
   8a0f4:	10c05f26 	beq	r2,r3,8a274 <___vfiprintf_internal_r+0xb44>
   8a0f8:	00c00084 	movi	r3,2
   8a0fc:	10ffe31e 	bne	r2,r3,8a08c <__alt_data_end+0xfffaa08c>
   8a100:	0027883a 	mov	r19,zero
   8a104:	0029883a 	mov	r20,zero
   8a108:	00015106 	br	8a650 <___vfiprintf_internal_r+0xf20>
   8a10c:	9cc03fcc 	andi	r19,r19,255
   8a110:	b811883a 	mov	r8,r23
   8a114:	9802c01e 	bne	r19,zero,8ac18 <___vfiprintf_internal_r+0x14e8>
   8a118:	01400274 	movhi	r5,9
   8a11c:	29454904 	addi	r5,r5,5412
   8a120:	d9402615 	stw	r5,152(sp)
   8a124:	8880080c 	andi	r2,r17,32
   8a128:	103f541e 	bne	r2,zero,89e7c <__alt_data_end+0xfffa9e7c>
   8a12c:	8880040c 	andi	r2,r17,16
   8a130:	1001f226 	beq	r2,zero,8a8fc <___vfiprintf_internal_r+0x11cc>
   8a134:	d9402217 	ldw	r5,136(sp)
   8a138:	0029883a 	mov	r20,zero
   8a13c:	2cc00017 	ldw	r19,0(r5)
   8a140:	29400104 	addi	r5,r5,4
   8a144:	d9402215 	stw	r5,136(sp)
   8a148:	003f5106 	br	89e90 <__alt_data_end+0xfffa9e90>
   8a14c:	d8c02217 	ldw	r3,136(sp)
   8a150:	b811883a 	mov	r8,r23
   8a154:	d8001d85 	stb	zero,118(sp)
   8a158:	1dc00017 	ldw	r23,0(r3)
   8a15c:	1f000104 	addi	fp,r3,4
   8a160:	b8025926 	beq	r23,zero,8aac8 <___vfiprintf_internal_r+0x1398>
   8a164:	80023316 	blt	r16,zero,8aa34 <___vfiprintf_internal_r+0x1304>
   8a168:	800d883a 	mov	r6,r16
   8a16c:	000b883a 	mov	r5,zero
   8a170:	b809883a 	mov	r4,r23
   8a174:	da002a15 	stw	r8,168(sp)
   8a178:	00877080 	call	87708 <memchr>
   8a17c:	da002a17 	ldw	r8,168(sp)
   8a180:	10026826 	beq	r2,zero,8ab24 <___vfiprintf_internal_r+0x13f4>
   8a184:	15e9c83a 	sub	r20,r2,r23
   8a188:	dd401d83 	ldbu	r21,118(sp)
   8a18c:	df002215 	stw	fp,136(sp)
   8a190:	0021883a 	mov	r16,zero
   8a194:	003e6906 	br	89b3c <__alt_data_end+0xfffa9b3c>
   8a198:	9cc03fcc 	andi	r19,r19,255
   8a19c:	b811883a 	mov	r8,r23
   8a1a0:	983fc126 	beq	r19,zero,8a0a8 <__alt_data_end+0xfffaa0a8>
   8a1a4:	d8c02303 	ldbu	r3,140(sp)
   8a1a8:	d8c01d85 	stb	r3,118(sp)
   8a1ac:	003fbe06 	br	8a0a8 <__alt_data_end+0xfffaa0a8>
   8a1b0:	d9002217 	ldw	r4,136(sp)
   8a1b4:	d9402217 	ldw	r5,136(sp)
   8a1b8:	21000017 	ldw	r4,0(r4)
   8a1bc:	28800104 	addi	r2,r5,4
   8a1c0:	d9002515 	stw	r4,148(sp)
   8a1c4:	203e3d16 	blt	r4,zero,89abc <__alt_data_end+0xfffa9abc>
   8a1c8:	d8802215 	stw	r2,136(sp)
   8a1cc:	b0c00007 	ldb	r3,0(r22)
   8a1d0:	003db406 	br	898a4 <__alt_data_end+0xfffa98a4>
   8a1d4:	00c00ac4 	movi	r3,43
   8a1d8:	d8c02305 	stb	r3,140(sp)
   8a1dc:	04c00044 	movi	r19,1
   8a1e0:	b0c00007 	ldb	r3,0(r22)
   8a1e4:	003daf06 	br	898a4 <__alt_data_end+0xfffa98a4>
   8a1e8:	b0c00007 	ldb	r3,0(r22)
   8a1ec:	01000a84 	movi	r4,42
   8a1f0:	b4000044 	addi	r16,r22,1
   8a1f4:	19025e26 	beq	r3,r4,8ab70 <___vfiprintf_internal_r+0x1440>
   8a1f8:	1f3ff404 	addi	fp,r3,-48
   8a1fc:	0009883a 	mov	r4,zero
   8a200:	af025236 	bltu	r21,fp,8ab4c <___vfiprintf_internal_r+0x141c>
   8a204:	01400284 	movi	r5,10
   8a208:	0081b340 	call	81b34 <__mulsi3>
   8a20c:	80c00007 	ldb	r3,0(r16)
   8a210:	1709883a 	add	r4,r2,fp
   8a214:	85800044 	addi	r22,r16,1
   8a218:	1f3ff404 	addi	fp,r3,-48
   8a21c:	b021883a 	mov	r16,r22
   8a220:	af3ff82e 	bgeu	r21,fp,8a204 <__alt_data_end+0xfffaa204>
   8a224:	2021883a 	mov	r16,r4
   8a228:	203d9f0e 	bge	r4,zero,898a8 <__alt_data_end+0xfffa98a8>
   8a22c:	043fffc4 	movi	r16,-1
   8a230:	003d9d06 	br	898a8 <__alt_data_end+0xfffa98a8>
   8a234:	8c401014 	ori	r17,r17,64
   8a238:	b0c00007 	ldb	r3,0(r22)
   8a23c:	003d9906 	br	898a4 <__alt_data_end+0xfffa98a4>
   8a240:	d9002217 	ldw	r4,136(sp)
   8a244:	d8001d85 	stb	zero,118(sp)
   8a248:	20c00204 	addi	r3,r4,8
   8a24c:	24c00017 	ldw	r19,0(r4)
   8a250:	25000117 	ldw	r20,4(r4)
   8a254:	8001e716 	blt	r16,zero,8a9f4 <___vfiprintf_internal_r+0x12c4>
   8a258:	013fdfc4 	movi	r4,-129
   8a25c:	9d04b03a 	or	r2,r19,r20
   8a260:	d8c02215 	stw	r3,136(sp)
   8a264:	8922703a 	and	r17,r17,r4
   8a268:	002b883a 	mov	r21,zero
   8a26c:	103f2f1e 	bne	r2,zero,89f2c <__alt_data_end+0xfffa9f2c>
   8a270:	803e2f26 	beq	r16,zero,89b30 <__alt_data_end+0xfffa9b30>
   8a274:	0027883a 	mov	r19,zero
   8a278:	9cc00c04 	addi	r19,r19,48
   8a27c:	dcc019c5 	stb	r19,103(sp)
   8a280:	dd002817 	ldw	r20,160(sp)
   8a284:	ddc019c4 	addi	r23,sp,103
   8a288:	003e2c06 	br	89b3c <__alt_data_end+0xfffa9b3c>
   8a28c:	9cc03fcc 	andi	r19,r19,255
   8a290:	b811883a 	mov	r8,r23
   8a294:	9802571e 	bne	r19,zero,8abf4 <___vfiprintf_internal_r+0x14c4>
   8a298:	18005726 	beq	r3,zero,8a3f8 <___vfiprintf_internal_r+0xcc8>
   8a29c:	04c00044 	movi	r19,1
   8a2a0:	d8c01005 	stb	r3,64(sp)
   8a2a4:	d8001d85 	stb	zero,118(sp)
   8a2a8:	9829883a 	mov	r20,r19
   8a2ac:	ddc01004 	addi	r23,sp,64
   8a2b0:	003f0a06 	br	89edc <__alt_data_end+0xfffa9edc>
   8a2b4:	d9402017 	ldw	r5,128(sp)
   8a2b8:	d9002117 	ldw	r4,132(sp)
   8a2bc:	d9801a04 	addi	r6,sp,104
   8a2c0:	da802a15 	stw	r10,168(sp)
   8a2c4:	008961c0 	call	8961c <__sprint_r.part.0>
   8a2c8:	da802a17 	ldw	r10,168(sp)
   8a2cc:	1000501e 	bne	r2,zero,8a410 <___vfiprintf_internal_r+0xce0>
   8a2d0:	d9801b17 	ldw	r6,108(sp)
   8a2d4:	d8801c17 	ldw	r2,112(sp)
   8a2d8:	d811883a 	mov	r8,sp
   8a2dc:	31000044 	addi	r4,r6,1
   8a2e0:	003e3606 	br	89bbc <__alt_data_end+0xfffa9bbc>
   8a2e4:	d9001b17 	ldw	r4,108(sp)
   8a2e8:	d8801c17 	ldw	r2,112(sp)
   8a2ec:	21400044 	addi	r5,r4,1
   8a2f0:	d9801d87 	ldb	r6,118(sp)
   8a2f4:	303e5226 	beq	r6,zero,89c40 <__alt_data_end+0xfffa9c40>
   8a2f8:	01800044 	movi	r6,1
   8a2fc:	d9001d84 	addi	r4,sp,118
   8a300:	1185883a 	add	r2,r2,r6
   8a304:	41000015 	stw	r4,0(r8)
   8a308:	41800115 	stw	r6,4(r8)
   8a30c:	d8801c15 	stw	r2,112(sp)
   8a310:	d9401b15 	stw	r5,108(sp)
   8a314:	010001c4 	movi	r4,7
   8a318:	2140b00e 	bge	r4,r5,8a5dc <___vfiprintf_internal_r+0xeac>
   8a31c:	1000f61e 	bne	r2,zero,8a6f8 <___vfiprintf_internal_r+0xfc8>
   8a320:	3800b31e 	bne	r7,zero,8a5f0 <___vfiprintf_internal_r+0xec0>
   8a324:	0009883a 	mov	r4,zero
   8a328:	300b883a 	mov	r5,r6
   8a32c:	d811883a 	mov	r8,sp
   8a330:	01802004 	movi	r6,128
   8a334:	19be5226 	beq	r3,r6,89c80 <__alt_data_end+0xfffa9c80>
   8a338:	8521c83a 	sub	r16,r16,r20
   8a33c:	043e790e 	bge	zero,r16,89d24 <__alt_data_end+0xfffa9d24>
   8a340:	05400404 	movi	r21,16
   8a344:	ac01b00e 	bge	r21,r16,8aa08 <___vfiprintf_internal_r+0x12d8>
   8a348:	01400274 	movhi	r5,9
   8a34c:	2945af04 	addi	r5,r5,5820
   8a350:	d9402315 	stw	r5,140(sp)
   8a354:	070001c4 	movi	fp,7
   8a358:	00000506 	br	8a370 <___vfiprintf_internal_r+0xc40>
   8a35c:	21400084 	addi	r5,r4,2
   8a360:	42000204 	addi	r8,r8,8
   8a364:	1809883a 	mov	r4,r3
   8a368:	843ffc04 	addi	r16,r16,-16
   8a36c:	ac000d0e 	bge	r21,r16,8a3a4 <___vfiprintf_internal_r+0xc74>
   8a370:	10800404 	addi	r2,r2,16
   8a374:	20c00044 	addi	r3,r4,1
   8a378:	44800015 	stw	r18,0(r8)
   8a37c:	45400115 	stw	r21,4(r8)
   8a380:	d8801c15 	stw	r2,112(sp)
   8a384:	d8c01b15 	stw	r3,108(sp)
   8a388:	e0fff40e 	bge	fp,r3,8a35c <__alt_data_end+0xfffaa35c>
   8a38c:	1000101e 	bne	r2,zero,8a3d0 <___vfiprintf_internal_r+0xca0>
   8a390:	843ffc04 	addi	r16,r16,-16
   8a394:	01400044 	movi	r5,1
   8a398:	0009883a 	mov	r4,zero
   8a39c:	d811883a 	mov	r8,sp
   8a3a0:	ac3ff316 	blt	r21,r16,8a370 <__alt_data_end+0xfffaa370>
   8a3a4:	d8c02317 	ldw	r3,140(sp)
   8a3a8:	1405883a 	add	r2,r2,r16
   8a3ac:	44000115 	stw	r16,4(r8)
   8a3b0:	40c00015 	stw	r3,0(r8)
   8a3b4:	d8801c15 	stw	r2,112(sp)
   8a3b8:	d9401b15 	stw	r5,108(sp)
   8a3bc:	00c001c4 	movi	r3,7
   8a3c0:	19401916 	blt	r3,r5,8a428 <___vfiprintf_internal_r+0xcf8>
   8a3c4:	42000204 	addi	r8,r8,8
   8a3c8:	29400044 	addi	r5,r5,1
   8a3cc:	003e5506 	br	89d24 <__alt_data_end+0xfffa9d24>
   8a3d0:	d9402017 	ldw	r5,128(sp)
   8a3d4:	d9002117 	ldw	r4,132(sp)
   8a3d8:	d9801a04 	addi	r6,sp,104
   8a3dc:	008961c0 	call	8961c <__sprint_r.part.0>
   8a3e0:	10000b1e 	bne	r2,zero,8a410 <___vfiprintf_internal_r+0xce0>
   8a3e4:	d9001b17 	ldw	r4,108(sp)
   8a3e8:	d8801c17 	ldw	r2,112(sp)
   8a3ec:	d811883a 	mov	r8,sp
   8a3f0:	21400044 	addi	r5,r4,1
   8a3f4:	003fdc06 	br	8a368 <__alt_data_end+0xfffaa368>
   8a3f8:	d8801c17 	ldw	r2,112(sp)
   8a3fc:	10000426 	beq	r2,zero,8a410 <___vfiprintf_internal_r+0xce0>
   8a400:	d9402017 	ldw	r5,128(sp)
   8a404:	d9002117 	ldw	r4,132(sp)
   8a408:	d9801a04 	addi	r6,sp,104
   8a40c:	008961c0 	call	8961c <__sprint_r.part.0>
   8a410:	d9402017 	ldw	r5,128(sp)
   8a414:	2880030b 	ldhu	r2,12(r5)
   8a418:	1080100c 	andi	r2,r2,64
   8a41c:	10014d1e 	bne	r2,zero,8a954 <___vfiprintf_internal_r+0x1224>
   8a420:	d8802417 	ldw	r2,144(sp)
   8a424:	003d9706 	br	89a84 <__alt_data_end+0xfffa9a84>
   8a428:	1000d21e 	bne	r2,zero,8a774 <___vfiprintf_internal_r+0x1044>
   8a42c:	00c00044 	movi	r3,1
   8a430:	a005883a 	mov	r2,r20
   8a434:	ddc00015 	stw	r23,0(sp)
   8a438:	dd000115 	stw	r20,4(sp)
   8a43c:	dd001c15 	stw	r20,112(sp)
   8a440:	d8c01b15 	stw	r3,108(sp)
   8a444:	d811883a 	mov	r8,sp
   8a448:	42000204 	addi	r8,r8,8
   8a44c:	8c40010c 	andi	r17,r17,4
   8a450:	88004026 	beq	r17,zero,8a554 <___vfiprintf_internal_r+0xe24>
   8a454:	d9002517 	ldw	r4,148(sp)
   8a458:	24e3c83a 	sub	r17,r4,r19
   8a45c:	04403d0e 	bge	zero,r17,8a554 <___vfiprintf_internal_r+0xe24>
   8a460:	04000404 	movi	r16,16
   8a464:	8441a90e 	bge	r16,r17,8ab0c <___vfiprintf_internal_r+0x13dc>
   8a468:	00c00274 	movhi	r3,9
   8a46c:	18c5b304 	addi	r3,r3,5836
   8a470:	d9001b17 	ldw	r4,108(sp)
   8a474:	d8c02315 	stw	r3,140(sp)
   8a478:	050001c4 	movi	r20,7
   8a47c:	dd402117 	ldw	r21,132(sp)
   8a480:	ddc02017 	ldw	r23,128(sp)
   8a484:	00000506 	br	8a49c <___vfiprintf_internal_r+0xd6c>
   8a488:	21400084 	addi	r5,r4,2
   8a48c:	42000204 	addi	r8,r8,8
   8a490:	1809883a 	mov	r4,r3
   8a494:	8c7ffc04 	addi	r17,r17,-16
   8a498:	84400f0e 	bge	r16,r17,8a4d8 <___vfiprintf_internal_r+0xda8>
   8a49c:	01400274 	movhi	r5,9
   8a4a0:	10800404 	addi	r2,r2,16
   8a4a4:	20c00044 	addi	r3,r4,1
   8a4a8:	2945b304 	addi	r5,r5,5836
   8a4ac:	41400015 	stw	r5,0(r8)
   8a4b0:	44000115 	stw	r16,4(r8)
   8a4b4:	d8801c15 	stw	r2,112(sp)
   8a4b8:	d8c01b15 	stw	r3,108(sp)
   8a4bc:	a0fff20e 	bge	r20,r3,8a488 <__alt_data_end+0xfffaa488>
   8a4c0:	1000141e 	bne	r2,zero,8a514 <___vfiprintf_internal_r+0xde4>
   8a4c4:	8c7ffc04 	addi	r17,r17,-16
   8a4c8:	01400044 	movi	r5,1
   8a4cc:	0009883a 	mov	r4,zero
   8a4d0:	d811883a 	mov	r8,sp
   8a4d4:	847ff116 	blt	r16,r17,8a49c <__alt_data_end+0xfffaa49c>
   8a4d8:	d8c02317 	ldw	r3,140(sp)
   8a4dc:	1445883a 	add	r2,r2,r17
   8a4e0:	44400115 	stw	r17,4(r8)
   8a4e4:	40c00015 	stw	r3,0(r8)
   8a4e8:	d8801c15 	stw	r2,112(sp)
   8a4ec:	d9401b15 	stw	r5,108(sp)
   8a4f0:	00c001c4 	movi	r3,7
   8a4f4:	1940170e 	bge	r3,r5,8a554 <___vfiprintf_internal_r+0xe24>
   8a4f8:	1000101e 	bne	r2,zero,8a53c <___vfiprintf_internal_r+0xe0c>
   8a4fc:	d8802517 	ldw	r2,148(sp)
   8a500:	14c11616 	blt	r2,r19,8a95c <___vfiprintf_internal_r+0x122c>
   8a504:	d9002417 	ldw	r4,144(sp)
   8a508:	2089883a 	add	r4,r4,r2
   8a50c:	d9002415 	stw	r4,144(sp)
   8a510:	003e1806 	br	89d74 <__alt_data_end+0xfffa9d74>
   8a514:	d9801a04 	addi	r6,sp,104
   8a518:	b80b883a 	mov	r5,r23
   8a51c:	a809883a 	mov	r4,r21
   8a520:	008961c0 	call	8961c <__sprint_r.part.0>
   8a524:	103fba1e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8a528:	d9001b17 	ldw	r4,108(sp)
   8a52c:	d8801c17 	ldw	r2,112(sp)
   8a530:	d811883a 	mov	r8,sp
   8a534:	21400044 	addi	r5,r4,1
   8a538:	003fd606 	br	8a494 <__alt_data_end+0xfffaa494>
   8a53c:	d9402017 	ldw	r5,128(sp)
   8a540:	d9002117 	ldw	r4,132(sp)
   8a544:	d9801a04 	addi	r6,sp,104
   8a548:	008961c0 	call	8961c <__sprint_r.part.0>
   8a54c:	103fb01e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8a550:	d8801c17 	ldw	r2,112(sp)
   8a554:	d8c02517 	ldw	r3,148(sp)
   8a558:	1cc0010e 	bge	r3,r19,8a560 <___vfiprintf_internal_r+0xe30>
   8a55c:	9807883a 	mov	r3,r19
   8a560:	d9002417 	ldw	r4,144(sp)
   8a564:	20c9883a 	add	r4,r4,r3
   8a568:	d9002415 	stw	r4,144(sp)
   8a56c:	103e0126 	beq	r2,zero,89d74 <__alt_data_end+0xfffa9d74>
   8a570:	d9402017 	ldw	r5,128(sp)
   8a574:	d9002117 	ldw	r4,132(sp)
   8a578:	d9801a04 	addi	r6,sp,104
   8a57c:	008961c0 	call	8961c <__sprint_r.part.0>
   8a580:	103dfc26 	beq	r2,zero,89d74 <__alt_data_end+0xfffa9d74>
   8a584:	003fa206 	br	8a410 <__alt_data_end+0xfffaa410>
   8a588:	d9402017 	ldw	r5,128(sp)
   8a58c:	d9002117 	ldw	r4,132(sp)
   8a590:	d9801a04 	addi	r6,sp,104
   8a594:	d9c02b15 	stw	r7,172(sp)
   8a598:	008961c0 	call	8961c <__sprint_r.part.0>
   8a59c:	d9c02b17 	ldw	r7,172(sp)
   8a5a0:	103f9b1e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8a5a4:	d9001b17 	ldw	r4,108(sp)
   8a5a8:	d8801c17 	ldw	r2,112(sp)
   8a5ac:	d811883a 	mov	r8,sp
   8a5b0:	21800044 	addi	r6,r4,1
   8a5b4:	003dbf06 	br	89cb4 <__alt_data_end+0xfffa9cb4>
   8a5b8:	1000d81e 	bne	r2,zero,8a91c <___vfiprintf_internal_r+0x11ec>
   8a5bc:	d9001d87 	ldb	r4,118(sp)
   8a5c0:	20000a26 	beq	r4,zero,8a5ec <___vfiprintf_internal_r+0xebc>
   8a5c4:	00800044 	movi	r2,1
   8a5c8:	d9001d84 	addi	r4,sp,118
   8a5cc:	100b883a 	mov	r5,r2
   8a5d0:	d9000015 	stw	r4,0(sp)
   8a5d4:	d8800115 	stw	r2,4(sp)
   8a5d8:	d811883a 	mov	r8,sp
   8a5dc:	2809883a 	mov	r4,r5
   8a5e0:	42000204 	addi	r8,r8,8
   8a5e4:	29400044 	addi	r5,r5,1
   8a5e8:	003d9506 	br	89c40 <__alt_data_end+0xfffa9c40>
   8a5ec:	3800fd26 	beq	r7,zero,8a9e4 <___vfiprintf_internal_r+0x12b4>
   8a5f0:	00800084 	movi	r2,2
   8a5f4:	d9001d04 	addi	r4,sp,116
   8a5f8:	d9000015 	stw	r4,0(sp)
   8a5fc:	d8800115 	stw	r2,4(sp)
   8a600:	01400044 	movi	r5,1
   8a604:	d811883a 	mov	r8,sp
   8a608:	2809883a 	mov	r4,r5
   8a60c:	42000204 	addi	r8,r8,8
   8a610:	29400044 	addi	r5,r5,1
   8a614:	003f4606 	br	8a330 <__alt_data_end+0xfffaa330>
   8a618:	d8802517 	ldw	r2,148(sp)
   8a61c:	14c0010e 	bge	r2,r19,8a624 <___vfiprintf_internal_r+0xef4>
   8a620:	9805883a 	mov	r2,r19
   8a624:	d9402417 	ldw	r5,144(sp)
   8a628:	288b883a 	add	r5,r5,r2
   8a62c:	d9402415 	stw	r5,144(sp)
   8a630:	003dd006 	br	89d74 <__alt_data_end+0xfffa9d74>
   8a634:	d8001d85 	stb	zero,118(sp)
   8a638:	80005d16 	blt	r16,zero,8a7b0 <___vfiprintf_internal_r+0x1080>
   8a63c:	00ffdfc4 	movi	r3,-129
   8a640:	9d04b03a 	or	r2,r19,r20
   8a644:	88e2703a 	and	r17,r17,r3
   8a648:	103d3726 	beq	r2,zero,89b28 <__alt_data_end+0xfffa9b28>
   8a64c:	002b883a 	mov	r21,zero
   8a650:	d9002617 	ldw	r4,152(sp)
   8a654:	ddc01a04 	addi	r23,sp,104
   8a658:	988003cc 	andi	r2,r19,15
   8a65c:	a006973a 	slli	r3,r20,28
   8a660:	2085883a 	add	r2,r4,r2
   8a664:	9826d13a 	srli	r19,r19,4
   8a668:	10800003 	ldbu	r2,0(r2)
   8a66c:	a028d13a 	srli	r20,r20,4
   8a670:	bdffffc4 	addi	r23,r23,-1
   8a674:	1ce6b03a 	or	r19,r3,r19
   8a678:	b8800005 	stb	r2,0(r23)
   8a67c:	9d04b03a 	or	r2,r19,r20
   8a680:	103ff51e 	bne	r2,zero,8a658 <__alt_data_end+0xfffaa658>
   8a684:	d8801e17 	ldw	r2,120(sp)
   8a688:	15e9c83a 	sub	r20,r2,r23
   8a68c:	003d2b06 	br	89b3c <__alt_data_end+0xfffa9b3c>
   8a690:	d9402017 	ldw	r5,128(sp)
   8a694:	d9002117 	ldw	r4,132(sp)
   8a698:	d9801a04 	addi	r6,sp,104
   8a69c:	008961c0 	call	8961c <__sprint_r.part.0>
   8a6a0:	103f5b1e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8a6a4:	d8801c17 	ldw	r2,112(sp)
   8a6a8:	d811883a 	mov	r8,sp
   8a6ac:	003f6706 	br	8a44c <__alt_data_end+0xfffaa44c>
   8a6b0:	d9402017 	ldw	r5,128(sp)
   8a6b4:	d9002117 	ldw	r4,132(sp)
   8a6b8:	d9801a04 	addi	r6,sp,104
   8a6bc:	008961c0 	call	8961c <__sprint_r.part.0>
   8a6c0:	103f531e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8a6c4:	d811883a 	mov	r8,sp
   8a6c8:	003cd906 	br	89a30 <__alt_data_end+0xfffa9a30>
   8a6cc:	10803fcc 	andi	r2,r2,255
   8a6d0:	1080201c 	xori	r2,r2,128
   8a6d4:	10bfe004 	addi	r2,r2,-128
   8a6d8:	00c00c04 	movi	r3,48
   8a6dc:	10ffe926 	beq	r2,r3,8a684 <__alt_data_end+0xfffaa684>
   8a6e0:	b8ffffc5 	stb	r3,-1(r23)
   8a6e4:	d8c01e17 	ldw	r3,120(sp)
   8a6e8:	b8bfffc4 	addi	r2,r23,-1
   8a6ec:	102f883a 	mov	r23,r2
   8a6f0:	18a9c83a 	sub	r20,r3,r2
   8a6f4:	003d1106 	br	89b3c <__alt_data_end+0xfffa9b3c>
   8a6f8:	d9402017 	ldw	r5,128(sp)
   8a6fc:	d9002117 	ldw	r4,132(sp)
   8a700:	d9801a04 	addi	r6,sp,104
   8a704:	d8c02a15 	stw	r3,168(sp)
   8a708:	d9c02b15 	stw	r7,172(sp)
   8a70c:	008961c0 	call	8961c <__sprint_r.part.0>
   8a710:	d8c02a17 	ldw	r3,168(sp)
   8a714:	d9c02b17 	ldw	r7,172(sp)
   8a718:	103f3d1e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8a71c:	d9001b17 	ldw	r4,108(sp)
   8a720:	d8801c17 	ldw	r2,112(sp)
   8a724:	d811883a 	mov	r8,sp
   8a728:	21400044 	addi	r5,r4,1
   8a72c:	003d4406 	br	89c40 <__alt_data_end+0xfffa9c40>
   8a730:	d9402017 	ldw	r5,128(sp)
   8a734:	d9002117 	ldw	r4,132(sp)
   8a738:	d9801a04 	addi	r6,sp,104
   8a73c:	d8c02a15 	stw	r3,168(sp)
   8a740:	008961c0 	call	8961c <__sprint_r.part.0>
   8a744:	d8c02a17 	ldw	r3,168(sp)
   8a748:	103f311e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8a74c:	d9001b17 	ldw	r4,108(sp)
   8a750:	d8801c17 	ldw	r2,112(sp)
   8a754:	d811883a 	mov	r8,sp
   8a758:	21400044 	addi	r5,r4,1
   8a75c:	003ef406 	br	8a330 <__alt_data_end+0xfffaa330>
   8a760:	1000bd1e 	bne	r2,zero,8aa58 <___vfiprintf_internal_r+0x1328>
   8a764:	01400044 	movi	r5,1
   8a768:	0009883a 	mov	r4,zero
   8a76c:	d811883a 	mov	r8,sp
   8a770:	003ef106 	br	8a338 <__alt_data_end+0xfffaa338>
   8a774:	d9402017 	ldw	r5,128(sp)
   8a778:	d9002117 	ldw	r4,132(sp)
   8a77c:	d9801a04 	addi	r6,sp,104
   8a780:	008961c0 	call	8961c <__sprint_r.part.0>
   8a784:	103f221e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8a788:	d9401b17 	ldw	r5,108(sp)
   8a78c:	d8801c17 	ldw	r2,112(sp)
   8a790:	d811883a 	mov	r8,sp
   8a794:	29400044 	addi	r5,r5,1
   8a798:	003d6206 	br	89d24 <__alt_data_end+0xfffa9d24>
   8a79c:	01400274 	movhi	r5,9
   8a7a0:	29454e04 	addi	r5,r5,5432
   8a7a4:	d9402615 	stw	r5,152(sp)
   8a7a8:	d8c02215 	stw	r3,136(sp)
   8a7ac:	1023883a 	mov	r17,r2
   8a7b0:	9d04b03a 	or	r2,r19,r20
   8a7b4:	103fa51e 	bne	r2,zero,8a64c <__alt_data_end+0xfffaa64c>
   8a7b8:	002b883a 	mov	r21,zero
   8a7bc:	00800084 	movi	r2,2
   8a7c0:	003e4a06 	br	8a0ec <__alt_data_end+0xfffaa0ec>
   8a7c4:	01400274 	movhi	r5,9
   8a7c8:	29454e04 	addi	r5,r5,5432
   8a7cc:	002b883a 	mov	r21,zero
   8a7d0:	d9402615 	stw	r5,152(sp)
   8a7d4:	003f9e06 	br	8a650 <__alt_data_end+0xfffaa650>
   8a7d8:	d9402217 	ldw	r5,136(sp)
   8a7dc:	d8001d85 	stb	zero,118(sp)
   8a7e0:	0029883a 	mov	r20,zero
   8a7e4:	28800104 	addi	r2,r5,4
   8a7e8:	2cc00017 	ldw	r19,0(r5)
   8a7ec:	803e3a16 	blt	r16,zero,8a0d8 <__alt_data_end+0xfffaa0d8>
   8a7f0:	00ffdfc4 	movi	r3,-129
   8a7f4:	d8802215 	stw	r2,136(sp)
   8a7f8:	88e2703a 	and	r17,r17,r3
   8a7fc:	002b883a 	mov	r21,zero
   8a800:	983e9b26 	beq	r19,zero,8a270 <__alt_data_end+0xfffaa270>
   8a804:	00800244 	movi	r2,9
   8a808:	14fdc936 	bltu	r2,r19,89f30 <__alt_data_end+0xfffa9f30>
   8a80c:	003e9a06 	br	8a278 <__alt_data_end+0xfffaa278>
   8a810:	00800c04 	movi	r2,48
   8a814:	d8c01d45 	stb	r3,117(sp)
   8a818:	d8801d05 	stb	r2,116(sp)
   8a81c:	d8001d85 	stb	zero,118(sp)
   8a820:	88c00094 	ori	r3,r17,2
   8a824:	80009c16 	blt	r16,zero,8aa98 <___vfiprintf_internal_r+0x1368>
   8a828:	00bfdfc4 	movi	r2,-129
   8a82c:	88a2703a 	and	r17,r17,r2
   8a830:	8c400094 	ori	r17,r17,2
   8a834:	002b883a 	mov	r21,zero
   8a838:	003f8506 	br	8a650 <__alt_data_end+0xfffaa650>
   8a83c:	b029883a 	mov	r20,r22
   8a840:	003c0b06 	br	89870 <__alt_data_end+0xfffa9870>
   8a844:	04e7c83a 	sub	r19,zero,r19
   8a848:	05400b44 	movi	r21,45
   8a84c:	9804c03a 	cmpne	r2,r19,zero
   8a850:	0529c83a 	sub	r20,zero,r20
   8a854:	dd401d85 	stb	r21,118(sp)
   8a858:	a0a9c83a 	sub	r20,r20,r2
   8a85c:	80009716 	blt	r16,zero,8aabc <___vfiprintf_internal_r+0x138c>
   8a860:	00bfdfc4 	movi	r2,-129
   8a864:	88a2703a 	and	r17,r17,r2
   8a868:	003db006 	br	89f2c <__alt_data_end+0xfffa9f2c>
   8a86c:	b0c00007 	ldb	r3,0(r22)
   8a870:	003c0c06 	br	898a4 <__alt_data_end+0xfffa98a4>
   8a874:	8880100c 	andi	r2,r17,64
   8a878:	d8001d85 	stb	zero,118(sp)
   8a87c:	1000461e 	bne	r2,zero,8a998 <___vfiprintf_internal_r+0x1268>
   8a880:	d9002217 	ldw	r4,136(sp)
   8a884:	0029883a 	mov	r20,zero
   8a888:	20800104 	addi	r2,r4,4
   8a88c:	24c00017 	ldw	r19,0(r4)
   8a890:	803df80e 	bge	r16,zero,8a074 <__alt_data_end+0xfffaa074>
   8a894:	9d06b03a 	or	r3,r19,r20
   8a898:	d8802215 	stw	r2,136(sp)
   8a89c:	183d5e1e 	bne	r3,zero,89e18 <__alt_data_end+0xfffa9e18>
   8a8a0:	002b883a 	mov	r21,zero
   8a8a4:	0005883a 	mov	r2,zero
   8a8a8:	003e1006 	br	8a0ec <__alt_data_end+0xfffaa0ec>
   8a8ac:	8880040c 	andi	r2,r17,16
   8a8b0:	1000321e 	bne	r2,zero,8a97c <___vfiprintf_internal_r+0x124c>
   8a8b4:	8c40100c 	andi	r17,r17,64
   8a8b8:	88008d26 	beq	r17,zero,8aaf0 <___vfiprintf_internal_r+0x13c0>
   8a8bc:	d9402217 	ldw	r5,136(sp)
   8a8c0:	d8c02417 	ldw	r3,144(sp)
   8a8c4:	28800017 	ldw	r2,0(r5)
   8a8c8:	29400104 	addi	r5,r5,4
   8a8cc:	d9402215 	stw	r5,136(sp)
   8a8d0:	10c0000d 	sth	r3,0(r2)
   8a8d4:	003bca06 	br	89800 <__alt_data_end+0xfffa9800>
   8a8d8:	8880100c 	andi	r2,r17,64
   8a8dc:	10003a26 	beq	r2,zero,8a9c8 <___vfiprintf_internal_r+0x1298>
   8a8e0:	d8802217 	ldw	r2,136(sp)
   8a8e4:	14c0000f 	ldh	r19,0(r2)
   8a8e8:	10800104 	addi	r2,r2,4
   8a8ec:	d8802215 	stw	r2,136(sp)
   8a8f0:	9829d7fa 	srai	r20,r19,31
   8a8f4:	a005883a 	mov	r2,r20
   8a8f8:	003d8506 	br	89f10 <__alt_data_end+0xfffa9f10>
   8a8fc:	8880100c 	andi	r2,r17,64
   8a900:	10002b26 	beq	r2,zero,8a9b0 <___vfiprintf_internal_r+0x1280>
   8a904:	d8802217 	ldw	r2,136(sp)
   8a908:	0029883a 	mov	r20,zero
   8a90c:	14c0000b 	ldhu	r19,0(r2)
   8a910:	10800104 	addi	r2,r2,4
   8a914:	d8802215 	stw	r2,136(sp)
   8a918:	003d5d06 	br	89e90 <__alt_data_end+0xfffa9e90>
   8a91c:	d9402017 	ldw	r5,128(sp)
   8a920:	d9002117 	ldw	r4,132(sp)
   8a924:	d9801a04 	addi	r6,sp,104
   8a928:	d8c02a15 	stw	r3,168(sp)
   8a92c:	d9c02b15 	stw	r7,172(sp)
   8a930:	008961c0 	call	8961c <__sprint_r.part.0>
   8a934:	d8c02a17 	ldw	r3,168(sp)
   8a938:	d9c02b17 	ldw	r7,172(sp)
   8a93c:	103eb41e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8a940:	d9001b17 	ldw	r4,108(sp)
   8a944:	d8801c17 	ldw	r2,112(sp)
   8a948:	d811883a 	mov	r8,sp
   8a94c:	21400044 	addi	r5,r4,1
   8a950:	003e6706 	br	8a2f0 <__alt_data_end+0xfffaa2f0>
   8a954:	00bfffc4 	movi	r2,-1
   8a958:	003c4a06 	br	89a84 <__alt_data_end+0xfffa9a84>
   8a95c:	9805883a 	mov	r2,r19
   8a960:	003ee806 	br	8a504 <__alt_data_end+0xfffaa504>
   8a964:	d8c02217 	ldw	r3,136(sp)
   8a968:	0029883a 	mov	r20,zero
   8a96c:	18800104 	addi	r2,r3,4
   8a970:	1cc0000b 	ldhu	r19,0(r3)
   8a974:	803f9e0e 	bge	r16,zero,8a7f0 <__alt_data_end+0xfffaa7f0>
   8a978:	003dd706 	br	8a0d8 <__alt_data_end+0xfffaa0d8>
   8a97c:	d8c02217 	ldw	r3,136(sp)
   8a980:	d9002417 	ldw	r4,144(sp)
   8a984:	18800017 	ldw	r2,0(r3)
   8a988:	18c00104 	addi	r3,r3,4
   8a98c:	d8c02215 	stw	r3,136(sp)
   8a990:	11000015 	stw	r4,0(r2)
   8a994:	003b9a06 	br	89800 <__alt_data_end+0xfffa9800>
   8a998:	d8c02217 	ldw	r3,136(sp)
   8a99c:	0029883a 	mov	r20,zero
   8a9a0:	18800104 	addi	r2,r3,4
   8a9a4:	1cc0000b 	ldhu	r19,0(r3)
   8a9a8:	803db20e 	bge	r16,zero,8a074 <__alt_data_end+0xfffaa074>
   8a9ac:	003fb906 	br	8a894 <__alt_data_end+0xfffaa894>
   8a9b0:	d9002217 	ldw	r4,136(sp)
   8a9b4:	0029883a 	mov	r20,zero
   8a9b8:	24c00017 	ldw	r19,0(r4)
   8a9bc:	21000104 	addi	r4,r4,4
   8a9c0:	d9002215 	stw	r4,136(sp)
   8a9c4:	003d3206 	br	89e90 <__alt_data_end+0xfffa9e90>
   8a9c8:	d8c02217 	ldw	r3,136(sp)
   8a9cc:	1cc00017 	ldw	r19,0(r3)
   8a9d0:	18c00104 	addi	r3,r3,4
   8a9d4:	d8c02215 	stw	r3,136(sp)
   8a9d8:	9829d7fa 	srai	r20,r19,31
   8a9dc:	a005883a 	mov	r2,r20
   8a9e0:	003d4b06 	br	89f10 <__alt_data_end+0xfffa9f10>
   8a9e4:	0009883a 	mov	r4,zero
   8a9e8:	01400044 	movi	r5,1
   8a9ec:	d811883a 	mov	r8,sp
   8a9f0:	003e4f06 	br	8a330 <__alt_data_end+0xfffaa330>
   8a9f4:	d8c02215 	stw	r3,136(sp)
   8a9f8:	002b883a 	mov	r21,zero
   8a9fc:	003db806 	br	8a0e0 <__alt_data_end+0xfffaa0e0>
   8aa00:	d811883a 	mov	r8,sp
   8aa04:	003e9606 	br	8a460 <__alt_data_end+0xfffaa460>
   8aa08:	01000274 	movhi	r4,9
   8aa0c:	2105af04 	addi	r4,r4,5820
   8aa10:	d9002315 	stw	r4,140(sp)
   8aa14:	003e6306 	br	8a3a4 <__alt_data_end+0xfffaa3a4>
   8aa18:	b0c00043 	ldbu	r3,1(r22)
   8aa1c:	8c400814 	ori	r17,r17,32
   8aa20:	b5800044 	addi	r22,r22,1
   8aa24:	18c03fcc 	andi	r3,r3,255
   8aa28:	18c0201c 	xori	r3,r3,128
   8aa2c:	18ffe004 	addi	r3,r3,-128
   8aa30:	003b9c06 	br	898a4 <__alt_data_end+0xfffa98a4>
   8aa34:	b809883a 	mov	r4,r23
   8aa38:	da002a15 	stw	r8,168(sp)
   8aa3c:	0081d380 	call	81d38 <strlen>
   8aa40:	1029883a 	mov	r20,r2
   8aa44:	dd401d83 	ldbu	r21,118(sp)
   8aa48:	df002215 	stw	fp,136(sp)
   8aa4c:	0021883a 	mov	r16,zero
   8aa50:	da002a17 	ldw	r8,168(sp)
   8aa54:	003c3906 	br	89b3c <__alt_data_end+0xfffa9b3c>
   8aa58:	d9402017 	ldw	r5,128(sp)
   8aa5c:	d9002117 	ldw	r4,132(sp)
   8aa60:	d9801a04 	addi	r6,sp,104
   8aa64:	008961c0 	call	8961c <__sprint_r.part.0>
   8aa68:	103e691e 	bne	r2,zero,8a410 <__alt_data_end+0xfffaa410>
   8aa6c:	d9001b17 	ldw	r4,108(sp)
   8aa70:	d8801c17 	ldw	r2,112(sp)
   8aa74:	d811883a 	mov	r8,sp
   8aa78:	21400044 	addi	r5,r4,1
   8aa7c:	003e2e06 	br	8a338 <__alt_data_end+0xfffaa338>
   8aa80:	01000274 	movhi	r4,9
   8aa84:	2105b304 	addi	r4,r4,5836
   8aa88:	d9002315 	stw	r4,140(sp)
   8aa8c:	d9001b17 	ldw	r4,108(sp)
   8aa90:	21000044 	addi	r4,r4,1
   8aa94:	003c5e06 	br	89c10 <__alt_data_end+0xfffa9c10>
   8aa98:	002b883a 	mov	r21,zero
   8aa9c:	00800084 	movi	r2,2
   8aaa0:	10803fcc 	andi	r2,r2,255
   8aaa4:	01000044 	movi	r4,1
   8aaa8:	11002b26 	beq	r2,r4,8ab58 <___vfiprintf_internal_r+0x1428>
   8aaac:	01000084 	movi	r4,2
   8aab0:	11002b1e 	bne	r2,r4,8ab60 <___vfiprintf_internal_r+0x1430>
   8aab4:	1823883a 	mov	r17,r3
   8aab8:	003ee506 	br	8a650 <__alt_data_end+0xfffaa650>
   8aabc:	8807883a 	mov	r3,r17
   8aac0:	00800044 	movi	r2,1
   8aac4:	003ff606 	br	8aaa0 <__alt_data_end+0xfffaaaa0>
   8aac8:	00800184 	movi	r2,6
   8aacc:	1400012e 	bgeu	r2,r16,8aad4 <___vfiprintf_internal_r+0x13a4>
   8aad0:	1021883a 	mov	r16,r2
   8aad4:	8029883a 	mov	r20,r16
   8aad8:	8027883a 	mov	r19,r16
   8aadc:	80002216 	blt	r16,zero,8ab68 <___vfiprintf_internal_r+0x1438>
   8aae0:	05c00274 	movhi	r23,9
   8aae4:	df002215 	stw	fp,136(sp)
   8aae8:	bdc55304 	addi	r23,r23,5452
   8aaec:	003cfb06 	br	89edc <__alt_data_end+0xfffa9edc>
   8aaf0:	d9002217 	ldw	r4,136(sp)
   8aaf4:	d9402417 	ldw	r5,144(sp)
   8aaf8:	20800017 	ldw	r2,0(r4)
   8aafc:	21000104 	addi	r4,r4,4
   8ab00:	d9002215 	stw	r4,136(sp)
   8ab04:	11400015 	stw	r5,0(r2)
   8ab08:	003b3d06 	br	89800 <__alt_data_end+0xfffa9800>
   8ab0c:	01400274 	movhi	r5,9
   8ab10:	2945b304 	addi	r5,r5,5836
   8ab14:	d9402315 	stw	r5,140(sp)
   8ab18:	d9401b17 	ldw	r5,108(sp)
   8ab1c:	29400044 	addi	r5,r5,1
   8ab20:	003e6d06 	br	8a4d8 <__alt_data_end+0xfffaa4d8>
   8ab24:	8029883a 	mov	r20,r16
   8ab28:	dd401d83 	ldbu	r21,118(sp)
   8ab2c:	df002215 	stw	fp,136(sp)
   8ab30:	0021883a 	mov	r16,zero
   8ab34:	003c0106 	br	89b3c <__alt_data_end+0xfffa9b3c>
   8ab38:	00c00274 	movhi	r3,9
   8ab3c:	18c5af04 	addi	r3,r3,5820
   8ab40:	d8c02315 	stw	r3,140(sp)
   8ab44:	280d883a 	mov	r6,r5
   8ab48:	003c6906 	br	89cf0 <__alt_data_end+0xfffa9cf0>
   8ab4c:	802d883a 	mov	r22,r16
   8ab50:	0021883a 	mov	r16,zero
   8ab54:	003b5406 	br	898a8 <__alt_data_end+0xfffa98a8>
   8ab58:	1823883a 	mov	r17,r3
   8ab5c:	003cf306 	br	89f2c <__alt_data_end+0xfffa9f2c>
   8ab60:	1823883a 	mov	r17,r3
   8ab64:	003cad06 	br	89e1c <__alt_data_end+0xfffa9e1c>
   8ab68:	0027883a 	mov	r19,zero
   8ab6c:	003fdc06 	br	8aae0 <__alt_data_end+0xfffaaae0>
   8ab70:	d9402217 	ldw	r5,136(sp)
   8ab74:	8005883a 	mov	r2,r16
   8ab78:	b0c00043 	ldbu	r3,1(r22)
   8ab7c:	2c000017 	ldw	r16,0(r5)
   8ab80:	29000104 	addi	r4,r5,4
   8ab84:	d9002215 	stw	r4,136(sp)
   8ab88:	102d883a 	mov	r22,r2
   8ab8c:	803fa50e 	bge	r16,zero,8aa24 <__alt_data_end+0xfffaaa24>
   8ab90:	18c03fcc 	andi	r3,r3,255
   8ab94:	18c0201c 	xori	r3,r3,128
   8ab98:	043fffc4 	movi	r16,-1
   8ab9c:	18ffe004 	addi	r3,r3,-128
   8aba0:	003b4006 	br	898a4 <__alt_data_end+0xfffa98a4>
   8aba4:	d9402303 	ldbu	r5,140(sp)
   8aba8:	d9401d85 	stb	r5,118(sp)
   8abac:	003cae06 	br	89e68 <__alt_data_end+0xfffa9e68>
   8abb0:	d8c02303 	ldbu	r3,140(sp)
   8abb4:	d8c01d85 	stb	r3,118(sp)
   8abb8:	003d1406 	br	8a00c <__alt_data_end+0xfffaa00c>
   8abbc:	d8c02303 	ldbu	r3,140(sp)
   8abc0:	d8c01d85 	stb	r3,118(sp)
   8abc4:	003cca06 	br	89ef0 <__alt_data_end+0xfffa9ef0>
   8abc8:	8880004c 	andi	r2,r17,1
   8abcc:	002b883a 	mov	r21,zero
   8abd0:	10000526 	beq	r2,zero,8abe8 <___vfiprintf_internal_r+0x14b8>
   8abd4:	00800c04 	movi	r2,48
   8abd8:	d88019c5 	stb	r2,103(sp)
   8abdc:	dd002817 	ldw	r20,160(sp)
   8abe0:	ddc019c4 	addi	r23,sp,103
   8abe4:	003bd506 	br	89b3c <__alt_data_end+0xfffa9b3c>
   8abe8:	0029883a 	mov	r20,zero
   8abec:	ddc01a04 	addi	r23,sp,104
   8abf0:	003bd206 	br	89b3c <__alt_data_end+0xfffa9b3c>
   8abf4:	d9002303 	ldbu	r4,140(sp)
   8abf8:	d9001d85 	stb	r4,118(sp)
   8abfc:	003da606 	br	8a298 <__alt_data_end+0xfffaa298>
   8ac00:	d8c02303 	ldbu	r3,140(sp)
   8ac04:	d8c01d85 	stb	r3,118(sp)
   8ac08:	003c7606 	br	89de4 <__alt_data_end+0xfffa9de4>
   8ac0c:	d8c02303 	ldbu	r3,140(sp)
   8ac10:	d8c01d85 	stb	r3,118(sp)
   8ac14:	003c6506 	br	89dac <__alt_data_end+0xfffa9dac>
   8ac18:	d9002303 	ldbu	r4,140(sp)
   8ac1c:	d9001d85 	stb	r4,118(sp)
   8ac20:	003d3d06 	br	8a118 <__alt_data_end+0xfffaa118>
   8ac24:	d8c02303 	ldbu	r3,140(sp)
   8ac28:	d8c01d85 	stb	r3,118(sp)
   8ac2c:	003d1d06 	br	8a0a4 <__alt_data_end+0xfffaa0a4>
   8ac30:	d8c02303 	ldbu	r3,140(sp)
   8ac34:	d8c01d85 	stb	r3,118(sp)
   8ac38:	003d0306 	br	8a048 <__alt_data_end+0xfffaa048>

0008ac3c <__vfiprintf_internal>:
   8ac3c:	00800274 	movhi	r2,9
   8ac40:	108f7e04 	addi	r2,r2,15864
   8ac44:	300f883a 	mov	r7,r6
   8ac48:	280d883a 	mov	r6,r5
   8ac4c:	200b883a 	mov	r5,r4
   8ac50:	11000017 	ldw	r4,0(r2)
   8ac54:	00897301 	jmpi	89730 <___vfiprintf_internal_r>

0008ac58 <__sbprintf>:
   8ac58:	2880030b 	ldhu	r2,12(r5)
   8ac5c:	2ac01917 	ldw	r11,100(r5)
   8ac60:	2a80038b 	ldhu	r10,14(r5)
   8ac64:	2a400717 	ldw	r9,28(r5)
   8ac68:	2a000917 	ldw	r8,36(r5)
   8ac6c:	defee204 	addi	sp,sp,-1144
   8ac70:	00c10004 	movi	r3,1024
   8ac74:	dc011a15 	stw	r16,1128(sp)
   8ac78:	10bfff4c 	andi	r2,r2,65533
   8ac7c:	2821883a 	mov	r16,r5
   8ac80:	d8cb883a 	add	r5,sp,r3
   8ac84:	dc811c15 	stw	r18,1136(sp)
   8ac88:	dc411b15 	stw	r17,1132(sp)
   8ac8c:	dfc11d15 	stw	ra,1140(sp)
   8ac90:	2025883a 	mov	r18,r4
   8ac94:	d881030d 	sth	r2,1036(sp)
   8ac98:	dac11915 	stw	r11,1124(sp)
   8ac9c:	da81038d 	sth	r10,1038(sp)
   8aca0:	da410715 	stw	r9,1052(sp)
   8aca4:	da010915 	stw	r8,1060(sp)
   8aca8:	dec10015 	stw	sp,1024(sp)
   8acac:	dec10415 	stw	sp,1040(sp)
   8acb0:	d8c10215 	stw	r3,1032(sp)
   8acb4:	d8c10515 	stw	r3,1044(sp)
   8acb8:	d8010615 	stw	zero,1048(sp)
   8acbc:	00897300 	call	89730 <___vfiprintf_internal_r>
   8acc0:	1023883a 	mov	r17,r2
   8acc4:	10000416 	blt	r2,zero,8acd8 <__sbprintf+0x80>
   8acc8:	d9410004 	addi	r5,sp,1024
   8accc:	9009883a 	mov	r4,r18
   8acd0:	0085da40 	call	85da4 <_fflush_r>
   8acd4:	10000d1e 	bne	r2,zero,8ad0c <__sbprintf+0xb4>
   8acd8:	d881030b 	ldhu	r2,1036(sp)
   8acdc:	1080100c 	andi	r2,r2,64
   8ace0:	10000326 	beq	r2,zero,8acf0 <__sbprintf+0x98>
   8ace4:	8080030b 	ldhu	r2,12(r16)
   8ace8:	10801014 	ori	r2,r2,64
   8acec:	8080030d 	sth	r2,12(r16)
   8acf0:	8805883a 	mov	r2,r17
   8acf4:	dfc11d17 	ldw	ra,1140(sp)
   8acf8:	dc811c17 	ldw	r18,1136(sp)
   8acfc:	dc411b17 	ldw	r17,1132(sp)
   8ad00:	dc011a17 	ldw	r16,1128(sp)
   8ad04:	dec11e04 	addi	sp,sp,1144
   8ad08:	f800283a 	ret
   8ad0c:	047fffc4 	movi	r17,-1
   8ad10:	003ff106 	br	8acd8 <__alt_data_end+0xfffaacd8>

0008ad14 <__swbuf_r>:
   8ad14:	defffb04 	addi	sp,sp,-20
   8ad18:	dcc00315 	stw	r19,12(sp)
   8ad1c:	dc800215 	stw	r18,8(sp)
   8ad20:	dc000015 	stw	r16,0(sp)
   8ad24:	dfc00415 	stw	ra,16(sp)
   8ad28:	dc400115 	stw	r17,4(sp)
   8ad2c:	2025883a 	mov	r18,r4
   8ad30:	2827883a 	mov	r19,r5
   8ad34:	3021883a 	mov	r16,r6
   8ad38:	20000226 	beq	r4,zero,8ad44 <__swbuf_r+0x30>
   8ad3c:	20800e17 	ldw	r2,56(r4)
   8ad40:	10004226 	beq	r2,zero,8ae4c <__swbuf_r+0x138>
   8ad44:	80800617 	ldw	r2,24(r16)
   8ad48:	8100030b 	ldhu	r4,12(r16)
   8ad4c:	80800215 	stw	r2,8(r16)
   8ad50:	2080020c 	andi	r2,r4,8
   8ad54:	10003626 	beq	r2,zero,8ae30 <__swbuf_r+0x11c>
   8ad58:	80c00417 	ldw	r3,16(r16)
   8ad5c:	18003426 	beq	r3,zero,8ae30 <__swbuf_r+0x11c>
   8ad60:	2088000c 	andi	r2,r4,8192
   8ad64:	9c403fcc 	andi	r17,r19,255
   8ad68:	10001a26 	beq	r2,zero,8add4 <__swbuf_r+0xc0>
   8ad6c:	80800017 	ldw	r2,0(r16)
   8ad70:	81000517 	ldw	r4,20(r16)
   8ad74:	10c7c83a 	sub	r3,r2,r3
   8ad78:	1900200e 	bge	r3,r4,8adfc <__swbuf_r+0xe8>
   8ad7c:	18c00044 	addi	r3,r3,1
   8ad80:	81000217 	ldw	r4,8(r16)
   8ad84:	11400044 	addi	r5,r2,1
   8ad88:	81400015 	stw	r5,0(r16)
   8ad8c:	213fffc4 	addi	r4,r4,-1
   8ad90:	81000215 	stw	r4,8(r16)
   8ad94:	14c00005 	stb	r19,0(r2)
   8ad98:	80800517 	ldw	r2,20(r16)
   8ad9c:	10c01e26 	beq	r2,r3,8ae18 <__swbuf_r+0x104>
   8ada0:	8080030b 	ldhu	r2,12(r16)
   8ada4:	1080004c 	andi	r2,r2,1
   8ada8:	10000226 	beq	r2,zero,8adb4 <__swbuf_r+0xa0>
   8adac:	00800284 	movi	r2,10
   8adb0:	88801926 	beq	r17,r2,8ae18 <__swbuf_r+0x104>
   8adb4:	8805883a 	mov	r2,r17
   8adb8:	dfc00417 	ldw	ra,16(sp)
   8adbc:	dcc00317 	ldw	r19,12(sp)
   8adc0:	dc800217 	ldw	r18,8(sp)
   8adc4:	dc400117 	ldw	r17,4(sp)
   8adc8:	dc000017 	ldw	r16,0(sp)
   8adcc:	dec00504 	addi	sp,sp,20
   8add0:	f800283a 	ret
   8add4:	81401917 	ldw	r5,100(r16)
   8add8:	00b7ffc4 	movi	r2,-8193
   8addc:	21080014 	ori	r4,r4,8192
   8ade0:	2884703a 	and	r2,r5,r2
   8ade4:	80801915 	stw	r2,100(r16)
   8ade8:	80800017 	ldw	r2,0(r16)
   8adec:	8100030d 	sth	r4,12(r16)
   8adf0:	81000517 	ldw	r4,20(r16)
   8adf4:	10c7c83a 	sub	r3,r2,r3
   8adf8:	193fe016 	blt	r3,r4,8ad7c <__alt_data_end+0xfffaad7c>
   8adfc:	800b883a 	mov	r5,r16
   8ae00:	9009883a 	mov	r4,r18
   8ae04:	0085da40 	call	85da4 <_fflush_r>
   8ae08:	1000071e 	bne	r2,zero,8ae28 <__swbuf_r+0x114>
   8ae0c:	80800017 	ldw	r2,0(r16)
   8ae10:	00c00044 	movi	r3,1
   8ae14:	003fda06 	br	8ad80 <__alt_data_end+0xfffaad80>
   8ae18:	800b883a 	mov	r5,r16
   8ae1c:	9009883a 	mov	r4,r18
   8ae20:	0085da40 	call	85da4 <_fflush_r>
   8ae24:	103fe326 	beq	r2,zero,8adb4 <__alt_data_end+0xfffaadb4>
   8ae28:	00bfffc4 	movi	r2,-1
   8ae2c:	003fe206 	br	8adb8 <__alt_data_end+0xfffaadb8>
   8ae30:	800b883a 	mov	r5,r16
   8ae34:	9009883a 	mov	r4,r18
   8ae38:	00841840 	call	84184 <__swsetup_r>
   8ae3c:	103ffa1e 	bne	r2,zero,8ae28 <__alt_data_end+0xfffaae28>
   8ae40:	8100030b 	ldhu	r4,12(r16)
   8ae44:	80c00417 	ldw	r3,16(r16)
   8ae48:	003fc506 	br	8ad60 <__alt_data_end+0xfffaad60>
   8ae4c:	00861900 	call	86190 <__sinit>
   8ae50:	003fbc06 	br	8ad44 <__alt_data_end+0xfffaad44>

0008ae54 <__swbuf>:
   8ae54:	00800274 	movhi	r2,9
   8ae58:	108f7e04 	addi	r2,r2,15864
   8ae5c:	280d883a 	mov	r6,r5
   8ae60:	200b883a 	mov	r5,r4
   8ae64:	11000017 	ldw	r4,0(r2)
   8ae68:	008ad141 	jmpi	8ad14 <__swbuf_r>

0008ae6c <_write_r>:
   8ae6c:	defffd04 	addi	sp,sp,-12
   8ae70:	2805883a 	mov	r2,r5
   8ae74:	dc000015 	stw	r16,0(sp)
   8ae78:	04000274 	movhi	r16,9
   8ae7c:	dc400115 	stw	r17,4(sp)
   8ae80:	300b883a 	mov	r5,r6
   8ae84:	84191e04 	addi	r16,r16,25720
   8ae88:	2023883a 	mov	r17,r4
   8ae8c:	380d883a 	mov	r6,r7
   8ae90:	1009883a 	mov	r4,r2
   8ae94:	dfc00215 	stw	ra,8(sp)
   8ae98:	80000015 	stw	zero,0(r16)
   8ae9c:	008f4a00 	call	8f4a0 <write>
   8aea0:	00ffffc4 	movi	r3,-1
   8aea4:	10c00526 	beq	r2,r3,8aebc <_write_r+0x50>
   8aea8:	dfc00217 	ldw	ra,8(sp)
   8aeac:	dc400117 	ldw	r17,4(sp)
   8aeb0:	dc000017 	ldw	r16,0(sp)
   8aeb4:	dec00304 	addi	sp,sp,12
   8aeb8:	f800283a 	ret
   8aebc:	80c00017 	ldw	r3,0(r16)
   8aec0:	183ff926 	beq	r3,zero,8aea8 <__alt_data_end+0xfffaaea8>
   8aec4:	88c00015 	stw	r3,0(r17)
   8aec8:	003ff706 	br	8aea8 <__alt_data_end+0xfffaaea8>

0008aecc <_close_r>:
   8aecc:	defffd04 	addi	sp,sp,-12
   8aed0:	dc000015 	stw	r16,0(sp)
   8aed4:	04000274 	movhi	r16,9
   8aed8:	dc400115 	stw	r17,4(sp)
   8aedc:	84191e04 	addi	r16,r16,25720
   8aee0:	2023883a 	mov	r17,r4
   8aee4:	2809883a 	mov	r4,r5
   8aee8:	dfc00215 	stw	ra,8(sp)
   8aeec:	80000015 	stw	zero,0(r16)
   8aef0:	008ec0c0 	call	8ec0c <close>
   8aef4:	00ffffc4 	movi	r3,-1
   8aef8:	10c00526 	beq	r2,r3,8af10 <_close_r+0x44>
   8aefc:	dfc00217 	ldw	ra,8(sp)
   8af00:	dc400117 	ldw	r17,4(sp)
   8af04:	dc000017 	ldw	r16,0(sp)
   8af08:	dec00304 	addi	sp,sp,12
   8af0c:	f800283a 	ret
   8af10:	80c00017 	ldw	r3,0(r16)
   8af14:	183ff926 	beq	r3,zero,8aefc <__alt_data_end+0xfffaaefc>
   8af18:	88c00015 	stw	r3,0(r17)
   8af1c:	003ff706 	br	8aefc <__alt_data_end+0xfffaaefc>

0008af20 <_calloc_r>:
   8af20:	defffe04 	addi	sp,sp,-8
   8af24:	2805883a 	mov	r2,r5
   8af28:	dc000015 	stw	r16,0(sp)
   8af2c:	300b883a 	mov	r5,r6
   8af30:	2021883a 	mov	r16,r4
   8af34:	1009883a 	mov	r4,r2
   8af38:	dfc00115 	stw	ra,4(sp)
   8af3c:	0081b340 	call	81b34 <__mulsi3>
   8af40:	100b883a 	mov	r5,r2
   8af44:	8009883a 	mov	r4,r16
   8af48:	0086efc0 	call	86efc <_malloc_r>
   8af4c:	10002926 	beq	r2,zero,8aff4 <_calloc_r+0xd4>
   8af50:	11bfff17 	ldw	r6,-4(r2)
   8af54:	1021883a 	mov	r16,r2
   8af58:	00bfff04 	movi	r2,-4
   8af5c:	308c703a 	and	r6,r6,r2
   8af60:	00c00904 	movi	r3,36
   8af64:	308d883a 	add	r6,r6,r2
   8af68:	19801636 	bltu	r3,r6,8afc4 <_calloc_r+0xa4>
   8af6c:	008004c4 	movi	r2,19
   8af70:	11800b2e 	bgeu	r2,r6,8afa0 <_calloc_r+0x80>
   8af74:	80000015 	stw	zero,0(r16)
   8af78:	80000115 	stw	zero,4(r16)
   8af7c:	008006c4 	movi	r2,27
   8af80:	11801a2e 	bgeu	r2,r6,8afec <_calloc_r+0xcc>
   8af84:	80000215 	stw	zero,8(r16)
   8af88:	80000315 	stw	zero,12(r16)
   8af8c:	30c0151e 	bne	r6,r3,8afe4 <_calloc_r+0xc4>
   8af90:	80000415 	stw	zero,16(r16)
   8af94:	80800604 	addi	r2,r16,24
   8af98:	80000515 	stw	zero,20(r16)
   8af9c:	00000106 	br	8afa4 <_calloc_r+0x84>
   8afa0:	8005883a 	mov	r2,r16
   8afa4:	10000015 	stw	zero,0(r2)
   8afa8:	10000115 	stw	zero,4(r2)
   8afac:	10000215 	stw	zero,8(r2)
   8afb0:	8005883a 	mov	r2,r16
   8afb4:	dfc00117 	ldw	ra,4(sp)
   8afb8:	dc000017 	ldw	r16,0(sp)
   8afbc:	dec00204 	addi	sp,sp,8
   8afc0:	f800283a 	ret
   8afc4:	000b883a 	mov	r5,zero
   8afc8:	8009883a 	mov	r4,r16
   8afcc:	0087a900 	call	87a90 <memset>
   8afd0:	8005883a 	mov	r2,r16
   8afd4:	dfc00117 	ldw	ra,4(sp)
   8afd8:	dc000017 	ldw	r16,0(sp)
   8afdc:	dec00204 	addi	sp,sp,8
   8afe0:	f800283a 	ret
   8afe4:	80800404 	addi	r2,r16,16
   8afe8:	003fee06 	br	8afa4 <__alt_data_end+0xfffaafa4>
   8afec:	80800204 	addi	r2,r16,8
   8aff0:	003fec06 	br	8afa4 <__alt_data_end+0xfffaafa4>
   8aff4:	0005883a 	mov	r2,zero
   8aff8:	003fee06 	br	8afb4 <__alt_data_end+0xfffaafb4>

0008affc <_fclose_r>:
   8affc:	28003926 	beq	r5,zero,8b0e4 <_fclose_r+0xe8>
   8b000:	defffc04 	addi	sp,sp,-16
   8b004:	dc400115 	stw	r17,4(sp)
   8b008:	dc000015 	stw	r16,0(sp)
   8b00c:	dfc00315 	stw	ra,12(sp)
   8b010:	dc800215 	stw	r18,8(sp)
   8b014:	2023883a 	mov	r17,r4
   8b018:	2821883a 	mov	r16,r5
   8b01c:	20000226 	beq	r4,zero,8b028 <_fclose_r+0x2c>
   8b020:	20800e17 	ldw	r2,56(r4)
   8b024:	10002726 	beq	r2,zero,8b0c4 <_fclose_r+0xc8>
   8b028:	8080030f 	ldh	r2,12(r16)
   8b02c:	1000071e 	bne	r2,zero,8b04c <_fclose_r+0x50>
   8b030:	0005883a 	mov	r2,zero
   8b034:	dfc00317 	ldw	ra,12(sp)
   8b038:	dc800217 	ldw	r18,8(sp)
   8b03c:	dc400117 	ldw	r17,4(sp)
   8b040:	dc000017 	ldw	r16,0(sp)
   8b044:	dec00404 	addi	sp,sp,16
   8b048:	f800283a 	ret
   8b04c:	800b883a 	mov	r5,r16
   8b050:	8809883a 	mov	r4,r17
   8b054:	0085b880 	call	85b88 <__sflush_r>
   8b058:	1025883a 	mov	r18,r2
   8b05c:	80800b17 	ldw	r2,44(r16)
   8b060:	10000426 	beq	r2,zero,8b074 <_fclose_r+0x78>
   8b064:	81400717 	ldw	r5,28(r16)
   8b068:	8809883a 	mov	r4,r17
   8b06c:	103ee83a 	callr	r2
   8b070:	10001616 	blt	r2,zero,8b0cc <_fclose_r+0xd0>
   8b074:	8080030b 	ldhu	r2,12(r16)
   8b078:	1080200c 	andi	r2,r2,128
   8b07c:	1000151e 	bne	r2,zero,8b0d4 <_fclose_r+0xd8>
   8b080:	81400c17 	ldw	r5,48(r16)
   8b084:	28000526 	beq	r5,zero,8b09c <_fclose_r+0xa0>
   8b088:	80801004 	addi	r2,r16,64
   8b08c:	28800226 	beq	r5,r2,8b098 <_fclose_r+0x9c>
   8b090:	8809883a 	mov	r4,r17
   8b094:	00863040 	call	86304 <_free_r>
   8b098:	80000c15 	stw	zero,48(r16)
   8b09c:	81401117 	ldw	r5,68(r16)
   8b0a0:	28000326 	beq	r5,zero,8b0b0 <_fclose_r+0xb4>
   8b0a4:	8809883a 	mov	r4,r17
   8b0a8:	00863040 	call	86304 <_free_r>
   8b0ac:	80001115 	stw	zero,68(r16)
   8b0b0:	00861a00 	call	861a0 <__sfp_lock_acquire>
   8b0b4:	8000030d 	sth	zero,12(r16)
   8b0b8:	00861a40 	call	861a4 <__sfp_lock_release>
   8b0bc:	9005883a 	mov	r2,r18
   8b0c0:	003fdc06 	br	8b034 <__alt_data_end+0xfffab034>
   8b0c4:	00861900 	call	86190 <__sinit>
   8b0c8:	003fd706 	br	8b028 <__alt_data_end+0xfffab028>
   8b0cc:	04bfffc4 	movi	r18,-1
   8b0d0:	003fe806 	br	8b074 <__alt_data_end+0xfffab074>
   8b0d4:	81400417 	ldw	r5,16(r16)
   8b0d8:	8809883a 	mov	r4,r17
   8b0dc:	00863040 	call	86304 <_free_r>
   8b0e0:	003fe706 	br	8b080 <__alt_data_end+0xfffab080>
   8b0e4:	0005883a 	mov	r2,zero
   8b0e8:	f800283a 	ret

0008b0ec <fclose>:
   8b0ec:	00800274 	movhi	r2,9
   8b0f0:	108f7e04 	addi	r2,r2,15864
   8b0f4:	200b883a 	mov	r5,r4
   8b0f8:	11000017 	ldw	r4,0(r2)
   8b0fc:	008affc1 	jmpi	8affc <_fclose_r>

0008b100 <__fputwc>:
   8b100:	defff804 	addi	sp,sp,-32
   8b104:	dcc00415 	stw	r19,16(sp)
   8b108:	dc800315 	stw	r18,12(sp)
   8b10c:	dc000115 	stw	r16,4(sp)
   8b110:	dfc00715 	stw	ra,28(sp)
   8b114:	dd400615 	stw	r21,24(sp)
   8b118:	dd000515 	stw	r20,20(sp)
   8b11c:	dc400215 	stw	r17,8(sp)
   8b120:	2027883a 	mov	r19,r4
   8b124:	2825883a 	mov	r18,r5
   8b128:	3021883a 	mov	r16,r6
   8b12c:	0086cec0 	call	86cec <__locale_mb_cur_max>
   8b130:	00c00044 	movi	r3,1
   8b134:	10c03e26 	beq	r2,r3,8b230 <__fputwc+0x130>
   8b138:	81c01704 	addi	r7,r16,92
   8b13c:	900d883a 	mov	r6,r18
   8b140:	d80b883a 	mov	r5,sp
   8b144:	9809883a 	mov	r4,r19
   8b148:	008b4780 	call	8b478 <_wcrtomb_r>
   8b14c:	1029883a 	mov	r20,r2
   8b150:	00bfffc4 	movi	r2,-1
   8b154:	a0802026 	beq	r20,r2,8b1d8 <__fputwc+0xd8>
   8b158:	d9400003 	ldbu	r5,0(sp)
   8b15c:	a0001c26 	beq	r20,zero,8b1d0 <__fputwc+0xd0>
   8b160:	0023883a 	mov	r17,zero
   8b164:	05400284 	movi	r21,10
   8b168:	00000906 	br	8b190 <__fputwc+0x90>
   8b16c:	80800017 	ldw	r2,0(r16)
   8b170:	11400005 	stb	r5,0(r2)
   8b174:	80c00017 	ldw	r3,0(r16)
   8b178:	18c00044 	addi	r3,r3,1
   8b17c:	80c00015 	stw	r3,0(r16)
   8b180:	8c400044 	addi	r17,r17,1
   8b184:	dc45883a 	add	r2,sp,r17
   8b188:	8d00112e 	bgeu	r17,r20,8b1d0 <__fputwc+0xd0>
   8b18c:	11400003 	ldbu	r5,0(r2)
   8b190:	80c00217 	ldw	r3,8(r16)
   8b194:	18ffffc4 	addi	r3,r3,-1
   8b198:	80c00215 	stw	r3,8(r16)
   8b19c:	183ff30e 	bge	r3,zero,8b16c <__alt_data_end+0xfffab16c>
   8b1a0:	80800617 	ldw	r2,24(r16)
   8b1a4:	18801916 	blt	r3,r2,8b20c <__fputwc+0x10c>
   8b1a8:	80800017 	ldw	r2,0(r16)
   8b1ac:	11400005 	stb	r5,0(r2)
   8b1b0:	80800017 	ldw	r2,0(r16)
   8b1b4:	10c00003 	ldbu	r3,0(r2)
   8b1b8:	10800044 	addi	r2,r2,1
   8b1bc:	1d402326 	beq	r3,r21,8b24c <__fputwc+0x14c>
   8b1c0:	80800015 	stw	r2,0(r16)
   8b1c4:	8c400044 	addi	r17,r17,1
   8b1c8:	dc45883a 	add	r2,sp,r17
   8b1cc:	8d3fef36 	bltu	r17,r20,8b18c <__alt_data_end+0xfffab18c>
   8b1d0:	9005883a 	mov	r2,r18
   8b1d4:	00000406 	br	8b1e8 <__fputwc+0xe8>
   8b1d8:	80c0030b 	ldhu	r3,12(r16)
   8b1dc:	a005883a 	mov	r2,r20
   8b1e0:	18c01014 	ori	r3,r3,64
   8b1e4:	80c0030d 	sth	r3,12(r16)
   8b1e8:	dfc00717 	ldw	ra,28(sp)
   8b1ec:	dd400617 	ldw	r21,24(sp)
   8b1f0:	dd000517 	ldw	r20,20(sp)
   8b1f4:	dcc00417 	ldw	r19,16(sp)
   8b1f8:	dc800317 	ldw	r18,12(sp)
   8b1fc:	dc400217 	ldw	r17,8(sp)
   8b200:	dc000117 	ldw	r16,4(sp)
   8b204:	dec00804 	addi	sp,sp,32
   8b208:	f800283a 	ret
   8b20c:	800d883a 	mov	r6,r16
   8b210:	29403fcc 	andi	r5,r5,255
   8b214:	9809883a 	mov	r4,r19
   8b218:	008ad140 	call	8ad14 <__swbuf_r>
   8b21c:	10bfffe0 	cmpeqi	r2,r2,-1
   8b220:	10803fcc 	andi	r2,r2,255
   8b224:	103fd626 	beq	r2,zero,8b180 <__alt_data_end+0xfffab180>
   8b228:	00bfffc4 	movi	r2,-1
   8b22c:	003fee06 	br	8b1e8 <__alt_data_end+0xfffab1e8>
   8b230:	90ffffc4 	addi	r3,r18,-1
   8b234:	01003f84 	movi	r4,254
   8b238:	20ffbf36 	bltu	r4,r3,8b138 <__alt_data_end+0xfffab138>
   8b23c:	900b883a 	mov	r5,r18
   8b240:	dc800005 	stb	r18,0(sp)
   8b244:	1029883a 	mov	r20,r2
   8b248:	003fc506 	br	8b160 <__alt_data_end+0xfffab160>
   8b24c:	800d883a 	mov	r6,r16
   8b250:	a80b883a 	mov	r5,r21
   8b254:	9809883a 	mov	r4,r19
   8b258:	008ad140 	call	8ad14 <__swbuf_r>
   8b25c:	10bfffe0 	cmpeqi	r2,r2,-1
   8b260:	003fef06 	br	8b220 <__alt_data_end+0xfffab220>

0008b264 <_fputwc_r>:
   8b264:	3080030b 	ldhu	r2,12(r6)
   8b268:	10c8000c 	andi	r3,r2,8192
   8b26c:	1800051e 	bne	r3,zero,8b284 <_fputwc_r+0x20>
   8b270:	30c01917 	ldw	r3,100(r6)
   8b274:	10880014 	ori	r2,r2,8192
   8b278:	3080030d 	sth	r2,12(r6)
   8b27c:	18880014 	ori	r2,r3,8192
   8b280:	30801915 	stw	r2,100(r6)
   8b284:	008b1001 	jmpi	8b100 <__fputwc>

0008b288 <fputwc>:
   8b288:	00800274 	movhi	r2,9
   8b28c:	defffc04 	addi	sp,sp,-16
   8b290:	108f7e04 	addi	r2,r2,15864
   8b294:	dc000115 	stw	r16,4(sp)
   8b298:	14000017 	ldw	r16,0(r2)
   8b29c:	dc400215 	stw	r17,8(sp)
   8b2a0:	dfc00315 	stw	ra,12(sp)
   8b2a4:	2023883a 	mov	r17,r4
   8b2a8:	80000226 	beq	r16,zero,8b2b4 <fputwc+0x2c>
   8b2ac:	80800e17 	ldw	r2,56(r16)
   8b2b0:	10001026 	beq	r2,zero,8b2f4 <fputwc+0x6c>
   8b2b4:	2880030b 	ldhu	r2,12(r5)
   8b2b8:	10c8000c 	andi	r3,r2,8192
   8b2bc:	1800051e 	bne	r3,zero,8b2d4 <fputwc+0x4c>
   8b2c0:	28c01917 	ldw	r3,100(r5)
   8b2c4:	10880014 	ori	r2,r2,8192
   8b2c8:	2880030d 	sth	r2,12(r5)
   8b2cc:	18880014 	ori	r2,r3,8192
   8b2d0:	28801915 	stw	r2,100(r5)
   8b2d4:	280d883a 	mov	r6,r5
   8b2d8:	8009883a 	mov	r4,r16
   8b2dc:	880b883a 	mov	r5,r17
   8b2e0:	dfc00317 	ldw	ra,12(sp)
   8b2e4:	dc400217 	ldw	r17,8(sp)
   8b2e8:	dc000117 	ldw	r16,4(sp)
   8b2ec:	dec00404 	addi	sp,sp,16
   8b2f0:	008b1001 	jmpi	8b100 <__fputwc>
   8b2f4:	8009883a 	mov	r4,r16
   8b2f8:	d9400015 	stw	r5,0(sp)
   8b2fc:	00861900 	call	86190 <__sinit>
   8b300:	d9400017 	ldw	r5,0(sp)
   8b304:	003feb06 	br	8b2b4 <__alt_data_end+0xfffab2b4>

0008b308 <_fstat_r>:
   8b308:	defffd04 	addi	sp,sp,-12
   8b30c:	2805883a 	mov	r2,r5
   8b310:	dc000015 	stw	r16,0(sp)
   8b314:	04000274 	movhi	r16,9
   8b318:	dc400115 	stw	r17,4(sp)
   8b31c:	84191e04 	addi	r16,r16,25720
   8b320:	2023883a 	mov	r17,r4
   8b324:	300b883a 	mov	r5,r6
   8b328:	1009883a 	mov	r4,r2
   8b32c:	dfc00215 	stw	ra,8(sp)
   8b330:	80000015 	stw	zero,0(r16)
   8b334:	008ed4c0 	call	8ed4c <fstat>
   8b338:	00ffffc4 	movi	r3,-1
   8b33c:	10c00526 	beq	r2,r3,8b354 <_fstat_r+0x4c>
   8b340:	dfc00217 	ldw	ra,8(sp)
   8b344:	dc400117 	ldw	r17,4(sp)
   8b348:	dc000017 	ldw	r16,0(sp)
   8b34c:	dec00304 	addi	sp,sp,12
   8b350:	f800283a 	ret
   8b354:	80c00017 	ldw	r3,0(r16)
   8b358:	183ff926 	beq	r3,zero,8b340 <__alt_data_end+0xfffab340>
   8b35c:	88c00015 	stw	r3,0(r17)
   8b360:	003ff706 	br	8b340 <__alt_data_end+0xfffab340>

0008b364 <_isatty_r>:
   8b364:	defffd04 	addi	sp,sp,-12
   8b368:	dc000015 	stw	r16,0(sp)
   8b36c:	04000274 	movhi	r16,9
   8b370:	dc400115 	stw	r17,4(sp)
   8b374:	84191e04 	addi	r16,r16,25720
   8b378:	2023883a 	mov	r17,r4
   8b37c:	2809883a 	mov	r4,r5
   8b380:	dfc00215 	stw	ra,8(sp)
   8b384:	80000015 	stw	zero,0(r16)
   8b388:	008ee400 	call	8ee40 <isatty>
   8b38c:	00ffffc4 	movi	r3,-1
   8b390:	10c00526 	beq	r2,r3,8b3a8 <_isatty_r+0x44>
   8b394:	dfc00217 	ldw	ra,8(sp)
   8b398:	dc400117 	ldw	r17,4(sp)
   8b39c:	dc000017 	ldw	r16,0(sp)
   8b3a0:	dec00304 	addi	sp,sp,12
   8b3a4:	f800283a 	ret
   8b3a8:	80c00017 	ldw	r3,0(r16)
   8b3ac:	183ff926 	beq	r3,zero,8b394 <__alt_data_end+0xfffab394>
   8b3b0:	88c00015 	stw	r3,0(r17)
   8b3b4:	003ff706 	br	8b394 <__alt_data_end+0xfffab394>

0008b3b8 <_lseek_r>:
   8b3b8:	defffd04 	addi	sp,sp,-12
   8b3bc:	2805883a 	mov	r2,r5
   8b3c0:	dc000015 	stw	r16,0(sp)
   8b3c4:	04000274 	movhi	r16,9
   8b3c8:	dc400115 	stw	r17,4(sp)
   8b3cc:	300b883a 	mov	r5,r6
   8b3d0:	84191e04 	addi	r16,r16,25720
   8b3d4:	2023883a 	mov	r17,r4
   8b3d8:	380d883a 	mov	r6,r7
   8b3dc:	1009883a 	mov	r4,r2
   8b3e0:	dfc00215 	stw	ra,8(sp)
   8b3e4:	80000015 	stw	zero,0(r16)
   8b3e8:	008f0140 	call	8f014 <lseek>
   8b3ec:	00ffffc4 	movi	r3,-1
   8b3f0:	10c00526 	beq	r2,r3,8b408 <_lseek_r+0x50>
   8b3f4:	dfc00217 	ldw	ra,8(sp)
   8b3f8:	dc400117 	ldw	r17,4(sp)
   8b3fc:	dc000017 	ldw	r16,0(sp)
   8b400:	dec00304 	addi	sp,sp,12
   8b404:	f800283a 	ret
   8b408:	80c00017 	ldw	r3,0(r16)
   8b40c:	183ff926 	beq	r3,zero,8b3f4 <__alt_data_end+0xfffab3f4>
   8b410:	88c00015 	stw	r3,0(r17)
   8b414:	003ff706 	br	8b3f4 <__alt_data_end+0xfffab3f4>

0008b418 <_read_r>:
   8b418:	defffd04 	addi	sp,sp,-12
   8b41c:	2805883a 	mov	r2,r5
   8b420:	dc000015 	stw	r16,0(sp)
   8b424:	04000274 	movhi	r16,9
   8b428:	dc400115 	stw	r17,4(sp)
   8b42c:	300b883a 	mov	r5,r6
   8b430:	84191e04 	addi	r16,r16,25720
   8b434:	2023883a 	mov	r17,r4
   8b438:	380d883a 	mov	r6,r7
   8b43c:	1009883a 	mov	r4,r2
   8b440:	dfc00215 	stw	ra,8(sp)
   8b444:	80000015 	stw	zero,0(r16)
   8b448:	008f22c0 	call	8f22c <read>
   8b44c:	00ffffc4 	movi	r3,-1
   8b450:	10c00526 	beq	r2,r3,8b468 <_read_r+0x50>
   8b454:	dfc00217 	ldw	ra,8(sp)
   8b458:	dc400117 	ldw	r17,4(sp)
   8b45c:	dc000017 	ldw	r16,0(sp)
   8b460:	dec00304 	addi	sp,sp,12
   8b464:	f800283a 	ret
   8b468:	80c00017 	ldw	r3,0(r16)
   8b46c:	183ff926 	beq	r3,zero,8b454 <__alt_data_end+0xfffab454>
   8b470:	88c00015 	stw	r3,0(r17)
   8b474:	003ff706 	br	8b454 <__alt_data_end+0xfffab454>

0008b478 <_wcrtomb_r>:
   8b478:	defff604 	addi	sp,sp,-40
   8b47c:	00800274 	movhi	r2,9
   8b480:	dc800815 	stw	r18,32(sp)
   8b484:	dc400715 	stw	r17,28(sp)
   8b488:	dc000615 	stw	r16,24(sp)
   8b48c:	108f8204 	addi	r2,r2,15880
   8b490:	dfc00915 	stw	ra,36(sp)
   8b494:	2021883a 	mov	r16,r4
   8b498:	3823883a 	mov	r17,r7
   8b49c:	14800017 	ldw	r18,0(r2)
   8b4a0:	28001426 	beq	r5,zero,8b4f4 <_wcrtomb_r+0x7c>
   8b4a4:	d9400415 	stw	r5,16(sp)
   8b4a8:	d9800515 	stw	r6,20(sp)
   8b4ac:	0086ce00 	call	86ce0 <__locale_charset>
   8b4b0:	d9800517 	ldw	r6,20(sp)
   8b4b4:	d9400417 	ldw	r5,16(sp)
   8b4b8:	100f883a 	mov	r7,r2
   8b4bc:	dc400015 	stw	r17,0(sp)
   8b4c0:	8009883a 	mov	r4,r16
   8b4c4:	903ee83a 	callr	r18
   8b4c8:	00ffffc4 	movi	r3,-1
   8b4cc:	10c0031e 	bne	r2,r3,8b4dc <_wcrtomb_r+0x64>
   8b4d0:	88000015 	stw	zero,0(r17)
   8b4d4:	00c02284 	movi	r3,138
   8b4d8:	80c00015 	stw	r3,0(r16)
   8b4dc:	dfc00917 	ldw	ra,36(sp)
   8b4e0:	dc800817 	ldw	r18,32(sp)
   8b4e4:	dc400717 	ldw	r17,28(sp)
   8b4e8:	dc000617 	ldw	r16,24(sp)
   8b4ec:	dec00a04 	addi	sp,sp,40
   8b4f0:	f800283a 	ret
   8b4f4:	0086ce00 	call	86ce0 <__locale_charset>
   8b4f8:	100f883a 	mov	r7,r2
   8b4fc:	dc400015 	stw	r17,0(sp)
   8b500:	000d883a 	mov	r6,zero
   8b504:	d9400104 	addi	r5,sp,4
   8b508:	8009883a 	mov	r4,r16
   8b50c:	903ee83a 	callr	r18
   8b510:	003fed06 	br	8b4c8 <__alt_data_end+0xfffab4c8>

0008b514 <wcrtomb>:
   8b514:	defff604 	addi	sp,sp,-40
   8b518:	00800274 	movhi	r2,9
   8b51c:	dc800615 	stw	r18,24(sp)
   8b520:	dc400515 	stw	r17,20(sp)
   8b524:	108f7e04 	addi	r2,r2,15864
   8b528:	dfc00915 	stw	ra,36(sp)
   8b52c:	dd000815 	stw	r20,32(sp)
   8b530:	dcc00715 	stw	r19,28(sp)
   8b534:	dc000415 	stw	r16,16(sp)
   8b538:	3025883a 	mov	r18,r6
   8b53c:	14400017 	ldw	r17,0(r2)
   8b540:	20001926 	beq	r4,zero,8b5a8 <wcrtomb+0x94>
   8b544:	00800274 	movhi	r2,9
   8b548:	108f8204 	addi	r2,r2,15880
   8b54c:	15000017 	ldw	r20,0(r2)
   8b550:	2021883a 	mov	r16,r4
   8b554:	2827883a 	mov	r19,r5
   8b558:	0086ce00 	call	86ce0 <__locale_charset>
   8b55c:	100f883a 	mov	r7,r2
   8b560:	dc800015 	stw	r18,0(sp)
   8b564:	980d883a 	mov	r6,r19
   8b568:	800b883a 	mov	r5,r16
   8b56c:	8809883a 	mov	r4,r17
   8b570:	a03ee83a 	callr	r20
   8b574:	00ffffc4 	movi	r3,-1
   8b578:	10c0031e 	bne	r2,r3,8b588 <wcrtomb+0x74>
   8b57c:	90000015 	stw	zero,0(r18)
   8b580:	00c02284 	movi	r3,138
   8b584:	88c00015 	stw	r3,0(r17)
   8b588:	dfc00917 	ldw	ra,36(sp)
   8b58c:	dd000817 	ldw	r20,32(sp)
   8b590:	dcc00717 	ldw	r19,28(sp)
   8b594:	dc800617 	ldw	r18,24(sp)
   8b598:	dc400517 	ldw	r17,20(sp)
   8b59c:	dc000417 	ldw	r16,16(sp)
   8b5a0:	dec00a04 	addi	sp,sp,40
   8b5a4:	f800283a 	ret
   8b5a8:	00800274 	movhi	r2,9
   8b5ac:	108f8204 	addi	r2,r2,15880
   8b5b0:	14000017 	ldw	r16,0(r2)
   8b5b4:	0086ce00 	call	86ce0 <__locale_charset>
   8b5b8:	100f883a 	mov	r7,r2
   8b5bc:	dc800015 	stw	r18,0(sp)
   8b5c0:	000d883a 	mov	r6,zero
   8b5c4:	d9400104 	addi	r5,sp,4
   8b5c8:	8809883a 	mov	r4,r17
   8b5cc:	803ee83a 	callr	r16
   8b5d0:	003fe806 	br	8b574 <__alt_data_end+0xfffab574>

0008b5d4 <__ascii_wctomb>:
   8b5d4:	28000526 	beq	r5,zero,8b5ec <__ascii_wctomb+0x18>
   8b5d8:	00803fc4 	movi	r2,255
   8b5dc:	11800536 	bltu	r2,r6,8b5f4 <__ascii_wctomb+0x20>
   8b5e0:	29800005 	stb	r6,0(r5)
   8b5e4:	00800044 	movi	r2,1
   8b5e8:	f800283a 	ret
   8b5ec:	0005883a 	mov	r2,zero
   8b5f0:	f800283a 	ret
   8b5f4:	00802284 	movi	r2,138
   8b5f8:	20800015 	stw	r2,0(r4)
   8b5fc:	00bfffc4 	movi	r2,-1
   8b600:	f800283a 	ret

0008b604 <_wctomb_r>:
   8b604:	00800274 	movhi	r2,9
   8b608:	defff904 	addi	sp,sp,-28
   8b60c:	108f8204 	addi	r2,r2,15880
   8b610:	dfc00615 	stw	ra,24(sp)
   8b614:	dc400515 	stw	r17,20(sp)
   8b618:	dc000415 	stw	r16,16(sp)
   8b61c:	3823883a 	mov	r17,r7
   8b620:	14000017 	ldw	r16,0(r2)
   8b624:	d9000115 	stw	r4,4(sp)
   8b628:	d9400215 	stw	r5,8(sp)
   8b62c:	d9800315 	stw	r6,12(sp)
   8b630:	0086ce00 	call	86ce0 <__locale_charset>
   8b634:	d9800317 	ldw	r6,12(sp)
   8b638:	d9400217 	ldw	r5,8(sp)
   8b63c:	d9000117 	ldw	r4,4(sp)
   8b640:	100f883a 	mov	r7,r2
   8b644:	dc400015 	stw	r17,0(sp)
   8b648:	803ee83a 	callr	r16
   8b64c:	dfc00617 	ldw	ra,24(sp)
   8b650:	dc400517 	ldw	r17,20(sp)
   8b654:	dc000417 	ldw	r16,16(sp)
   8b658:	dec00704 	addi	sp,sp,28
   8b65c:	f800283a 	ret

0008b660 <__muldi3>:
   8b660:	defff604 	addi	sp,sp,-40
   8b664:	dd800615 	stw	r22,24(sp)
   8b668:	dd400515 	stw	r21,20(sp)
   8b66c:	dc400115 	stw	r17,4(sp)
   8b670:	357fffcc 	andi	r21,r6,65535
   8b674:	2022d43a 	srli	r17,r4,16
   8b678:	25bfffcc 	andi	r22,r4,65535
   8b67c:	dcc00315 	stw	r19,12(sp)
   8b680:	dc800215 	stw	r18,8(sp)
   8b684:	2027883a 	mov	r19,r4
   8b688:	2825883a 	mov	r18,r5
   8b68c:	b009883a 	mov	r4,r22
   8b690:	a80b883a 	mov	r5,r21
   8b694:	dfc00915 	stw	ra,36(sp)
   8b698:	df000815 	stw	fp,32(sp)
   8b69c:	ddc00715 	stw	r23,28(sp)
   8b6a0:	3839883a 	mov	fp,r7
   8b6a4:	302ed43a 	srli	r23,r6,16
   8b6a8:	dd000415 	stw	r20,16(sp)
   8b6ac:	dc000015 	stw	r16,0(sp)
   8b6b0:	3029883a 	mov	r20,r6
   8b6b4:	0081b340 	call	81b34 <__mulsi3>
   8b6b8:	a80b883a 	mov	r5,r21
   8b6bc:	8809883a 	mov	r4,r17
   8b6c0:	1021883a 	mov	r16,r2
   8b6c4:	0081b340 	call	81b34 <__mulsi3>
   8b6c8:	8809883a 	mov	r4,r17
   8b6cc:	b80b883a 	mov	r5,r23
   8b6d0:	102b883a 	mov	r21,r2
   8b6d4:	0081b340 	call	81b34 <__mulsi3>
   8b6d8:	b80b883a 	mov	r5,r23
   8b6dc:	b009883a 	mov	r4,r22
   8b6e0:	1023883a 	mov	r17,r2
   8b6e4:	0081b340 	call	81b34 <__mulsi3>
   8b6e8:	8006d43a 	srli	r3,r16,16
   8b6ec:	1545883a 	add	r2,r2,r21
   8b6f0:	1885883a 	add	r2,r3,r2
   8b6f4:	1540022e 	bgeu	r2,r21,8b700 <__muldi3+0xa0>
   8b6f8:	00c00074 	movhi	r3,1
   8b6fc:	88e3883a 	add	r17,r17,r3
   8b700:	1006d43a 	srli	r3,r2,16
   8b704:	1004943a 	slli	r2,r2,16
   8b708:	e00b883a 	mov	r5,fp
   8b70c:	9809883a 	mov	r4,r19
   8b710:	843fffcc 	andi	r16,r16,65535
   8b714:	1c63883a 	add	r17,r3,r17
   8b718:	1421883a 	add	r16,r2,r16
   8b71c:	0081b340 	call	81b34 <__mulsi3>
   8b720:	900b883a 	mov	r5,r18
   8b724:	a009883a 	mov	r4,r20
   8b728:	1027883a 	mov	r19,r2
   8b72c:	0081b340 	call	81b34 <__mulsi3>
   8b730:	9885883a 	add	r2,r19,r2
   8b734:	1447883a 	add	r3,r2,r17
   8b738:	8005883a 	mov	r2,r16
   8b73c:	dfc00917 	ldw	ra,36(sp)
   8b740:	df000817 	ldw	fp,32(sp)
   8b744:	ddc00717 	ldw	r23,28(sp)
   8b748:	dd800617 	ldw	r22,24(sp)
   8b74c:	dd400517 	ldw	r21,20(sp)
   8b750:	dd000417 	ldw	r20,16(sp)
   8b754:	dcc00317 	ldw	r19,12(sp)
   8b758:	dc800217 	ldw	r18,8(sp)
   8b75c:	dc400117 	ldw	r17,4(sp)
   8b760:	dc000017 	ldw	r16,0(sp)
   8b764:	dec00a04 	addi	sp,sp,40
   8b768:	f800283a 	ret

0008b76c <__udivdi3>:
   8b76c:	defff404 	addi	sp,sp,-48
   8b770:	dcc00515 	stw	r19,20(sp)
   8b774:	dc000215 	stw	r16,8(sp)
   8b778:	dfc00b15 	stw	ra,44(sp)
   8b77c:	df000a15 	stw	fp,40(sp)
   8b780:	ddc00915 	stw	r23,36(sp)
   8b784:	dd800815 	stw	r22,32(sp)
   8b788:	dd400715 	stw	r21,28(sp)
   8b78c:	dd000615 	stw	r20,24(sp)
   8b790:	dc800415 	stw	r18,16(sp)
   8b794:	dc400315 	stw	r17,12(sp)
   8b798:	2027883a 	mov	r19,r4
   8b79c:	2821883a 	mov	r16,r5
   8b7a0:	3800461e 	bne	r7,zero,8b8bc <__udivdi3+0x150>
   8b7a4:	3023883a 	mov	r17,r6
   8b7a8:	2025883a 	mov	r18,r4
   8b7ac:	2980572e 	bgeu	r5,r6,8b90c <__udivdi3+0x1a0>
   8b7b0:	00bfffd4 	movui	r2,65535
   8b7b4:	282d883a 	mov	r22,r5
   8b7b8:	1180b236 	bltu	r2,r6,8ba84 <__udivdi3+0x318>
   8b7bc:	00803fc4 	movi	r2,255
   8b7c0:	1185803a 	cmpltu	r2,r2,r6
   8b7c4:	100490fa 	slli	r2,r2,3
   8b7c8:	3086d83a 	srl	r3,r6,r2
   8b7cc:	01000274 	movhi	r4,9
   8b7d0:	2105b704 	addi	r4,r4,5852
   8b7d4:	20c7883a 	add	r3,r4,r3
   8b7d8:	18c00003 	ldbu	r3,0(r3)
   8b7dc:	1885883a 	add	r2,r3,r2
   8b7e0:	00c00804 	movi	r3,32
   8b7e4:	1887c83a 	sub	r3,r3,r2
   8b7e8:	18000526 	beq	r3,zero,8b800 <__udivdi3+0x94>
   8b7ec:	80e0983a 	sll	r16,r16,r3
   8b7f0:	9884d83a 	srl	r2,r19,r2
   8b7f4:	30e2983a 	sll	r17,r6,r3
   8b7f8:	98e4983a 	sll	r18,r19,r3
   8b7fc:	142cb03a 	or	r22,r2,r16
   8b800:	882ad43a 	srli	r21,r17,16
   8b804:	b009883a 	mov	r4,r22
   8b808:	8d3fffcc 	andi	r20,r17,65535
   8b80c:	a80b883a 	mov	r5,r21
   8b810:	0081adc0 	call	81adc <__umodsi3>
   8b814:	b009883a 	mov	r4,r22
   8b818:	a80b883a 	mov	r5,r21
   8b81c:	1027883a 	mov	r19,r2
   8b820:	0081a780 	call	81a78 <__udivsi3>
   8b824:	100b883a 	mov	r5,r2
   8b828:	a009883a 	mov	r4,r20
   8b82c:	102d883a 	mov	r22,r2
   8b830:	0081b340 	call	81b34 <__mulsi3>
   8b834:	9826943a 	slli	r19,r19,16
   8b838:	9006d43a 	srli	r3,r18,16
   8b83c:	1cc6b03a 	or	r3,r3,r19
   8b840:	1880052e 	bgeu	r3,r2,8b858 <__udivdi3+0xec>
   8b844:	1c47883a 	add	r3,r3,r17
   8b848:	b13fffc4 	addi	r4,r22,-1
   8b84c:	1c400136 	bltu	r3,r17,8b854 <__udivdi3+0xe8>
   8b850:	18814236 	bltu	r3,r2,8bd5c <__udivdi3+0x5f0>
   8b854:	202d883a 	mov	r22,r4
   8b858:	18a1c83a 	sub	r16,r3,r2
   8b85c:	8009883a 	mov	r4,r16
   8b860:	a80b883a 	mov	r5,r21
   8b864:	0081adc0 	call	81adc <__umodsi3>
   8b868:	1027883a 	mov	r19,r2
   8b86c:	8009883a 	mov	r4,r16
   8b870:	a80b883a 	mov	r5,r21
   8b874:	9826943a 	slli	r19,r19,16
   8b878:	0081a780 	call	81a78 <__udivsi3>
   8b87c:	100b883a 	mov	r5,r2
   8b880:	a009883a 	mov	r4,r20
   8b884:	94bfffcc 	andi	r18,r18,65535
   8b888:	1021883a 	mov	r16,r2
   8b88c:	94e4b03a 	or	r18,r18,r19
   8b890:	0081b340 	call	81b34 <__mulsi3>
   8b894:	9080052e 	bgeu	r18,r2,8b8ac <__udivdi3+0x140>
   8b898:	8ca5883a 	add	r18,r17,r18
   8b89c:	80ffffc4 	addi	r3,r16,-1
   8b8a0:	94410c36 	bltu	r18,r17,8bcd4 <__udivdi3+0x568>
   8b8a4:	90810b2e 	bgeu	r18,r2,8bcd4 <__udivdi3+0x568>
   8b8a8:	843fff84 	addi	r16,r16,-2
   8b8ac:	b004943a 	slli	r2,r22,16
   8b8b0:	0007883a 	mov	r3,zero
   8b8b4:	1404b03a 	or	r2,r2,r16
   8b8b8:	00005e06 	br	8ba34 <__udivdi3+0x2c8>
   8b8bc:	29c05b36 	bltu	r5,r7,8ba2c <__udivdi3+0x2c0>
   8b8c0:	00bfffd4 	movui	r2,65535
   8b8c4:	11c0672e 	bgeu	r2,r7,8ba64 <__udivdi3+0x2f8>
   8b8c8:	00804034 	movhi	r2,256
   8b8cc:	10bfffc4 	addi	r2,r2,-1
   8b8d0:	11c10a36 	bltu	r2,r7,8bcfc <__udivdi3+0x590>
   8b8d4:	00800404 	movi	r2,16
   8b8d8:	3886d83a 	srl	r3,r7,r2
   8b8dc:	01000274 	movhi	r4,9
   8b8e0:	2105b704 	addi	r4,r4,5852
   8b8e4:	20c7883a 	add	r3,r4,r3
   8b8e8:	18c00003 	ldbu	r3,0(r3)
   8b8ec:	05c00804 	movi	r23,32
   8b8f0:	1885883a 	add	r2,r3,r2
   8b8f4:	b8afc83a 	sub	r23,r23,r2
   8b8f8:	b800671e 	bne	r23,zero,8ba98 <__udivdi3+0x32c>
   8b8fc:	3c010536 	bltu	r7,r16,8bd14 <__udivdi3+0x5a8>
   8b900:	9985403a 	cmpgeu	r2,r19,r6
   8b904:	0007883a 	mov	r3,zero
   8b908:	00004a06 	br	8ba34 <__udivdi3+0x2c8>
   8b90c:	3000041e 	bne	r6,zero,8b920 <__udivdi3+0x1b4>
   8b910:	000b883a 	mov	r5,zero
   8b914:	01000044 	movi	r4,1
   8b918:	0081a780 	call	81a78 <__udivsi3>
   8b91c:	1023883a 	mov	r17,r2
   8b920:	00bfffd4 	movui	r2,65535
   8b924:	1440532e 	bgeu	r2,r17,8ba74 <__udivdi3+0x308>
   8b928:	00804034 	movhi	r2,256
   8b92c:	10bfffc4 	addi	r2,r2,-1
   8b930:	1440f436 	bltu	r2,r17,8bd04 <__udivdi3+0x598>
   8b934:	00800404 	movi	r2,16
   8b938:	8886d83a 	srl	r3,r17,r2
   8b93c:	01000274 	movhi	r4,9
   8b940:	2105b704 	addi	r4,r4,5852
   8b944:	20c7883a 	add	r3,r4,r3
   8b948:	18c00003 	ldbu	r3,0(r3)
   8b94c:	1885883a 	add	r2,r3,r2
   8b950:	00c00804 	movi	r3,32
   8b954:	1887c83a 	sub	r3,r3,r2
   8b958:	1800a51e 	bne	r3,zero,8bbf0 <__udivdi3+0x484>
   8b95c:	882ad43a 	srli	r21,r17,16
   8b960:	8461c83a 	sub	r16,r16,r17
   8b964:	8d3fffcc 	andi	r20,r17,65535
   8b968:	00c00044 	movi	r3,1
   8b96c:	a80b883a 	mov	r5,r21
   8b970:	8009883a 	mov	r4,r16
   8b974:	d8c00115 	stw	r3,4(sp)
   8b978:	0081adc0 	call	81adc <__umodsi3>
   8b97c:	a80b883a 	mov	r5,r21
   8b980:	8009883a 	mov	r4,r16
   8b984:	1027883a 	mov	r19,r2
   8b988:	0081a780 	call	81a78 <__udivsi3>
   8b98c:	a00b883a 	mov	r5,r20
   8b990:	1009883a 	mov	r4,r2
   8b994:	102d883a 	mov	r22,r2
   8b998:	0081b340 	call	81b34 <__mulsi3>
   8b99c:	9826943a 	slli	r19,r19,16
   8b9a0:	900ed43a 	srli	r7,r18,16
   8b9a4:	d8c00117 	ldw	r3,4(sp)
   8b9a8:	3cceb03a 	or	r7,r7,r19
   8b9ac:	3880052e 	bgeu	r7,r2,8b9c4 <__udivdi3+0x258>
   8b9b0:	3c4f883a 	add	r7,r7,r17
   8b9b4:	b13fffc4 	addi	r4,r22,-1
   8b9b8:	3c400136 	bltu	r7,r17,8b9c0 <__udivdi3+0x254>
   8b9bc:	3880e436 	bltu	r7,r2,8bd50 <__udivdi3+0x5e4>
   8b9c0:	202d883a 	mov	r22,r4
   8b9c4:	38a1c83a 	sub	r16,r7,r2
   8b9c8:	8009883a 	mov	r4,r16
   8b9cc:	a80b883a 	mov	r5,r21
   8b9d0:	d8c00115 	stw	r3,4(sp)
   8b9d4:	0081adc0 	call	81adc <__umodsi3>
   8b9d8:	1027883a 	mov	r19,r2
   8b9dc:	8009883a 	mov	r4,r16
   8b9e0:	a80b883a 	mov	r5,r21
   8b9e4:	9826943a 	slli	r19,r19,16
   8b9e8:	0081a780 	call	81a78 <__udivsi3>
   8b9ec:	a00b883a 	mov	r5,r20
   8b9f0:	1009883a 	mov	r4,r2
   8b9f4:	94bfffcc 	andi	r18,r18,65535
   8b9f8:	1021883a 	mov	r16,r2
   8b9fc:	94e4b03a 	or	r18,r18,r19
   8ba00:	0081b340 	call	81b34 <__mulsi3>
   8ba04:	d8c00117 	ldw	r3,4(sp)
   8ba08:	9080052e 	bgeu	r18,r2,8ba20 <__udivdi3+0x2b4>
   8ba0c:	8ca5883a 	add	r18,r17,r18
   8ba10:	813fffc4 	addi	r4,r16,-1
   8ba14:	9440ad36 	bltu	r18,r17,8bccc <__udivdi3+0x560>
   8ba18:	9080ac2e 	bgeu	r18,r2,8bccc <__udivdi3+0x560>
   8ba1c:	843fff84 	addi	r16,r16,-2
   8ba20:	b004943a 	slli	r2,r22,16
   8ba24:	1404b03a 	or	r2,r2,r16
   8ba28:	00000206 	br	8ba34 <__udivdi3+0x2c8>
   8ba2c:	0007883a 	mov	r3,zero
   8ba30:	0005883a 	mov	r2,zero
   8ba34:	dfc00b17 	ldw	ra,44(sp)
   8ba38:	df000a17 	ldw	fp,40(sp)
   8ba3c:	ddc00917 	ldw	r23,36(sp)
   8ba40:	dd800817 	ldw	r22,32(sp)
   8ba44:	dd400717 	ldw	r21,28(sp)
   8ba48:	dd000617 	ldw	r20,24(sp)
   8ba4c:	dcc00517 	ldw	r19,20(sp)
   8ba50:	dc800417 	ldw	r18,16(sp)
   8ba54:	dc400317 	ldw	r17,12(sp)
   8ba58:	dc000217 	ldw	r16,8(sp)
   8ba5c:	dec00c04 	addi	sp,sp,48
   8ba60:	f800283a 	ret
   8ba64:	00803fc4 	movi	r2,255
   8ba68:	11c5803a 	cmpltu	r2,r2,r7
   8ba6c:	100490fa 	slli	r2,r2,3
   8ba70:	003f9906 	br	8b8d8 <__alt_data_end+0xfffab8d8>
   8ba74:	00803fc4 	movi	r2,255
   8ba78:	1445803a 	cmpltu	r2,r2,r17
   8ba7c:	100490fa 	slli	r2,r2,3
   8ba80:	003fad06 	br	8b938 <__alt_data_end+0xfffab938>
   8ba84:	00804034 	movhi	r2,256
   8ba88:	10bfffc4 	addi	r2,r2,-1
   8ba8c:	11809f36 	bltu	r2,r6,8bd0c <__udivdi3+0x5a0>
   8ba90:	00800404 	movi	r2,16
   8ba94:	003f4c06 	br	8b7c8 <__alt_data_end+0xfffab7c8>
   8ba98:	3dce983a 	sll	r7,r7,r23
   8ba9c:	30b8d83a 	srl	fp,r6,r2
   8baa0:	80a2d83a 	srl	r17,r16,r2
   8baa4:	35cc983a 	sll	r6,r6,r23
   8baa8:	3f38b03a 	or	fp,r7,fp
   8baac:	e024d43a 	srli	r18,fp,16
   8bab0:	9884d83a 	srl	r2,r19,r2
   8bab4:	85e0983a 	sll	r16,r16,r23
   8bab8:	8809883a 	mov	r4,r17
   8babc:	900b883a 	mov	r5,r18
   8bac0:	d9800015 	stw	r6,0(sp)
   8bac4:	1420b03a 	or	r16,r2,r16
   8bac8:	0081adc0 	call	81adc <__umodsi3>
   8bacc:	900b883a 	mov	r5,r18
   8bad0:	8809883a 	mov	r4,r17
   8bad4:	1029883a 	mov	r20,r2
   8bad8:	e5bfffcc 	andi	r22,fp,65535
   8badc:	0081a780 	call	81a78 <__udivsi3>
   8bae0:	100b883a 	mov	r5,r2
   8bae4:	b009883a 	mov	r4,r22
   8bae8:	102b883a 	mov	r21,r2
   8baec:	0081b340 	call	81b34 <__mulsi3>
   8baf0:	a028943a 	slli	r20,r20,16
   8baf4:	8006d43a 	srli	r3,r16,16
   8baf8:	1d06b03a 	or	r3,r3,r20
   8bafc:	1880042e 	bgeu	r3,r2,8bb10 <__udivdi3+0x3a4>
   8bb00:	1f07883a 	add	r3,r3,fp
   8bb04:	a93fffc4 	addi	r4,r21,-1
   8bb08:	1f00892e 	bgeu	r3,fp,8bd30 <__udivdi3+0x5c4>
   8bb0c:	202b883a 	mov	r21,r4
   8bb10:	18a3c83a 	sub	r17,r3,r2
   8bb14:	8809883a 	mov	r4,r17
   8bb18:	900b883a 	mov	r5,r18
   8bb1c:	0081adc0 	call	81adc <__umodsi3>
   8bb20:	1029883a 	mov	r20,r2
   8bb24:	8809883a 	mov	r4,r17
   8bb28:	900b883a 	mov	r5,r18
   8bb2c:	a028943a 	slli	r20,r20,16
   8bb30:	0081a780 	call	81a78 <__udivsi3>
   8bb34:	100b883a 	mov	r5,r2
   8bb38:	b009883a 	mov	r4,r22
   8bb3c:	843fffcc 	andi	r16,r16,65535
   8bb40:	1023883a 	mov	r17,r2
   8bb44:	8520b03a 	or	r16,r16,r20
   8bb48:	0081b340 	call	81b34 <__mulsi3>
   8bb4c:	8080042e 	bgeu	r16,r2,8bb60 <__udivdi3+0x3f4>
   8bb50:	8721883a 	add	r16,r16,fp
   8bb54:	88ffffc4 	addi	r3,r17,-1
   8bb58:	8700712e 	bgeu	r16,fp,8bd20 <__udivdi3+0x5b4>
   8bb5c:	1823883a 	mov	r17,r3
   8bb60:	a80e943a 	slli	r7,r21,16
   8bb64:	d8c00017 	ldw	r3,0(sp)
   8bb68:	80a1c83a 	sub	r16,r16,r2
   8bb6c:	3c64b03a 	or	r18,r7,r17
   8bb70:	1d3fffcc 	andi	r20,r3,65535
   8bb74:	9022d43a 	srli	r17,r18,16
   8bb78:	95bfffcc 	andi	r22,r18,65535
   8bb7c:	a00b883a 	mov	r5,r20
   8bb80:	b009883a 	mov	r4,r22
   8bb84:	182ad43a 	srli	r21,r3,16
   8bb88:	0081b340 	call	81b34 <__mulsi3>
   8bb8c:	a00b883a 	mov	r5,r20
   8bb90:	8809883a 	mov	r4,r17
   8bb94:	1039883a 	mov	fp,r2
   8bb98:	0081b340 	call	81b34 <__mulsi3>
   8bb9c:	8809883a 	mov	r4,r17
   8bba0:	a80b883a 	mov	r5,r21
   8bba4:	1029883a 	mov	r20,r2
   8bba8:	0081b340 	call	81b34 <__mulsi3>
   8bbac:	a80b883a 	mov	r5,r21
   8bbb0:	b009883a 	mov	r4,r22
   8bbb4:	1023883a 	mov	r17,r2
   8bbb8:	0081b340 	call	81b34 <__mulsi3>
   8bbbc:	e006d43a 	srli	r3,fp,16
   8bbc0:	1505883a 	add	r2,r2,r20
   8bbc4:	1887883a 	add	r3,r3,r2
   8bbc8:	1d00022e 	bgeu	r3,r20,8bbd4 <__udivdi3+0x468>
   8bbcc:	00800074 	movhi	r2,1
   8bbd0:	88a3883a 	add	r17,r17,r2
   8bbd4:	1804d43a 	srli	r2,r3,16
   8bbd8:	1463883a 	add	r17,r2,r17
   8bbdc:	84404436 	bltu	r16,r17,8bcf0 <__udivdi3+0x584>
   8bbe0:	84403e26 	beq	r16,r17,8bcdc <__udivdi3+0x570>
   8bbe4:	9005883a 	mov	r2,r18
   8bbe8:	0007883a 	mov	r3,zero
   8bbec:	003f9106 	br	8ba34 <__alt_data_end+0xfffaba34>
   8bbf0:	88e2983a 	sll	r17,r17,r3
   8bbf4:	80aed83a 	srl	r23,r16,r2
   8bbf8:	80e0983a 	sll	r16,r16,r3
   8bbfc:	882ad43a 	srli	r21,r17,16
   8bc00:	9884d83a 	srl	r2,r19,r2
   8bc04:	b809883a 	mov	r4,r23
   8bc08:	a80b883a 	mov	r5,r21
   8bc0c:	98e4983a 	sll	r18,r19,r3
   8bc10:	142cb03a 	or	r22,r2,r16
   8bc14:	0081adc0 	call	81adc <__umodsi3>
   8bc18:	b809883a 	mov	r4,r23
   8bc1c:	a80b883a 	mov	r5,r21
   8bc20:	1027883a 	mov	r19,r2
   8bc24:	8d3fffcc 	andi	r20,r17,65535
   8bc28:	0081a780 	call	81a78 <__udivsi3>
   8bc2c:	a009883a 	mov	r4,r20
   8bc30:	100b883a 	mov	r5,r2
   8bc34:	102f883a 	mov	r23,r2
   8bc38:	0081b340 	call	81b34 <__mulsi3>
   8bc3c:	9826943a 	slli	r19,r19,16
   8bc40:	b008d43a 	srli	r4,r22,16
   8bc44:	24c8b03a 	or	r4,r4,r19
   8bc48:	2080062e 	bgeu	r4,r2,8bc64 <__udivdi3+0x4f8>
   8bc4c:	2449883a 	add	r4,r4,r17
   8bc50:	b8ffffc4 	addi	r3,r23,-1
   8bc54:	24403c36 	bltu	r4,r17,8bd48 <__udivdi3+0x5dc>
   8bc58:	20803b2e 	bgeu	r4,r2,8bd48 <__udivdi3+0x5dc>
   8bc5c:	bdffff84 	addi	r23,r23,-2
   8bc60:	2449883a 	add	r4,r4,r17
   8bc64:	20a1c83a 	sub	r16,r4,r2
   8bc68:	a80b883a 	mov	r5,r21
   8bc6c:	8009883a 	mov	r4,r16
   8bc70:	0081adc0 	call	81adc <__umodsi3>
   8bc74:	a80b883a 	mov	r5,r21
   8bc78:	8009883a 	mov	r4,r16
   8bc7c:	1027883a 	mov	r19,r2
   8bc80:	0081a780 	call	81a78 <__udivsi3>
   8bc84:	a009883a 	mov	r4,r20
   8bc88:	100b883a 	mov	r5,r2
   8bc8c:	9826943a 	slli	r19,r19,16
   8bc90:	1039883a 	mov	fp,r2
   8bc94:	0081b340 	call	81b34 <__mulsi3>
   8bc98:	b13fffcc 	andi	r4,r22,65535
   8bc9c:	24c8b03a 	or	r4,r4,r19
   8bca0:	2080062e 	bgeu	r4,r2,8bcbc <__udivdi3+0x550>
   8bca4:	2449883a 	add	r4,r4,r17
   8bca8:	e0ffffc4 	addi	r3,fp,-1
   8bcac:	24402436 	bltu	r4,r17,8bd40 <__udivdi3+0x5d4>
   8bcb0:	2080232e 	bgeu	r4,r2,8bd40 <__udivdi3+0x5d4>
   8bcb4:	e73fff84 	addi	fp,fp,-2
   8bcb8:	2449883a 	add	r4,r4,r17
   8bcbc:	b82e943a 	slli	r23,r23,16
   8bcc0:	20a1c83a 	sub	r16,r4,r2
   8bcc4:	bf06b03a 	or	r3,r23,fp
   8bcc8:	003f2806 	br	8b96c <__alt_data_end+0xfffab96c>
   8bccc:	2021883a 	mov	r16,r4
   8bcd0:	003f5306 	br	8ba20 <__alt_data_end+0xfffaba20>
   8bcd4:	1821883a 	mov	r16,r3
   8bcd8:	003ef406 	br	8b8ac <__alt_data_end+0xfffab8ac>
   8bcdc:	1806943a 	slli	r3,r3,16
   8bce0:	9de6983a 	sll	r19,r19,r23
   8bce4:	e73fffcc 	andi	fp,fp,65535
   8bce8:	1f07883a 	add	r3,r3,fp
   8bcec:	98ffbd2e 	bgeu	r19,r3,8bbe4 <__alt_data_end+0xfffabbe4>
   8bcf0:	90bfffc4 	addi	r2,r18,-1
   8bcf4:	0007883a 	mov	r3,zero
   8bcf8:	003f4e06 	br	8ba34 <__alt_data_end+0xfffaba34>
   8bcfc:	00800604 	movi	r2,24
   8bd00:	003ef506 	br	8b8d8 <__alt_data_end+0xfffab8d8>
   8bd04:	00800604 	movi	r2,24
   8bd08:	003f0b06 	br	8b938 <__alt_data_end+0xfffab938>
   8bd0c:	00800604 	movi	r2,24
   8bd10:	003ead06 	br	8b7c8 <__alt_data_end+0xfffab7c8>
   8bd14:	0007883a 	mov	r3,zero
   8bd18:	00800044 	movi	r2,1
   8bd1c:	003f4506 	br	8ba34 <__alt_data_end+0xfffaba34>
   8bd20:	80bf8e2e 	bgeu	r16,r2,8bb5c <__alt_data_end+0xfffabb5c>
   8bd24:	8c7fff84 	addi	r17,r17,-2
   8bd28:	8721883a 	add	r16,r16,fp
   8bd2c:	003f8c06 	br	8bb60 <__alt_data_end+0xfffabb60>
   8bd30:	18bf762e 	bgeu	r3,r2,8bb0c <__alt_data_end+0xfffabb0c>
   8bd34:	ad7fff84 	addi	r21,r21,-2
   8bd38:	1f07883a 	add	r3,r3,fp
   8bd3c:	003f7406 	br	8bb10 <__alt_data_end+0xfffabb10>
   8bd40:	1839883a 	mov	fp,r3
   8bd44:	003fdd06 	br	8bcbc <__alt_data_end+0xfffabcbc>
   8bd48:	182f883a 	mov	r23,r3
   8bd4c:	003fc506 	br	8bc64 <__alt_data_end+0xfffabc64>
   8bd50:	b5bfff84 	addi	r22,r22,-2
   8bd54:	3c4f883a 	add	r7,r7,r17
   8bd58:	003f1a06 	br	8b9c4 <__alt_data_end+0xfffab9c4>
   8bd5c:	b5bfff84 	addi	r22,r22,-2
   8bd60:	1c47883a 	add	r3,r3,r17
   8bd64:	003ebc06 	br	8b858 <__alt_data_end+0xfffab858>

0008bd68 <__umoddi3>:
   8bd68:	defff304 	addi	sp,sp,-52
   8bd6c:	df000b15 	stw	fp,44(sp)
   8bd70:	dc400415 	stw	r17,16(sp)
   8bd74:	dc000315 	stw	r16,12(sp)
   8bd78:	dfc00c15 	stw	ra,48(sp)
   8bd7c:	ddc00a15 	stw	r23,40(sp)
   8bd80:	dd800915 	stw	r22,36(sp)
   8bd84:	dd400815 	stw	r21,32(sp)
   8bd88:	dd000715 	stw	r20,28(sp)
   8bd8c:	dcc00615 	stw	r19,24(sp)
   8bd90:	dc800515 	stw	r18,20(sp)
   8bd94:	2021883a 	mov	r16,r4
   8bd98:	2823883a 	mov	r17,r5
   8bd9c:	2839883a 	mov	fp,r5
   8bda0:	3800401e 	bne	r7,zero,8bea4 <__umoddi3+0x13c>
   8bda4:	3027883a 	mov	r19,r6
   8bda8:	2029883a 	mov	r20,r4
   8bdac:	2980552e 	bgeu	r5,r6,8bf04 <__umoddi3+0x19c>
   8bdb0:	00bfffd4 	movui	r2,65535
   8bdb4:	1180a236 	bltu	r2,r6,8c040 <__umoddi3+0x2d8>
   8bdb8:	01003fc4 	movi	r4,255
   8bdbc:	2189803a 	cmpltu	r4,r4,r6
   8bdc0:	200890fa 	slli	r4,r4,3
   8bdc4:	3104d83a 	srl	r2,r6,r4
   8bdc8:	00c00274 	movhi	r3,9
   8bdcc:	18c5b704 	addi	r3,r3,5852
   8bdd0:	1885883a 	add	r2,r3,r2
   8bdd4:	10c00003 	ldbu	r3,0(r2)
   8bdd8:	00800804 	movi	r2,32
   8bddc:	1909883a 	add	r4,r3,r4
   8bde0:	1125c83a 	sub	r18,r2,r4
   8bde4:	90000526 	beq	r18,zero,8bdfc <__umoddi3+0x94>
   8bde8:	8ca2983a 	sll	r17,r17,r18
   8bdec:	8108d83a 	srl	r4,r16,r4
   8bdf0:	34a6983a 	sll	r19,r6,r18
   8bdf4:	84a8983a 	sll	r20,r16,r18
   8bdf8:	2478b03a 	or	fp,r4,r17
   8bdfc:	982cd43a 	srli	r22,r19,16
   8be00:	e009883a 	mov	r4,fp
   8be04:	9dffffcc 	andi	r23,r19,65535
   8be08:	b00b883a 	mov	r5,r22
   8be0c:	0081adc0 	call	81adc <__umodsi3>
   8be10:	b00b883a 	mov	r5,r22
   8be14:	e009883a 	mov	r4,fp
   8be18:	102b883a 	mov	r21,r2
   8be1c:	0081a780 	call	81a78 <__udivsi3>
   8be20:	100b883a 	mov	r5,r2
   8be24:	b809883a 	mov	r4,r23
   8be28:	0081b340 	call	81b34 <__mulsi3>
   8be2c:	a82a943a 	slli	r21,r21,16
   8be30:	a006d43a 	srli	r3,r20,16
   8be34:	1d46b03a 	or	r3,r3,r21
   8be38:	1880032e 	bgeu	r3,r2,8be48 <__umoddi3+0xe0>
   8be3c:	1cc7883a 	add	r3,r3,r19
   8be40:	1cc00136 	bltu	r3,r19,8be48 <__umoddi3+0xe0>
   8be44:	18813136 	bltu	r3,r2,8c30c <__umoddi3+0x5a4>
   8be48:	18a1c83a 	sub	r16,r3,r2
   8be4c:	b00b883a 	mov	r5,r22
   8be50:	8009883a 	mov	r4,r16
   8be54:	0081adc0 	call	81adc <__umodsi3>
   8be58:	b00b883a 	mov	r5,r22
   8be5c:	8009883a 	mov	r4,r16
   8be60:	1023883a 	mov	r17,r2
   8be64:	0081a780 	call	81a78 <__udivsi3>
   8be68:	100b883a 	mov	r5,r2
   8be6c:	b809883a 	mov	r4,r23
   8be70:	8822943a 	slli	r17,r17,16
   8be74:	0081b340 	call	81b34 <__mulsi3>
   8be78:	a0ffffcc 	andi	r3,r20,65535
   8be7c:	1c46b03a 	or	r3,r3,r17
   8be80:	1880042e 	bgeu	r3,r2,8be94 <__umoddi3+0x12c>
   8be84:	1cc7883a 	add	r3,r3,r19
   8be88:	1cc00236 	bltu	r3,r19,8be94 <__umoddi3+0x12c>
   8be8c:	1880012e 	bgeu	r3,r2,8be94 <__umoddi3+0x12c>
   8be90:	1cc7883a 	add	r3,r3,r19
   8be94:	1885c83a 	sub	r2,r3,r2
   8be98:	1484d83a 	srl	r2,r2,r18
   8be9c:	0007883a 	mov	r3,zero
   8bea0:	00005306 	br	8bff0 <__umoddi3+0x288>
   8bea4:	29c05036 	bltu	r5,r7,8bfe8 <__umoddi3+0x280>
   8bea8:	00bfffd4 	movui	r2,65535
   8beac:	11c05c2e 	bgeu	r2,r7,8c020 <__umoddi3+0x2b8>
   8beb0:	00804034 	movhi	r2,256
   8beb4:	10bfffc4 	addi	r2,r2,-1
   8beb8:	11c10636 	bltu	r2,r7,8c2d4 <__umoddi3+0x56c>
   8bebc:	01000404 	movi	r4,16
   8bec0:	3904d83a 	srl	r2,r7,r4
   8bec4:	00c00274 	movhi	r3,9
   8bec8:	18c5b704 	addi	r3,r3,5852
   8becc:	1885883a 	add	r2,r3,r2
   8bed0:	14c00003 	ldbu	r19,0(r2)
   8bed4:	00c00804 	movi	r3,32
   8bed8:	9927883a 	add	r19,r19,r4
   8bedc:	1ce9c83a 	sub	r20,r3,r19
   8bee0:	a0005c1e 	bne	r20,zero,8c054 <__umoddi3+0x2ec>
   8bee4:	3c400136 	bltu	r7,r17,8beec <__umoddi3+0x184>
   8bee8:	81810a36 	bltu	r16,r6,8c314 <__umoddi3+0x5ac>
   8beec:	8185c83a 	sub	r2,r16,r6
   8bef0:	89e3c83a 	sub	r17,r17,r7
   8bef4:	8089803a 	cmpltu	r4,r16,r2
   8bef8:	8939c83a 	sub	fp,r17,r4
   8befc:	e007883a 	mov	r3,fp
   8bf00:	00003b06 	br	8bff0 <__umoddi3+0x288>
   8bf04:	3000041e 	bne	r6,zero,8bf18 <__umoddi3+0x1b0>
   8bf08:	000b883a 	mov	r5,zero
   8bf0c:	01000044 	movi	r4,1
   8bf10:	0081a780 	call	81a78 <__udivsi3>
   8bf14:	1027883a 	mov	r19,r2
   8bf18:	00bfffd4 	movui	r2,65535
   8bf1c:	14c0442e 	bgeu	r2,r19,8c030 <__umoddi3+0x2c8>
   8bf20:	00804034 	movhi	r2,256
   8bf24:	10bfffc4 	addi	r2,r2,-1
   8bf28:	14c0ec36 	bltu	r2,r19,8c2dc <__umoddi3+0x574>
   8bf2c:	00800404 	movi	r2,16
   8bf30:	9886d83a 	srl	r3,r19,r2
   8bf34:	01000274 	movhi	r4,9
   8bf38:	2105b704 	addi	r4,r4,5852
   8bf3c:	20c7883a 	add	r3,r4,r3
   8bf40:	18c00003 	ldbu	r3,0(r3)
   8bf44:	1887883a 	add	r3,r3,r2
   8bf48:	00800804 	movi	r2,32
   8bf4c:	10e5c83a 	sub	r18,r2,r3
   8bf50:	9000ab1e 	bne	r18,zero,8c200 <__umoddi3+0x498>
   8bf54:	982cd43a 	srli	r22,r19,16
   8bf58:	8ce3c83a 	sub	r17,r17,r19
   8bf5c:	9dffffcc 	andi	r23,r19,65535
   8bf60:	b00b883a 	mov	r5,r22
   8bf64:	8809883a 	mov	r4,r17
   8bf68:	0081adc0 	call	81adc <__umodsi3>
   8bf6c:	b00b883a 	mov	r5,r22
   8bf70:	8809883a 	mov	r4,r17
   8bf74:	102b883a 	mov	r21,r2
   8bf78:	0081a780 	call	81a78 <__udivsi3>
   8bf7c:	b80b883a 	mov	r5,r23
   8bf80:	1009883a 	mov	r4,r2
   8bf84:	0081b340 	call	81b34 <__mulsi3>
   8bf88:	a82a943a 	slli	r21,r21,16
   8bf8c:	a006d43a 	srli	r3,r20,16
   8bf90:	1d46b03a 	or	r3,r3,r21
   8bf94:	1880042e 	bgeu	r3,r2,8bfa8 <__umoddi3+0x240>
   8bf98:	1cc7883a 	add	r3,r3,r19
   8bf9c:	1cc00236 	bltu	r3,r19,8bfa8 <__umoddi3+0x240>
   8bfa0:	1880012e 	bgeu	r3,r2,8bfa8 <__umoddi3+0x240>
   8bfa4:	1cc7883a 	add	r3,r3,r19
   8bfa8:	18a1c83a 	sub	r16,r3,r2
   8bfac:	b00b883a 	mov	r5,r22
   8bfb0:	8009883a 	mov	r4,r16
   8bfb4:	0081adc0 	call	81adc <__umodsi3>
   8bfb8:	1023883a 	mov	r17,r2
   8bfbc:	b00b883a 	mov	r5,r22
   8bfc0:	8009883a 	mov	r4,r16
   8bfc4:	0081a780 	call	81a78 <__udivsi3>
   8bfc8:	8822943a 	slli	r17,r17,16
   8bfcc:	b80b883a 	mov	r5,r23
   8bfd0:	1009883a 	mov	r4,r2
   8bfd4:	0081b340 	call	81b34 <__mulsi3>
   8bfd8:	a53fffcc 	andi	r20,r20,65535
   8bfdc:	a446b03a 	or	r3,r20,r17
   8bfe0:	18bfac2e 	bgeu	r3,r2,8be94 <__alt_data_end+0xfffabe94>
   8bfe4:	003fa706 	br	8be84 <__alt_data_end+0xfffabe84>
   8bfe8:	2005883a 	mov	r2,r4
   8bfec:	2807883a 	mov	r3,r5
   8bff0:	dfc00c17 	ldw	ra,48(sp)
   8bff4:	df000b17 	ldw	fp,44(sp)
   8bff8:	ddc00a17 	ldw	r23,40(sp)
   8bffc:	dd800917 	ldw	r22,36(sp)
   8c000:	dd400817 	ldw	r21,32(sp)
   8c004:	dd000717 	ldw	r20,28(sp)
   8c008:	dcc00617 	ldw	r19,24(sp)
   8c00c:	dc800517 	ldw	r18,20(sp)
   8c010:	dc400417 	ldw	r17,16(sp)
   8c014:	dc000317 	ldw	r16,12(sp)
   8c018:	dec00d04 	addi	sp,sp,52
   8c01c:	f800283a 	ret
   8c020:	04c03fc4 	movi	r19,255
   8c024:	99c9803a 	cmpltu	r4,r19,r7
   8c028:	200890fa 	slli	r4,r4,3
   8c02c:	003fa406 	br	8bec0 <__alt_data_end+0xfffabec0>
   8c030:	00803fc4 	movi	r2,255
   8c034:	14c5803a 	cmpltu	r2,r2,r19
   8c038:	100490fa 	slli	r2,r2,3
   8c03c:	003fbc06 	br	8bf30 <__alt_data_end+0xfffabf30>
   8c040:	00804034 	movhi	r2,256
   8c044:	10bfffc4 	addi	r2,r2,-1
   8c048:	1180a636 	bltu	r2,r6,8c2e4 <__umoddi3+0x57c>
   8c04c:	01000404 	movi	r4,16
   8c050:	003f5c06 	br	8bdc4 <__alt_data_end+0xfffabdc4>
   8c054:	3d0e983a 	sll	r7,r7,r20
   8c058:	34ead83a 	srl	r21,r6,r19
   8c05c:	8cc6d83a 	srl	r3,r17,r19
   8c060:	8d10983a 	sll	r8,r17,r20
   8c064:	3d6ab03a 	or	r21,r7,r21
   8c068:	a82cd43a 	srli	r22,r21,16
   8c06c:	84e2d83a 	srl	r17,r16,r19
   8c070:	1809883a 	mov	r4,r3
   8c074:	b00b883a 	mov	r5,r22
   8c078:	8a22b03a 	or	r17,r17,r8
   8c07c:	3524983a 	sll	r18,r6,r20
   8c080:	dc400015 	stw	r17,0(sp)
   8c084:	d8c00115 	stw	r3,4(sp)
   8c088:	0081adc0 	call	81adc <__umodsi3>
   8c08c:	d8c00117 	ldw	r3,4(sp)
   8c090:	b00b883a 	mov	r5,r22
   8c094:	1039883a 	mov	fp,r2
   8c098:	1809883a 	mov	r4,r3
   8c09c:	0081a780 	call	81a78 <__udivsi3>
   8c0a0:	adffffcc 	andi	r23,r21,65535
   8c0a4:	100b883a 	mov	r5,r2
   8c0a8:	b809883a 	mov	r4,r23
   8c0ac:	1023883a 	mov	r17,r2
   8c0b0:	0081b340 	call	81b34 <__mulsi3>
   8c0b4:	d9400017 	ldw	r5,0(sp)
   8c0b8:	e008943a 	slli	r4,fp,16
   8c0bc:	8520983a 	sll	r16,r16,r20
   8c0c0:	2806d43a 	srli	r3,r5,16
   8c0c4:	1906b03a 	or	r3,r3,r4
   8c0c8:	1880042e 	bgeu	r3,r2,8c0dc <__umoddi3+0x374>
   8c0cc:	1d47883a 	add	r3,r3,r21
   8c0d0:	893fffc4 	addi	r4,r17,-1
   8c0d4:	1d40892e 	bgeu	r3,r21,8c2fc <__umoddi3+0x594>
   8c0d8:	2023883a 	mov	r17,r4
   8c0dc:	18b9c83a 	sub	fp,r3,r2
   8c0e0:	b00b883a 	mov	r5,r22
   8c0e4:	e009883a 	mov	r4,fp
   8c0e8:	0081adc0 	call	81adc <__umodsi3>
   8c0ec:	b00b883a 	mov	r5,r22
   8c0f0:	e009883a 	mov	r4,fp
   8c0f4:	d8800215 	stw	r2,8(sp)
   8c0f8:	0081a780 	call	81a78 <__udivsi3>
   8c0fc:	100b883a 	mov	r5,r2
   8c100:	b809883a 	mov	r4,r23
   8c104:	102d883a 	mov	r22,r2
   8c108:	0081b340 	call	81b34 <__mulsi3>
   8c10c:	d9800217 	ldw	r6,8(sp)
   8c110:	d8c00017 	ldw	r3,0(sp)
   8c114:	300c943a 	slli	r6,r6,16
   8c118:	1a3fffcc 	andi	r8,r3,65535
   8c11c:	4190b03a 	or	r8,r8,r6
   8c120:	4080042e 	bgeu	r8,r2,8c134 <__umoddi3+0x3cc>
   8c124:	4551883a 	add	r8,r8,r21
   8c128:	b0ffffc4 	addi	r3,r22,-1
   8c12c:	45406f2e 	bgeu	r8,r21,8c2ec <__umoddi3+0x584>
   8c130:	182d883a 	mov	r22,r3
   8c134:	880e943a 	slli	r7,r17,16
   8c138:	9006d43a 	srli	r3,r18,16
   8c13c:	91bfffcc 	andi	r6,r18,65535
   8c140:	3dacb03a 	or	r22,r7,r22
   8c144:	b02ed43a 	srli	r23,r22,16
   8c148:	b5bfffcc 	andi	r22,r22,65535
   8c14c:	300b883a 	mov	r5,r6
   8c150:	b009883a 	mov	r4,r22
   8c154:	40a3c83a 	sub	r17,r8,r2
   8c158:	d8c00115 	stw	r3,4(sp)
   8c15c:	d9800215 	stw	r6,8(sp)
   8c160:	0081b340 	call	81b34 <__mulsi3>
   8c164:	d9800217 	ldw	r6,8(sp)
   8c168:	b809883a 	mov	r4,r23
   8c16c:	1039883a 	mov	fp,r2
   8c170:	300b883a 	mov	r5,r6
   8c174:	0081b340 	call	81b34 <__mulsi3>
   8c178:	d8c00117 	ldw	r3,4(sp)
   8c17c:	b809883a 	mov	r4,r23
   8c180:	d8800215 	stw	r2,8(sp)
   8c184:	180b883a 	mov	r5,r3
   8c188:	0081b340 	call	81b34 <__mulsi3>
   8c18c:	d8c00117 	ldw	r3,4(sp)
   8c190:	b009883a 	mov	r4,r22
   8c194:	102f883a 	mov	r23,r2
   8c198:	180b883a 	mov	r5,r3
   8c19c:	0081b340 	call	81b34 <__mulsi3>
   8c1a0:	d9800217 	ldw	r6,8(sp)
   8c1a4:	e006d43a 	srli	r3,fp,16
   8c1a8:	1185883a 	add	r2,r2,r6
   8c1ac:	1885883a 	add	r2,r3,r2
   8c1b0:	1180022e 	bgeu	r2,r6,8c1bc <__umoddi3+0x454>
   8c1b4:	00c00074 	movhi	r3,1
   8c1b8:	b8ef883a 	add	r23,r23,r3
   8c1bc:	1006d43a 	srli	r3,r2,16
   8c1c0:	1004943a 	slli	r2,r2,16
   8c1c4:	e73fffcc 	andi	fp,fp,65535
   8c1c8:	1dc7883a 	add	r3,r3,r23
   8c1cc:	1739883a 	add	fp,r2,fp
   8c1d0:	88c03a36 	bltu	r17,r3,8c2bc <__umoddi3+0x554>
   8c1d4:	88c05126 	beq	r17,r3,8c31c <__umoddi3+0x5b4>
   8c1d8:	88c9c83a 	sub	r4,r17,r3
   8c1dc:	e00f883a 	mov	r7,fp
   8c1e0:	81cfc83a 	sub	r7,r16,r7
   8c1e4:	81c7803a 	cmpltu	r3,r16,r7
   8c1e8:	20c7c83a 	sub	r3,r4,r3
   8c1ec:	1cc4983a 	sll	r2,r3,r19
   8c1f0:	3d0ed83a 	srl	r7,r7,r20
   8c1f4:	1d06d83a 	srl	r3,r3,r20
   8c1f8:	11c4b03a 	or	r2,r2,r7
   8c1fc:	003f7c06 	br	8bff0 <__alt_data_end+0xfffabff0>
   8c200:	9ca6983a 	sll	r19,r19,r18
   8c204:	88f8d83a 	srl	fp,r17,r3
   8c208:	80c4d83a 	srl	r2,r16,r3
   8c20c:	982cd43a 	srli	r22,r19,16
   8c210:	8ca2983a 	sll	r17,r17,r18
   8c214:	e009883a 	mov	r4,fp
   8c218:	b00b883a 	mov	r5,r22
   8c21c:	146ab03a 	or	r21,r2,r17
   8c220:	0081adc0 	call	81adc <__umodsi3>
   8c224:	b00b883a 	mov	r5,r22
   8c228:	e009883a 	mov	r4,fp
   8c22c:	1029883a 	mov	r20,r2
   8c230:	9dffffcc 	andi	r23,r19,65535
   8c234:	0081a780 	call	81a78 <__udivsi3>
   8c238:	b809883a 	mov	r4,r23
   8c23c:	100b883a 	mov	r5,r2
   8c240:	0081b340 	call	81b34 <__mulsi3>
   8c244:	a008943a 	slli	r4,r20,16
   8c248:	a806d43a 	srli	r3,r21,16
   8c24c:	84a8983a 	sll	r20,r16,r18
   8c250:	1906b03a 	or	r3,r3,r4
   8c254:	1880042e 	bgeu	r3,r2,8c268 <__umoddi3+0x500>
   8c258:	1cc7883a 	add	r3,r3,r19
   8c25c:	1cc00236 	bltu	r3,r19,8c268 <__umoddi3+0x500>
   8c260:	1880012e 	bgeu	r3,r2,8c268 <__umoddi3+0x500>
   8c264:	1cc7883a 	add	r3,r3,r19
   8c268:	18a3c83a 	sub	r17,r3,r2
   8c26c:	b00b883a 	mov	r5,r22
   8c270:	8809883a 	mov	r4,r17
   8c274:	0081adc0 	call	81adc <__umodsi3>
   8c278:	b00b883a 	mov	r5,r22
   8c27c:	8809883a 	mov	r4,r17
   8c280:	1021883a 	mov	r16,r2
   8c284:	0081a780 	call	81a78 <__udivsi3>
   8c288:	100b883a 	mov	r5,r2
   8c28c:	b809883a 	mov	r4,r23
   8c290:	8020943a 	slli	r16,r16,16
   8c294:	0081b340 	call	81b34 <__mulsi3>
   8c298:	a8ffffcc 	andi	r3,r21,65535
   8c29c:	1c06b03a 	or	r3,r3,r16
   8c2a0:	1880042e 	bgeu	r3,r2,8c2b4 <__umoddi3+0x54c>
   8c2a4:	1cc7883a 	add	r3,r3,r19
   8c2a8:	1cc00236 	bltu	r3,r19,8c2b4 <__umoddi3+0x54c>
   8c2ac:	1880012e 	bgeu	r3,r2,8c2b4 <__umoddi3+0x54c>
   8c2b0:	1cc7883a 	add	r3,r3,r19
   8c2b4:	18a3c83a 	sub	r17,r3,r2
   8c2b8:	003f2906 	br	8bf60 <__alt_data_end+0xfffabf60>
   8c2bc:	e48fc83a 	sub	r7,fp,r18
   8c2c0:	1d49c83a 	sub	r4,r3,r21
   8c2c4:	e1f9803a 	cmpltu	fp,fp,r7
   8c2c8:	2739c83a 	sub	fp,r4,fp
   8c2cc:	8f09c83a 	sub	r4,r17,fp
   8c2d0:	003fc306 	br	8c1e0 <__alt_data_end+0xfffac1e0>
   8c2d4:	01000604 	movi	r4,24
   8c2d8:	003ef906 	br	8bec0 <__alt_data_end+0xfffabec0>
   8c2dc:	00800604 	movi	r2,24
   8c2e0:	003f1306 	br	8bf30 <__alt_data_end+0xfffabf30>
   8c2e4:	01000604 	movi	r4,24
   8c2e8:	003eb606 	br	8bdc4 <__alt_data_end+0xfffabdc4>
   8c2ec:	40bf902e 	bgeu	r8,r2,8c130 <__alt_data_end+0xfffac130>
   8c2f0:	b5bfff84 	addi	r22,r22,-2
   8c2f4:	4551883a 	add	r8,r8,r21
   8c2f8:	003f8e06 	br	8c134 <__alt_data_end+0xfffac134>
   8c2fc:	18bf762e 	bgeu	r3,r2,8c0d8 <__alt_data_end+0xfffac0d8>
   8c300:	8c7fff84 	addi	r17,r17,-2
   8c304:	1d47883a 	add	r3,r3,r21
   8c308:	003f7406 	br	8c0dc <__alt_data_end+0xfffac0dc>
   8c30c:	1cc7883a 	add	r3,r3,r19
   8c310:	003ecd06 	br	8be48 <__alt_data_end+0xfffabe48>
   8c314:	8005883a 	mov	r2,r16
   8c318:	003ef806 	br	8befc <__alt_data_end+0xfffabefc>
   8c31c:	873fe736 	bltu	r16,fp,8c2bc <__alt_data_end+0xfffac2bc>
   8c320:	e00f883a 	mov	r7,fp
   8c324:	0009883a 	mov	r4,zero
   8c328:	003fad06 	br	8c1e0 <__alt_data_end+0xfffac1e0>

0008c32c <__adddf3>:
   8c32c:	02c00434 	movhi	r11,16
   8c330:	5affffc4 	addi	r11,r11,-1
   8c334:	2806d7fa 	srli	r3,r5,31
   8c338:	2ad4703a 	and	r10,r5,r11
   8c33c:	3ad2703a 	and	r9,r7,r11
   8c340:	3804d53a 	srli	r2,r7,20
   8c344:	3018d77a 	srli	r12,r6,29
   8c348:	280ad53a 	srli	r5,r5,20
   8c34c:	501490fa 	slli	r10,r10,3
   8c350:	2010d77a 	srli	r8,r4,29
   8c354:	481290fa 	slli	r9,r9,3
   8c358:	380ed7fa 	srli	r7,r7,31
   8c35c:	defffb04 	addi	sp,sp,-20
   8c360:	dc800215 	stw	r18,8(sp)
   8c364:	dc400115 	stw	r17,4(sp)
   8c368:	dc000015 	stw	r16,0(sp)
   8c36c:	dfc00415 	stw	ra,16(sp)
   8c370:	dcc00315 	stw	r19,12(sp)
   8c374:	1c803fcc 	andi	r18,r3,255
   8c378:	2c01ffcc 	andi	r16,r5,2047
   8c37c:	5210b03a 	or	r8,r10,r8
   8c380:	202290fa 	slli	r17,r4,3
   8c384:	1081ffcc 	andi	r2,r2,2047
   8c388:	4b12b03a 	or	r9,r9,r12
   8c38c:	300c90fa 	slli	r6,r6,3
   8c390:	91c07526 	beq	r18,r7,8c568 <__adddf3+0x23c>
   8c394:	8087c83a 	sub	r3,r16,r2
   8c398:	00c0ab0e 	bge	zero,r3,8c648 <__adddf3+0x31c>
   8c39c:	10002a1e 	bne	r2,zero,8c448 <__adddf3+0x11c>
   8c3a0:	4984b03a 	or	r2,r9,r6
   8c3a4:	1000961e 	bne	r2,zero,8c600 <__adddf3+0x2d4>
   8c3a8:	888001cc 	andi	r2,r17,7
   8c3ac:	10000726 	beq	r2,zero,8c3cc <__adddf3+0xa0>
   8c3b0:	888003cc 	andi	r2,r17,15
   8c3b4:	00c00104 	movi	r3,4
   8c3b8:	10c00426 	beq	r2,r3,8c3cc <__adddf3+0xa0>
   8c3bc:	88c7883a 	add	r3,r17,r3
   8c3c0:	1c63803a 	cmpltu	r17,r3,r17
   8c3c4:	4451883a 	add	r8,r8,r17
   8c3c8:	1823883a 	mov	r17,r3
   8c3cc:	4080202c 	andhi	r2,r8,128
   8c3d0:	10005926 	beq	r2,zero,8c538 <__adddf3+0x20c>
   8c3d4:	84000044 	addi	r16,r16,1
   8c3d8:	0081ffc4 	movi	r2,2047
   8c3dc:	8080ba26 	beq	r16,r2,8c6c8 <__adddf3+0x39c>
   8c3e0:	00bfe034 	movhi	r2,65408
   8c3e4:	10bfffc4 	addi	r2,r2,-1
   8c3e8:	4090703a 	and	r8,r8,r2
   8c3ec:	4004977a 	slli	r2,r8,29
   8c3f0:	4010927a 	slli	r8,r8,9
   8c3f4:	8822d0fa 	srli	r17,r17,3
   8c3f8:	8401ffcc 	andi	r16,r16,2047
   8c3fc:	4010d33a 	srli	r8,r8,12
   8c400:	9007883a 	mov	r3,r18
   8c404:	1444b03a 	or	r2,r2,r17
   8c408:	8401ffcc 	andi	r16,r16,2047
   8c40c:	8020953a 	slli	r16,r16,20
   8c410:	18c03fcc 	andi	r3,r3,255
   8c414:	01000434 	movhi	r4,16
   8c418:	213fffc4 	addi	r4,r4,-1
   8c41c:	180697fa 	slli	r3,r3,31
   8c420:	4110703a 	and	r8,r8,r4
   8c424:	4410b03a 	or	r8,r8,r16
   8c428:	40c6b03a 	or	r3,r8,r3
   8c42c:	dfc00417 	ldw	ra,16(sp)
   8c430:	dcc00317 	ldw	r19,12(sp)
   8c434:	dc800217 	ldw	r18,8(sp)
   8c438:	dc400117 	ldw	r17,4(sp)
   8c43c:	dc000017 	ldw	r16,0(sp)
   8c440:	dec00504 	addi	sp,sp,20
   8c444:	f800283a 	ret
   8c448:	0081ffc4 	movi	r2,2047
   8c44c:	80bfd626 	beq	r16,r2,8c3a8 <__alt_data_end+0xfffac3a8>
   8c450:	4a402034 	orhi	r9,r9,128
   8c454:	00800e04 	movi	r2,56
   8c458:	10c09f16 	blt	r2,r3,8c6d8 <__adddf3+0x3ac>
   8c45c:	008007c4 	movi	r2,31
   8c460:	10c0c216 	blt	r2,r3,8c76c <__adddf3+0x440>
   8c464:	00800804 	movi	r2,32
   8c468:	10c5c83a 	sub	r2,r2,r3
   8c46c:	488a983a 	sll	r5,r9,r2
   8c470:	30c8d83a 	srl	r4,r6,r3
   8c474:	3084983a 	sll	r2,r6,r2
   8c478:	48c6d83a 	srl	r3,r9,r3
   8c47c:	290cb03a 	or	r6,r5,r4
   8c480:	1004c03a 	cmpne	r2,r2,zero
   8c484:	308cb03a 	or	r6,r6,r2
   8c488:	898dc83a 	sub	r6,r17,r6
   8c48c:	89a3803a 	cmpltu	r17,r17,r6
   8c490:	40d1c83a 	sub	r8,r8,r3
   8c494:	4451c83a 	sub	r8,r8,r17
   8c498:	3023883a 	mov	r17,r6
   8c49c:	4080202c 	andhi	r2,r8,128
   8c4a0:	10002326 	beq	r2,zero,8c530 <__adddf3+0x204>
   8c4a4:	04c02034 	movhi	r19,128
   8c4a8:	9cffffc4 	addi	r19,r19,-1
   8c4ac:	44e6703a 	and	r19,r8,r19
   8c4b0:	98007626 	beq	r19,zero,8c68c <__adddf3+0x360>
   8c4b4:	9809883a 	mov	r4,r19
   8c4b8:	008eb6c0 	call	8eb6c <__clzsi2>
   8c4bc:	10fffe04 	addi	r3,r2,-8
   8c4c0:	010007c4 	movi	r4,31
   8c4c4:	20c07716 	blt	r4,r3,8c6a4 <__adddf3+0x378>
   8c4c8:	00800804 	movi	r2,32
   8c4cc:	10c5c83a 	sub	r2,r2,r3
   8c4d0:	8884d83a 	srl	r2,r17,r2
   8c4d4:	98d0983a 	sll	r8,r19,r3
   8c4d8:	88e2983a 	sll	r17,r17,r3
   8c4dc:	1204b03a 	or	r2,r2,r8
   8c4e0:	1c007416 	blt	r3,r16,8c6b4 <__adddf3+0x388>
   8c4e4:	1c21c83a 	sub	r16,r3,r16
   8c4e8:	82000044 	addi	r8,r16,1
   8c4ec:	00c007c4 	movi	r3,31
   8c4f0:	1a009116 	blt	r3,r8,8c738 <__adddf3+0x40c>
   8c4f4:	00c00804 	movi	r3,32
   8c4f8:	1a07c83a 	sub	r3,r3,r8
   8c4fc:	8a08d83a 	srl	r4,r17,r8
   8c500:	88e2983a 	sll	r17,r17,r3
   8c504:	10c6983a 	sll	r3,r2,r3
   8c508:	1210d83a 	srl	r8,r2,r8
   8c50c:	8804c03a 	cmpne	r2,r17,zero
   8c510:	1906b03a 	or	r3,r3,r4
   8c514:	18a2b03a 	or	r17,r3,r2
   8c518:	0021883a 	mov	r16,zero
   8c51c:	003fa206 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c520:	1890b03a 	or	r8,r3,r2
   8c524:	40017d26 	beq	r8,zero,8cb1c <__adddf3+0x7f0>
   8c528:	1011883a 	mov	r8,r2
   8c52c:	1823883a 	mov	r17,r3
   8c530:	888001cc 	andi	r2,r17,7
   8c534:	103f9e1e 	bne	r2,zero,8c3b0 <__alt_data_end+0xfffac3b0>
   8c538:	4004977a 	slli	r2,r8,29
   8c53c:	8822d0fa 	srli	r17,r17,3
   8c540:	4010d0fa 	srli	r8,r8,3
   8c544:	9007883a 	mov	r3,r18
   8c548:	1444b03a 	or	r2,r2,r17
   8c54c:	0101ffc4 	movi	r4,2047
   8c550:	81002426 	beq	r16,r4,8c5e4 <__adddf3+0x2b8>
   8c554:	8120703a 	and	r16,r16,r4
   8c558:	01000434 	movhi	r4,16
   8c55c:	213fffc4 	addi	r4,r4,-1
   8c560:	4110703a 	and	r8,r8,r4
   8c564:	003fa806 	br	8c408 <__alt_data_end+0xfffac408>
   8c568:	8089c83a 	sub	r4,r16,r2
   8c56c:	01005e0e 	bge	zero,r4,8c6e8 <__adddf3+0x3bc>
   8c570:	10002b26 	beq	r2,zero,8c620 <__adddf3+0x2f4>
   8c574:	0081ffc4 	movi	r2,2047
   8c578:	80bf8b26 	beq	r16,r2,8c3a8 <__alt_data_end+0xfffac3a8>
   8c57c:	4a402034 	orhi	r9,r9,128
   8c580:	00800e04 	movi	r2,56
   8c584:	1100a40e 	bge	r2,r4,8c818 <__adddf3+0x4ec>
   8c588:	498cb03a 	or	r6,r9,r6
   8c58c:	300ac03a 	cmpne	r5,r6,zero
   8c590:	0013883a 	mov	r9,zero
   8c594:	2c4b883a 	add	r5,r5,r17
   8c598:	2c63803a 	cmpltu	r17,r5,r17
   8c59c:	4a11883a 	add	r8,r9,r8
   8c5a0:	8a11883a 	add	r8,r17,r8
   8c5a4:	2823883a 	mov	r17,r5
   8c5a8:	4080202c 	andhi	r2,r8,128
   8c5ac:	103fe026 	beq	r2,zero,8c530 <__alt_data_end+0xfffac530>
   8c5b0:	84000044 	addi	r16,r16,1
   8c5b4:	0081ffc4 	movi	r2,2047
   8c5b8:	8080d226 	beq	r16,r2,8c904 <__adddf3+0x5d8>
   8c5bc:	00bfe034 	movhi	r2,65408
   8c5c0:	10bfffc4 	addi	r2,r2,-1
   8c5c4:	4090703a 	and	r8,r8,r2
   8c5c8:	880ad07a 	srli	r5,r17,1
   8c5cc:	400897fa 	slli	r4,r8,31
   8c5d0:	88c0004c 	andi	r3,r17,1
   8c5d4:	28e2b03a 	or	r17,r5,r3
   8c5d8:	4010d07a 	srli	r8,r8,1
   8c5dc:	2462b03a 	or	r17,r4,r17
   8c5e0:	003f7106 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c5e4:	4088b03a 	or	r4,r8,r2
   8c5e8:	20014526 	beq	r4,zero,8cb00 <__adddf3+0x7d4>
   8c5ec:	01000434 	movhi	r4,16
   8c5f0:	42000234 	orhi	r8,r8,8
   8c5f4:	213fffc4 	addi	r4,r4,-1
   8c5f8:	4110703a 	and	r8,r8,r4
   8c5fc:	003f8206 	br	8c408 <__alt_data_end+0xfffac408>
   8c600:	18ffffc4 	addi	r3,r3,-1
   8c604:	1800491e 	bne	r3,zero,8c72c <__adddf3+0x400>
   8c608:	898bc83a 	sub	r5,r17,r6
   8c60c:	8963803a 	cmpltu	r17,r17,r5
   8c610:	4251c83a 	sub	r8,r8,r9
   8c614:	4451c83a 	sub	r8,r8,r17
   8c618:	2823883a 	mov	r17,r5
   8c61c:	003f9f06 	br	8c49c <__alt_data_end+0xfffac49c>
   8c620:	4984b03a 	or	r2,r9,r6
   8c624:	103f6026 	beq	r2,zero,8c3a8 <__alt_data_end+0xfffac3a8>
   8c628:	213fffc4 	addi	r4,r4,-1
   8c62c:	2000931e 	bne	r4,zero,8c87c <__adddf3+0x550>
   8c630:	898d883a 	add	r6,r17,r6
   8c634:	3463803a 	cmpltu	r17,r6,r17
   8c638:	4251883a 	add	r8,r8,r9
   8c63c:	8a11883a 	add	r8,r17,r8
   8c640:	3023883a 	mov	r17,r6
   8c644:	003fd806 	br	8c5a8 <__alt_data_end+0xfffac5a8>
   8c648:	1800541e 	bne	r3,zero,8c79c <__adddf3+0x470>
   8c64c:	80800044 	addi	r2,r16,1
   8c650:	1081ffcc 	andi	r2,r2,2047
   8c654:	00c00044 	movi	r3,1
   8c658:	1880a00e 	bge	r3,r2,8c8dc <__adddf3+0x5b0>
   8c65c:	8989c83a 	sub	r4,r17,r6
   8c660:	8905803a 	cmpltu	r2,r17,r4
   8c664:	4267c83a 	sub	r19,r8,r9
   8c668:	98a7c83a 	sub	r19,r19,r2
   8c66c:	9880202c 	andhi	r2,r19,128
   8c670:	10006326 	beq	r2,zero,8c800 <__adddf3+0x4d4>
   8c674:	3463c83a 	sub	r17,r6,r17
   8c678:	4a07c83a 	sub	r3,r9,r8
   8c67c:	344d803a 	cmpltu	r6,r6,r17
   8c680:	19a7c83a 	sub	r19,r3,r6
   8c684:	3825883a 	mov	r18,r7
   8c688:	983f8a1e 	bne	r19,zero,8c4b4 <__alt_data_end+0xfffac4b4>
   8c68c:	8809883a 	mov	r4,r17
   8c690:	008eb6c0 	call	8eb6c <__clzsi2>
   8c694:	10800804 	addi	r2,r2,32
   8c698:	10fffe04 	addi	r3,r2,-8
   8c69c:	010007c4 	movi	r4,31
   8c6a0:	20ff890e 	bge	r4,r3,8c4c8 <__alt_data_end+0xfffac4c8>
   8c6a4:	10bff604 	addi	r2,r2,-40
   8c6a8:	8884983a 	sll	r2,r17,r2
   8c6ac:	0023883a 	mov	r17,zero
   8c6b0:	1c3f8c0e 	bge	r3,r16,8c4e4 <__alt_data_end+0xfffac4e4>
   8c6b4:	023fe034 	movhi	r8,65408
   8c6b8:	423fffc4 	addi	r8,r8,-1
   8c6bc:	80e1c83a 	sub	r16,r16,r3
   8c6c0:	1210703a 	and	r8,r2,r8
   8c6c4:	003f3806 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c6c8:	9007883a 	mov	r3,r18
   8c6cc:	0011883a 	mov	r8,zero
   8c6d0:	0005883a 	mov	r2,zero
   8c6d4:	003f4c06 	br	8c408 <__alt_data_end+0xfffac408>
   8c6d8:	498cb03a 	or	r6,r9,r6
   8c6dc:	300cc03a 	cmpne	r6,r6,zero
   8c6e0:	0007883a 	mov	r3,zero
   8c6e4:	003f6806 	br	8c488 <__alt_data_end+0xfffac488>
   8c6e8:	20009c1e 	bne	r4,zero,8c95c <__adddf3+0x630>
   8c6ec:	80800044 	addi	r2,r16,1
   8c6f0:	1141ffcc 	andi	r5,r2,2047
   8c6f4:	01000044 	movi	r4,1
   8c6f8:	2140670e 	bge	r4,r5,8c898 <__adddf3+0x56c>
   8c6fc:	0101ffc4 	movi	r4,2047
   8c700:	11007f26 	beq	r2,r4,8c900 <__adddf3+0x5d4>
   8c704:	898d883a 	add	r6,r17,r6
   8c708:	4247883a 	add	r3,r8,r9
   8c70c:	3451803a 	cmpltu	r8,r6,r17
   8c710:	40d1883a 	add	r8,r8,r3
   8c714:	402297fa 	slli	r17,r8,31
   8c718:	300cd07a 	srli	r6,r6,1
   8c71c:	4010d07a 	srli	r8,r8,1
   8c720:	1021883a 	mov	r16,r2
   8c724:	89a2b03a 	or	r17,r17,r6
   8c728:	003f1f06 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c72c:	0081ffc4 	movi	r2,2047
   8c730:	80bf481e 	bne	r16,r2,8c454 <__alt_data_end+0xfffac454>
   8c734:	003f1c06 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c738:	843ff844 	addi	r16,r16,-31
   8c73c:	01000804 	movi	r4,32
   8c740:	1406d83a 	srl	r3,r2,r16
   8c744:	41005026 	beq	r8,r4,8c888 <__adddf3+0x55c>
   8c748:	01001004 	movi	r4,64
   8c74c:	2211c83a 	sub	r8,r4,r8
   8c750:	1204983a 	sll	r2,r2,r8
   8c754:	88a2b03a 	or	r17,r17,r2
   8c758:	8822c03a 	cmpne	r17,r17,zero
   8c75c:	1c62b03a 	or	r17,r3,r17
   8c760:	0011883a 	mov	r8,zero
   8c764:	0021883a 	mov	r16,zero
   8c768:	003f7106 	br	8c530 <__alt_data_end+0xfffac530>
   8c76c:	193ff804 	addi	r4,r3,-32
   8c770:	00800804 	movi	r2,32
   8c774:	4908d83a 	srl	r4,r9,r4
   8c778:	18804526 	beq	r3,r2,8c890 <__adddf3+0x564>
   8c77c:	00801004 	movi	r2,64
   8c780:	10c5c83a 	sub	r2,r2,r3
   8c784:	4886983a 	sll	r3,r9,r2
   8c788:	198cb03a 	or	r6,r3,r6
   8c78c:	300cc03a 	cmpne	r6,r6,zero
   8c790:	218cb03a 	or	r6,r4,r6
   8c794:	0007883a 	mov	r3,zero
   8c798:	003f3b06 	br	8c488 <__alt_data_end+0xfffac488>
   8c79c:	80002a26 	beq	r16,zero,8c848 <__adddf3+0x51c>
   8c7a0:	0101ffc4 	movi	r4,2047
   8c7a4:	11006826 	beq	r2,r4,8c948 <__adddf3+0x61c>
   8c7a8:	00c7c83a 	sub	r3,zero,r3
   8c7ac:	42002034 	orhi	r8,r8,128
   8c7b0:	01000e04 	movi	r4,56
   8c7b4:	20c07c16 	blt	r4,r3,8c9a8 <__adddf3+0x67c>
   8c7b8:	010007c4 	movi	r4,31
   8c7bc:	20c0da16 	blt	r4,r3,8cb28 <__adddf3+0x7fc>
   8c7c0:	01000804 	movi	r4,32
   8c7c4:	20c9c83a 	sub	r4,r4,r3
   8c7c8:	4114983a 	sll	r10,r8,r4
   8c7cc:	88cad83a 	srl	r5,r17,r3
   8c7d0:	8908983a 	sll	r4,r17,r4
   8c7d4:	40c6d83a 	srl	r3,r8,r3
   8c7d8:	5162b03a 	or	r17,r10,r5
   8c7dc:	2008c03a 	cmpne	r4,r4,zero
   8c7e0:	8922b03a 	or	r17,r17,r4
   8c7e4:	3463c83a 	sub	r17,r6,r17
   8c7e8:	48c7c83a 	sub	r3,r9,r3
   8c7ec:	344d803a 	cmpltu	r6,r6,r17
   8c7f0:	1991c83a 	sub	r8,r3,r6
   8c7f4:	1021883a 	mov	r16,r2
   8c7f8:	3825883a 	mov	r18,r7
   8c7fc:	003f2706 	br	8c49c <__alt_data_end+0xfffac49c>
   8c800:	24d0b03a 	or	r8,r4,r19
   8c804:	40001b1e 	bne	r8,zero,8c874 <__adddf3+0x548>
   8c808:	0005883a 	mov	r2,zero
   8c80c:	0007883a 	mov	r3,zero
   8c810:	0021883a 	mov	r16,zero
   8c814:	003f4d06 	br	8c54c <__alt_data_end+0xfffac54c>
   8c818:	008007c4 	movi	r2,31
   8c81c:	11003c16 	blt	r2,r4,8c910 <__adddf3+0x5e4>
   8c820:	00800804 	movi	r2,32
   8c824:	1105c83a 	sub	r2,r2,r4
   8c828:	488e983a 	sll	r7,r9,r2
   8c82c:	310ad83a 	srl	r5,r6,r4
   8c830:	3084983a 	sll	r2,r6,r2
   8c834:	4912d83a 	srl	r9,r9,r4
   8c838:	394ab03a 	or	r5,r7,r5
   8c83c:	1004c03a 	cmpne	r2,r2,zero
   8c840:	288ab03a 	or	r5,r5,r2
   8c844:	003f5306 	br	8c594 <__alt_data_end+0xfffac594>
   8c848:	4448b03a 	or	r4,r8,r17
   8c84c:	20003e26 	beq	r4,zero,8c948 <__adddf3+0x61c>
   8c850:	00c6303a 	nor	r3,zero,r3
   8c854:	18003a1e 	bne	r3,zero,8c940 <__adddf3+0x614>
   8c858:	3463c83a 	sub	r17,r6,r17
   8c85c:	4a07c83a 	sub	r3,r9,r8
   8c860:	344d803a 	cmpltu	r6,r6,r17
   8c864:	1991c83a 	sub	r8,r3,r6
   8c868:	1021883a 	mov	r16,r2
   8c86c:	3825883a 	mov	r18,r7
   8c870:	003f0a06 	br	8c49c <__alt_data_end+0xfffac49c>
   8c874:	2023883a 	mov	r17,r4
   8c878:	003f0d06 	br	8c4b0 <__alt_data_end+0xfffac4b0>
   8c87c:	0081ffc4 	movi	r2,2047
   8c880:	80bf3f1e 	bne	r16,r2,8c580 <__alt_data_end+0xfffac580>
   8c884:	003ec806 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c888:	0005883a 	mov	r2,zero
   8c88c:	003fb106 	br	8c754 <__alt_data_end+0xfffac754>
   8c890:	0007883a 	mov	r3,zero
   8c894:	003fbc06 	br	8c788 <__alt_data_end+0xfffac788>
   8c898:	4444b03a 	or	r2,r8,r17
   8c89c:	8000871e 	bne	r16,zero,8cabc <__adddf3+0x790>
   8c8a0:	1000ba26 	beq	r2,zero,8cb8c <__adddf3+0x860>
   8c8a4:	4984b03a 	or	r2,r9,r6
   8c8a8:	103ebf26 	beq	r2,zero,8c3a8 <__alt_data_end+0xfffac3a8>
   8c8ac:	8985883a 	add	r2,r17,r6
   8c8b0:	4247883a 	add	r3,r8,r9
   8c8b4:	1451803a 	cmpltu	r8,r2,r17
   8c8b8:	40d1883a 	add	r8,r8,r3
   8c8bc:	40c0202c 	andhi	r3,r8,128
   8c8c0:	1023883a 	mov	r17,r2
   8c8c4:	183f1a26 	beq	r3,zero,8c530 <__alt_data_end+0xfffac530>
   8c8c8:	00bfe034 	movhi	r2,65408
   8c8cc:	10bfffc4 	addi	r2,r2,-1
   8c8d0:	2021883a 	mov	r16,r4
   8c8d4:	4090703a 	and	r8,r8,r2
   8c8d8:	003eb306 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c8dc:	4444b03a 	or	r2,r8,r17
   8c8e0:	8000291e 	bne	r16,zero,8c988 <__adddf3+0x65c>
   8c8e4:	10004b1e 	bne	r2,zero,8ca14 <__adddf3+0x6e8>
   8c8e8:	4990b03a 	or	r8,r9,r6
   8c8ec:	40008b26 	beq	r8,zero,8cb1c <__adddf3+0x7f0>
   8c8f0:	4811883a 	mov	r8,r9
   8c8f4:	3023883a 	mov	r17,r6
   8c8f8:	3825883a 	mov	r18,r7
   8c8fc:	003eaa06 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c900:	1021883a 	mov	r16,r2
   8c904:	0011883a 	mov	r8,zero
   8c908:	0005883a 	mov	r2,zero
   8c90c:	003f0f06 	br	8c54c <__alt_data_end+0xfffac54c>
   8c910:	217ff804 	addi	r5,r4,-32
   8c914:	00800804 	movi	r2,32
   8c918:	494ad83a 	srl	r5,r9,r5
   8c91c:	20807d26 	beq	r4,r2,8cb14 <__adddf3+0x7e8>
   8c920:	00801004 	movi	r2,64
   8c924:	1109c83a 	sub	r4,r2,r4
   8c928:	4912983a 	sll	r9,r9,r4
   8c92c:	498cb03a 	or	r6,r9,r6
   8c930:	300cc03a 	cmpne	r6,r6,zero
   8c934:	298ab03a 	or	r5,r5,r6
   8c938:	0013883a 	mov	r9,zero
   8c93c:	003f1506 	br	8c594 <__alt_data_end+0xfffac594>
   8c940:	0101ffc4 	movi	r4,2047
   8c944:	113f9a1e 	bne	r2,r4,8c7b0 <__alt_data_end+0xfffac7b0>
   8c948:	4811883a 	mov	r8,r9
   8c94c:	3023883a 	mov	r17,r6
   8c950:	1021883a 	mov	r16,r2
   8c954:	3825883a 	mov	r18,r7
   8c958:	003e9306 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c95c:	8000161e 	bne	r16,zero,8c9b8 <__adddf3+0x68c>
   8c960:	444ab03a 	or	r5,r8,r17
   8c964:	28005126 	beq	r5,zero,8caac <__adddf3+0x780>
   8c968:	0108303a 	nor	r4,zero,r4
   8c96c:	20004d1e 	bne	r4,zero,8caa4 <__adddf3+0x778>
   8c970:	89a3883a 	add	r17,r17,r6
   8c974:	4253883a 	add	r9,r8,r9
   8c978:	898d803a 	cmpltu	r6,r17,r6
   8c97c:	3251883a 	add	r8,r6,r9
   8c980:	1021883a 	mov	r16,r2
   8c984:	003f0806 	br	8c5a8 <__alt_data_end+0xfffac5a8>
   8c988:	1000301e 	bne	r2,zero,8ca4c <__adddf3+0x720>
   8c98c:	4984b03a 	or	r2,r9,r6
   8c990:	10007126 	beq	r2,zero,8cb58 <__adddf3+0x82c>
   8c994:	4811883a 	mov	r8,r9
   8c998:	3023883a 	mov	r17,r6
   8c99c:	3825883a 	mov	r18,r7
   8c9a0:	0401ffc4 	movi	r16,2047
   8c9a4:	003e8006 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8c9a8:	4462b03a 	or	r17,r8,r17
   8c9ac:	8822c03a 	cmpne	r17,r17,zero
   8c9b0:	0007883a 	mov	r3,zero
   8c9b4:	003f8b06 	br	8c7e4 <__alt_data_end+0xfffac7e4>
   8c9b8:	0141ffc4 	movi	r5,2047
   8c9bc:	11403b26 	beq	r2,r5,8caac <__adddf3+0x780>
   8c9c0:	0109c83a 	sub	r4,zero,r4
   8c9c4:	42002034 	orhi	r8,r8,128
   8c9c8:	01400e04 	movi	r5,56
   8c9cc:	29006716 	blt	r5,r4,8cb6c <__adddf3+0x840>
   8c9d0:	014007c4 	movi	r5,31
   8c9d4:	29007016 	blt	r5,r4,8cb98 <__adddf3+0x86c>
   8c9d8:	01400804 	movi	r5,32
   8c9dc:	290bc83a 	sub	r5,r5,r4
   8c9e0:	4154983a 	sll	r10,r8,r5
   8c9e4:	890ed83a 	srl	r7,r17,r4
   8c9e8:	894a983a 	sll	r5,r17,r5
   8c9ec:	4108d83a 	srl	r4,r8,r4
   8c9f0:	51e2b03a 	or	r17,r10,r7
   8c9f4:	280ac03a 	cmpne	r5,r5,zero
   8c9f8:	8962b03a 	or	r17,r17,r5
   8c9fc:	89a3883a 	add	r17,r17,r6
   8ca00:	2253883a 	add	r9,r4,r9
   8ca04:	898d803a 	cmpltu	r6,r17,r6
   8ca08:	3251883a 	add	r8,r6,r9
   8ca0c:	1021883a 	mov	r16,r2
   8ca10:	003ee506 	br	8c5a8 <__alt_data_end+0xfffac5a8>
   8ca14:	4984b03a 	or	r2,r9,r6
   8ca18:	103e6326 	beq	r2,zero,8c3a8 <__alt_data_end+0xfffac3a8>
   8ca1c:	8987c83a 	sub	r3,r17,r6
   8ca20:	88c9803a 	cmpltu	r4,r17,r3
   8ca24:	4245c83a 	sub	r2,r8,r9
   8ca28:	1105c83a 	sub	r2,r2,r4
   8ca2c:	1100202c 	andhi	r4,r2,128
   8ca30:	203ebb26 	beq	r4,zero,8c520 <__alt_data_end+0xfffac520>
   8ca34:	3463c83a 	sub	r17,r6,r17
   8ca38:	4a07c83a 	sub	r3,r9,r8
   8ca3c:	344d803a 	cmpltu	r6,r6,r17
   8ca40:	1991c83a 	sub	r8,r3,r6
   8ca44:	3825883a 	mov	r18,r7
   8ca48:	003e5706 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8ca4c:	4984b03a 	or	r2,r9,r6
   8ca50:	10002e26 	beq	r2,zero,8cb0c <__adddf3+0x7e0>
   8ca54:	4004d0fa 	srli	r2,r8,3
   8ca58:	8822d0fa 	srli	r17,r17,3
   8ca5c:	4010977a 	slli	r8,r8,29
   8ca60:	10c0022c 	andhi	r3,r2,8
   8ca64:	4462b03a 	or	r17,r8,r17
   8ca68:	18000826 	beq	r3,zero,8ca8c <__adddf3+0x760>
   8ca6c:	4808d0fa 	srli	r4,r9,3
   8ca70:	20c0022c 	andhi	r3,r4,8
   8ca74:	1800051e 	bne	r3,zero,8ca8c <__adddf3+0x760>
   8ca78:	300cd0fa 	srli	r6,r6,3
   8ca7c:	4806977a 	slli	r3,r9,29
   8ca80:	2005883a 	mov	r2,r4
   8ca84:	3825883a 	mov	r18,r7
   8ca88:	19a2b03a 	or	r17,r3,r6
   8ca8c:	8810d77a 	srli	r8,r17,29
   8ca90:	100490fa 	slli	r2,r2,3
   8ca94:	882290fa 	slli	r17,r17,3
   8ca98:	0401ffc4 	movi	r16,2047
   8ca9c:	4090b03a 	or	r8,r8,r2
   8caa0:	003e4106 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8caa4:	0141ffc4 	movi	r5,2047
   8caa8:	117fc71e 	bne	r2,r5,8c9c8 <__alt_data_end+0xfffac9c8>
   8caac:	4811883a 	mov	r8,r9
   8cab0:	3023883a 	mov	r17,r6
   8cab4:	1021883a 	mov	r16,r2
   8cab8:	003e3b06 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8cabc:	10002f26 	beq	r2,zero,8cb7c <__adddf3+0x850>
   8cac0:	4984b03a 	or	r2,r9,r6
   8cac4:	10001126 	beq	r2,zero,8cb0c <__adddf3+0x7e0>
   8cac8:	4004d0fa 	srli	r2,r8,3
   8cacc:	8822d0fa 	srli	r17,r17,3
   8cad0:	4010977a 	slli	r8,r8,29
   8cad4:	10c0022c 	andhi	r3,r2,8
   8cad8:	4462b03a 	or	r17,r8,r17
   8cadc:	183feb26 	beq	r3,zero,8ca8c <__alt_data_end+0xfffaca8c>
   8cae0:	4808d0fa 	srli	r4,r9,3
   8cae4:	20c0022c 	andhi	r3,r4,8
   8cae8:	183fe81e 	bne	r3,zero,8ca8c <__alt_data_end+0xfffaca8c>
   8caec:	300cd0fa 	srli	r6,r6,3
   8caf0:	4806977a 	slli	r3,r9,29
   8caf4:	2005883a 	mov	r2,r4
   8caf8:	19a2b03a 	or	r17,r3,r6
   8cafc:	003fe306 	br	8ca8c <__alt_data_end+0xfffaca8c>
   8cb00:	0011883a 	mov	r8,zero
   8cb04:	0005883a 	mov	r2,zero
   8cb08:	003e3f06 	br	8c408 <__alt_data_end+0xfffac408>
   8cb0c:	0401ffc4 	movi	r16,2047
   8cb10:	003e2506 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8cb14:	0013883a 	mov	r9,zero
   8cb18:	003f8406 	br	8c92c <__alt_data_end+0xfffac92c>
   8cb1c:	0005883a 	mov	r2,zero
   8cb20:	0007883a 	mov	r3,zero
   8cb24:	003e8906 	br	8c54c <__alt_data_end+0xfffac54c>
   8cb28:	197ff804 	addi	r5,r3,-32
   8cb2c:	01000804 	movi	r4,32
   8cb30:	414ad83a 	srl	r5,r8,r5
   8cb34:	19002426 	beq	r3,r4,8cbc8 <__adddf3+0x89c>
   8cb38:	01001004 	movi	r4,64
   8cb3c:	20c7c83a 	sub	r3,r4,r3
   8cb40:	40c6983a 	sll	r3,r8,r3
   8cb44:	1c46b03a 	or	r3,r3,r17
   8cb48:	1806c03a 	cmpne	r3,r3,zero
   8cb4c:	28e2b03a 	or	r17,r5,r3
   8cb50:	0007883a 	mov	r3,zero
   8cb54:	003f2306 	br	8c7e4 <__alt_data_end+0xfffac7e4>
   8cb58:	0007883a 	mov	r3,zero
   8cb5c:	5811883a 	mov	r8,r11
   8cb60:	00bfffc4 	movi	r2,-1
   8cb64:	0401ffc4 	movi	r16,2047
   8cb68:	003e7806 	br	8c54c <__alt_data_end+0xfffac54c>
   8cb6c:	4462b03a 	or	r17,r8,r17
   8cb70:	8822c03a 	cmpne	r17,r17,zero
   8cb74:	0009883a 	mov	r4,zero
   8cb78:	003fa006 	br	8c9fc <__alt_data_end+0xfffac9fc>
   8cb7c:	4811883a 	mov	r8,r9
   8cb80:	3023883a 	mov	r17,r6
   8cb84:	0401ffc4 	movi	r16,2047
   8cb88:	003e0706 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8cb8c:	4811883a 	mov	r8,r9
   8cb90:	3023883a 	mov	r17,r6
   8cb94:	003e0406 	br	8c3a8 <__alt_data_end+0xfffac3a8>
   8cb98:	21fff804 	addi	r7,r4,-32
   8cb9c:	01400804 	movi	r5,32
   8cba0:	41ced83a 	srl	r7,r8,r7
   8cba4:	21400a26 	beq	r4,r5,8cbd0 <__adddf3+0x8a4>
   8cba8:	01401004 	movi	r5,64
   8cbac:	2909c83a 	sub	r4,r5,r4
   8cbb0:	4108983a 	sll	r4,r8,r4
   8cbb4:	2448b03a 	or	r4,r4,r17
   8cbb8:	2008c03a 	cmpne	r4,r4,zero
   8cbbc:	3922b03a 	or	r17,r7,r4
   8cbc0:	0009883a 	mov	r4,zero
   8cbc4:	003f8d06 	br	8c9fc <__alt_data_end+0xfffac9fc>
   8cbc8:	0007883a 	mov	r3,zero
   8cbcc:	003fdd06 	br	8cb44 <__alt_data_end+0xfffacb44>
   8cbd0:	0009883a 	mov	r4,zero
   8cbd4:	003ff706 	br	8cbb4 <__alt_data_end+0xfffacbb4>

0008cbd8 <__divdf3>:
   8cbd8:	defff004 	addi	sp,sp,-64
   8cbdc:	dc800815 	stw	r18,32(sp)
   8cbe0:	2824d53a 	srli	r18,r5,20
   8cbe4:	dd800c15 	stw	r22,48(sp)
   8cbe8:	282cd7fa 	srli	r22,r5,31
   8cbec:	dc000615 	stw	r16,24(sp)
   8cbf0:	04000434 	movhi	r16,16
   8cbf4:	843fffc4 	addi	r16,r16,-1
   8cbf8:	dfc00f15 	stw	ra,60(sp)
   8cbfc:	df000e15 	stw	fp,56(sp)
   8cc00:	ddc00d15 	stw	r23,52(sp)
   8cc04:	dd400b15 	stw	r21,44(sp)
   8cc08:	dd000a15 	stw	r20,40(sp)
   8cc0c:	dcc00915 	stw	r19,36(sp)
   8cc10:	dc400715 	stw	r17,28(sp)
   8cc14:	9481ffcc 	andi	r18,r18,2047
   8cc18:	2c20703a 	and	r16,r5,r16
   8cc1c:	b2003fcc 	andi	r8,r22,255
   8cc20:	90006126 	beq	r18,zero,8cda8 <__divdf3+0x1d0>
   8cc24:	0081ffc4 	movi	r2,2047
   8cc28:	202b883a 	mov	r21,r4
   8cc2c:	90803726 	beq	r18,r2,8cd0c <__divdf3+0x134>
   8cc30:	80800434 	orhi	r2,r16,16
   8cc34:	100490fa 	slli	r2,r2,3
   8cc38:	2020d77a 	srli	r16,r4,29
   8cc3c:	202a90fa 	slli	r21,r4,3
   8cc40:	94bf0044 	addi	r18,r18,-1023
   8cc44:	80a0b03a 	or	r16,r16,r2
   8cc48:	0013883a 	mov	r9,zero
   8cc4c:	000b883a 	mov	r5,zero
   8cc50:	3806d53a 	srli	r3,r7,20
   8cc54:	382ed7fa 	srli	r23,r7,31
   8cc58:	04400434 	movhi	r17,16
   8cc5c:	8c7fffc4 	addi	r17,r17,-1
   8cc60:	18c1ffcc 	andi	r3,r3,2047
   8cc64:	3029883a 	mov	r20,r6
   8cc68:	3c62703a 	and	r17,r7,r17
   8cc6c:	bf003fcc 	andi	fp,r23,255
   8cc70:	18006e26 	beq	r3,zero,8ce2c <__divdf3+0x254>
   8cc74:	0081ffc4 	movi	r2,2047
   8cc78:	18806626 	beq	r3,r2,8ce14 <__divdf3+0x23c>
   8cc7c:	88800434 	orhi	r2,r17,16
   8cc80:	100490fa 	slli	r2,r2,3
   8cc84:	3022d77a 	srli	r17,r6,29
   8cc88:	302890fa 	slli	r20,r6,3
   8cc8c:	18ff0044 	addi	r3,r3,-1023
   8cc90:	88a2b03a 	or	r17,r17,r2
   8cc94:	000f883a 	mov	r7,zero
   8cc98:	b5e6f03a 	xor	r19,r22,r23
   8cc9c:	3a4cb03a 	or	r6,r7,r9
   8cca0:	008003c4 	movi	r2,15
   8cca4:	9809883a 	mov	r4,r19
   8cca8:	90c7c83a 	sub	r3,r18,r3
   8ccac:	9cc03fcc 	andi	r19,r19,255
   8ccb0:	11809636 	bltu	r2,r6,8cf0c <__divdf3+0x334>
   8ccb4:	300c90ba 	slli	r6,r6,2
   8ccb8:	00800274 	movhi	r2,9
   8ccbc:	10b33304 	addi	r2,r2,-13108
   8ccc0:	308d883a 	add	r6,r6,r2
   8ccc4:	30800017 	ldw	r2,0(r6)
   8ccc8:	1000683a 	jmp	r2
   8cccc:	0008cf0c 	andi	zero,zero,9020
   8ccd0:	0008cd44 	movi	zero,9013
   8ccd4:	0008cefc 	xorhi	zero,zero,9019
   8ccd8:	0008cd38 	rdprs	zero,zero,9012
   8ccdc:	0008cefc 	xorhi	zero,zero,9019
   8cce0:	0008ced0 	cmplti	zero,zero,9019
   8cce4:	0008cefc 	xorhi	zero,zero,9019
   8cce8:	0008cd38 	rdprs	zero,zero,9012
   8ccec:	0008cd44 	movi	zero,9013
   8ccf0:	0008cd44 	movi	zero,9013
   8ccf4:	0008ced0 	cmplti	zero,zero,9019
   8ccf8:	0008cd38 	rdprs	zero,zero,9012
   8ccfc:	0008cd28 	cmpgeui	zero,zero,9012
   8cd00:	0008cd28 	cmpgeui	zero,zero,9012
   8cd04:	0008cd28 	cmpgeui	zero,zero,9012
   8cd08:	0008d294 	movui	zero,9034
   8cd0c:	2404b03a 	or	r2,r4,r16
   8cd10:	10006c1e 	bne	r2,zero,8cec4 <__divdf3+0x2ec>
   8cd14:	02400204 	movi	r9,8
   8cd18:	0021883a 	mov	r16,zero
   8cd1c:	002b883a 	mov	r21,zero
   8cd20:	01400084 	movi	r5,2
   8cd24:	003fca06 	br	8cc50 <__alt_data_end+0xfffacc50>
   8cd28:	8023883a 	mov	r17,r16
   8cd2c:	a829883a 	mov	r20,r21
   8cd30:	4039883a 	mov	fp,r8
   8cd34:	280f883a 	mov	r7,r5
   8cd38:	00800084 	movi	r2,2
   8cd3c:	3881601e 	bne	r7,r2,8d2c0 <__divdf3+0x6e8>
   8cd40:	e027883a 	mov	r19,fp
   8cd44:	9900004c 	andi	r4,r19,1
   8cd48:	0081ffc4 	movi	r2,2047
   8cd4c:	0021883a 	mov	r16,zero
   8cd50:	002b883a 	mov	r21,zero
   8cd54:	1004953a 	slli	r2,r2,20
   8cd58:	20c03fcc 	andi	r3,r4,255
   8cd5c:	01400434 	movhi	r5,16
   8cd60:	297fffc4 	addi	r5,r5,-1
   8cd64:	180697fa 	slli	r3,r3,31
   8cd68:	8160703a 	and	r16,r16,r5
   8cd6c:	80a0b03a 	or	r16,r16,r2
   8cd70:	80c6b03a 	or	r3,r16,r3
   8cd74:	a805883a 	mov	r2,r21
   8cd78:	dfc00f17 	ldw	ra,60(sp)
   8cd7c:	df000e17 	ldw	fp,56(sp)
   8cd80:	ddc00d17 	ldw	r23,52(sp)
   8cd84:	dd800c17 	ldw	r22,48(sp)
   8cd88:	dd400b17 	ldw	r21,44(sp)
   8cd8c:	dd000a17 	ldw	r20,40(sp)
   8cd90:	dcc00917 	ldw	r19,36(sp)
   8cd94:	dc800817 	ldw	r18,32(sp)
   8cd98:	dc400717 	ldw	r17,28(sp)
   8cd9c:	dc000617 	ldw	r16,24(sp)
   8cda0:	dec01004 	addi	sp,sp,64
   8cda4:	f800283a 	ret
   8cda8:	2404b03a 	or	r2,r4,r16
   8cdac:	2023883a 	mov	r17,r4
   8cdb0:	10003f26 	beq	r2,zero,8ceb0 <__divdf3+0x2d8>
   8cdb4:	80015e26 	beq	r16,zero,8d330 <__divdf3+0x758>
   8cdb8:	8009883a 	mov	r4,r16
   8cdbc:	d9800215 	stw	r6,8(sp)
   8cdc0:	d9c00515 	stw	r7,20(sp)
   8cdc4:	da000415 	stw	r8,16(sp)
   8cdc8:	008eb6c0 	call	8eb6c <__clzsi2>
   8cdcc:	d9800217 	ldw	r6,8(sp)
   8cdd0:	d9c00517 	ldw	r7,20(sp)
   8cdd4:	da000417 	ldw	r8,16(sp)
   8cdd8:	113ffd44 	addi	r4,r2,-11
   8cddc:	00c00704 	movi	r3,28
   8cde0:	19014f16 	blt	r3,r4,8d320 <__divdf3+0x748>
   8cde4:	00c00744 	movi	r3,29
   8cde8:	157ffe04 	addi	r21,r2,-8
   8cdec:	1907c83a 	sub	r3,r3,r4
   8cdf0:	8560983a 	sll	r16,r16,r21
   8cdf4:	88c6d83a 	srl	r3,r17,r3
   8cdf8:	8d6a983a 	sll	r21,r17,r21
   8cdfc:	1c20b03a 	or	r16,r3,r16
   8ce00:	1080fcc4 	addi	r2,r2,1011
   8ce04:	00a5c83a 	sub	r18,zero,r2
   8ce08:	0013883a 	mov	r9,zero
   8ce0c:	000b883a 	mov	r5,zero
   8ce10:	003f8f06 	br	8cc50 <__alt_data_end+0xfffacc50>
   8ce14:	3444b03a 	or	r2,r6,r17
   8ce18:	1000231e 	bne	r2,zero,8cea8 <__divdf3+0x2d0>
   8ce1c:	0023883a 	mov	r17,zero
   8ce20:	0029883a 	mov	r20,zero
   8ce24:	01c00084 	movi	r7,2
   8ce28:	003f9b06 	br	8cc98 <__alt_data_end+0xfffacc98>
   8ce2c:	3444b03a 	or	r2,r6,r17
   8ce30:	10001926 	beq	r2,zero,8ce98 <__divdf3+0x2c0>
   8ce34:	88014b26 	beq	r17,zero,8d364 <__divdf3+0x78c>
   8ce38:	8809883a 	mov	r4,r17
   8ce3c:	d9400115 	stw	r5,4(sp)
   8ce40:	d9800215 	stw	r6,8(sp)
   8ce44:	da000415 	stw	r8,16(sp)
   8ce48:	da400315 	stw	r9,12(sp)
   8ce4c:	008eb6c0 	call	8eb6c <__clzsi2>
   8ce50:	d9400117 	ldw	r5,4(sp)
   8ce54:	d9800217 	ldw	r6,8(sp)
   8ce58:	da000417 	ldw	r8,16(sp)
   8ce5c:	da400317 	ldw	r9,12(sp)
   8ce60:	113ffd44 	addi	r4,r2,-11
   8ce64:	00c00704 	movi	r3,28
   8ce68:	19013a16 	blt	r3,r4,8d354 <__divdf3+0x77c>
   8ce6c:	00c00744 	movi	r3,29
   8ce70:	153ffe04 	addi	r20,r2,-8
   8ce74:	1907c83a 	sub	r3,r3,r4
   8ce78:	8d22983a 	sll	r17,r17,r20
   8ce7c:	30c6d83a 	srl	r3,r6,r3
   8ce80:	3528983a 	sll	r20,r6,r20
   8ce84:	1c62b03a 	or	r17,r3,r17
   8ce88:	1080fcc4 	addi	r2,r2,1011
   8ce8c:	0087c83a 	sub	r3,zero,r2
   8ce90:	000f883a 	mov	r7,zero
   8ce94:	003f8006 	br	8cc98 <__alt_data_end+0xfffacc98>
   8ce98:	0023883a 	mov	r17,zero
   8ce9c:	0029883a 	mov	r20,zero
   8cea0:	01c00044 	movi	r7,1
   8cea4:	003f7c06 	br	8cc98 <__alt_data_end+0xfffacc98>
   8cea8:	01c000c4 	movi	r7,3
   8ceac:	003f7a06 	br	8cc98 <__alt_data_end+0xfffacc98>
   8ceb0:	02400104 	movi	r9,4
   8ceb4:	0021883a 	mov	r16,zero
   8ceb8:	002b883a 	mov	r21,zero
   8cebc:	01400044 	movi	r5,1
   8cec0:	003f6306 	br	8cc50 <__alt_data_end+0xfffacc50>
   8cec4:	02400304 	movi	r9,12
   8cec8:	014000c4 	movi	r5,3
   8cecc:	003f6006 	br	8cc50 <__alt_data_end+0xfffacc50>
   8ced0:	04000434 	movhi	r16,16
   8ced4:	0009883a 	mov	r4,zero
   8ced8:	843fffc4 	addi	r16,r16,-1
   8cedc:	057fffc4 	movi	r21,-1
   8cee0:	0081ffc4 	movi	r2,2047
   8cee4:	003f9b06 	br	8cd54 <__alt_data_end+0xfffacd54>
   8cee8:	00c00044 	movi	r3,1
   8ceec:	1887c83a 	sub	r3,r3,r2
   8cef0:	01000e04 	movi	r4,56
   8cef4:	20c1530e 	bge	r4,r3,8d444 <__divdf3+0x86c>
   8cef8:	9900004c 	andi	r4,r19,1
   8cefc:	0005883a 	mov	r2,zero
   8cf00:	0021883a 	mov	r16,zero
   8cf04:	002b883a 	mov	r21,zero
   8cf08:	003f9206 	br	8cd54 <__alt_data_end+0xfffacd54>
   8cf0c:	8c012e36 	bltu	r17,r16,8d3c8 <__divdf3+0x7f0>
   8cf10:	84412c26 	beq	r16,r17,8d3c4 <__divdf3+0x7ec>
   8cf14:	a82f883a 	mov	r23,r21
   8cf18:	18ffffc4 	addi	r3,r3,-1
   8cf1c:	002b883a 	mov	r21,zero
   8cf20:	a004d63a 	srli	r2,r20,24
   8cf24:	8822923a 	slli	r17,r17,8
   8cf28:	a028923a 	slli	r20,r20,8
   8cf2c:	8009883a 	mov	r4,r16
   8cf30:	88acb03a 	or	r22,r17,r2
   8cf34:	dd000015 	stw	r20,0(sp)
   8cf38:	b028d43a 	srli	r20,r22,16
   8cf3c:	d8c00215 	stw	r3,8(sp)
   8cf40:	b4bfffcc 	andi	r18,r22,65535
   8cf44:	a00b883a 	mov	r5,r20
   8cf48:	0081a780 	call	81a78 <__udivsi3>
   8cf4c:	100b883a 	mov	r5,r2
   8cf50:	9009883a 	mov	r4,r18
   8cf54:	1023883a 	mov	r17,r2
   8cf58:	0081b340 	call	81b34 <__mulsi3>
   8cf5c:	8009883a 	mov	r4,r16
   8cf60:	a00b883a 	mov	r5,r20
   8cf64:	1039883a 	mov	fp,r2
   8cf68:	0081adc0 	call	81adc <__umodsi3>
   8cf6c:	1004943a 	slli	r2,r2,16
   8cf70:	b808d43a 	srli	r4,r23,16
   8cf74:	d8c00217 	ldw	r3,8(sp)
   8cf78:	2084b03a 	or	r2,r4,r2
   8cf7c:	1700062e 	bgeu	r2,fp,8cf98 <__divdf3+0x3c0>
   8cf80:	1585883a 	add	r2,r2,r22
   8cf84:	893fffc4 	addi	r4,r17,-1
   8cf88:	15811d36 	bltu	r2,r22,8d400 <__divdf3+0x828>
   8cf8c:	17011c2e 	bgeu	r2,fp,8d400 <__divdf3+0x828>
   8cf90:	8c7fff84 	addi	r17,r17,-2
   8cf94:	1585883a 	add	r2,r2,r22
   8cf98:	1739c83a 	sub	fp,r2,fp
   8cf9c:	a00b883a 	mov	r5,r20
   8cfa0:	e009883a 	mov	r4,fp
   8cfa4:	d8c00215 	stw	r3,8(sp)
   8cfa8:	0081a780 	call	81a78 <__udivsi3>
   8cfac:	100b883a 	mov	r5,r2
   8cfb0:	9009883a 	mov	r4,r18
   8cfb4:	1021883a 	mov	r16,r2
   8cfb8:	0081b340 	call	81b34 <__mulsi3>
   8cfbc:	a00b883a 	mov	r5,r20
   8cfc0:	e009883a 	mov	r4,fp
   8cfc4:	d8800415 	stw	r2,16(sp)
   8cfc8:	0081adc0 	call	81adc <__umodsi3>
   8cfcc:	1004943a 	slli	r2,r2,16
   8cfd0:	da000417 	ldw	r8,16(sp)
   8cfd4:	bdffffcc 	andi	r23,r23,65535
   8cfd8:	b884b03a 	or	r2,r23,r2
   8cfdc:	d8c00217 	ldw	r3,8(sp)
   8cfe0:	1200062e 	bgeu	r2,r8,8cffc <__divdf3+0x424>
   8cfe4:	1585883a 	add	r2,r2,r22
   8cfe8:	813fffc4 	addi	r4,r16,-1
   8cfec:	15810236 	bltu	r2,r22,8d3f8 <__divdf3+0x820>
   8cff0:	1201012e 	bgeu	r2,r8,8d3f8 <__divdf3+0x820>
   8cff4:	843fff84 	addi	r16,r16,-2
   8cff8:	1585883a 	add	r2,r2,r22
   8cffc:	8822943a 	slli	r17,r17,16
   8d000:	d9800017 	ldw	r6,0(sp)
   8d004:	1211c83a 	sub	r8,r2,r8
   8d008:	8c22b03a 	or	r17,r17,r16
   8d00c:	373fffcc 	andi	fp,r6,65535
   8d010:	8abfffcc 	andi	r10,r17,65535
   8d014:	8820d43a 	srli	r16,r17,16
   8d018:	5009883a 	mov	r4,r10
   8d01c:	e00b883a 	mov	r5,fp
   8d020:	302ed43a 	srli	r23,r6,16
   8d024:	d8c00215 	stw	r3,8(sp)
   8d028:	da000415 	stw	r8,16(sp)
   8d02c:	da800115 	stw	r10,4(sp)
   8d030:	0081b340 	call	81b34 <__mulsi3>
   8d034:	800b883a 	mov	r5,r16
   8d038:	e009883a 	mov	r4,fp
   8d03c:	d8800515 	stw	r2,20(sp)
   8d040:	0081b340 	call	81b34 <__mulsi3>
   8d044:	8009883a 	mov	r4,r16
   8d048:	b80b883a 	mov	r5,r23
   8d04c:	d8800315 	stw	r2,12(sp)
   8d050:	0081b340 	call	81b34 <__mulsi3>
   8d054:	da800117 	ldw	r10,4(sp)
   8d058:	b80b883a 	mov	r5,r23
   8d05c:	1021883a 	mov	r16,r2
   8d060:	5009883a 	mov	r4,r10
   8d064:	0081b340 	call	81b34 <__mulsi3>
   8d068:	d9c00517 	ldw	r7,20(sp)
   8d06c:	da400317 	ldw	r9,12(sp)
   8d070:	d8c00217 	ldw	r3,8(sp)
   8d074:	3808d43a 	srli	r4,r7,16
   8d078:	1245883a 	add	r2,r2,r9
   8d07c:	da000417 	ldw	r8,16(sp)
   8d080:	2085883a 	add	r2,r4,r2
   8d084:	1240022e 	bgeu	r2,r9,8d090 <__divdf3+0x4b8>
   8d088:	01000074 	movhi	r4,1
   8d08c:	8121883a 	add	r16,r16,r4
   8d090:	1008d43a 	srli	r4,r2,16
   8d094:	1004943a 	slli	r2,r2,16
   8d098:	39ffffcc 	andi	r7,r7,65535
   8d09c:	2409883a 	add	r4,r4,r16
   8d0a0:	11c5883a 	add	r2,r2,r7
   8d0a4:	4100bb36 	bltu	r8,r4,8d394 <__divdf3+0x7bc>
   8d0a8:	4100d726 	beq	r8,r4,8d408 <__divdf3+0x830>
   8d0ac:	4109c83a 	sub	r4,r8,r4
   8d0b0:	a8a1c83a 	sub	r16,r21,r2
   8d0b4:	ac2b803a 	cmpltu	r21,r21,r16
   8d0b8:	256bc83a 	sub	r21,r4,r21
   8d0bc:	b540d926 	beq	r22,r21,8d424 <__divdf3+0x84c>
   8d0c0:	a00b883a 	mov	r5,r20
   8d0c4:	a809883a 	mov	r4,r21
   8d0c8:	d8c00215 	stw	r3,8(sp)
   8d0cc:	0081a780 	call	81a78 <__udivsi3>
   8d0d0:	100b883a 	mov	r5,r2
   8d0d4:	9009883a 	mov	r4,r18
   8d0d8:	d8800515 	stw	r2,20(sp)
   8d0dc:	0081b340 	call	81b34 <__mulsi3>
   8d0e0:	a809883a 	mov	r4,r21
   8d0e4:	a00b883a 	mov	r5,r20
   8d0e8:	d8800415 	stw	r2,16(sp)
   8d0ec:	0081adc0 	call	81adc <__umodsi3>
   8d0f0:	1004943a 	slli	r2,r2,16
   8d0f4:	8008d43a 	srli	r4,r16,16
   8d0f8:	da000417 	ldw	r8,16(sp)
   8d0fc:	d8c00217 	ldw	r3,8(sp)
   8d100:	2084b03a 	or	r2,r4,r2
   8d104:	d9c00517 	ldw	r7,20(sp)
   8d108:	1200062e 	bgeu	r2,r8,8d124 <__divdf3+0x54c>
   8d10c:	1585883a 	add	r2,r2,r22
   8d110:	393fffc4 	addi	r4,r7,-1
   8d114:	1580c536 	bltu	r2,r22,8d42c <__divdf3+0x854>
   8d118:	1200c42e 	bgeu	r2,r8,8d42c <__divdf3+0x854>
   8d11c:	39ffff84 	addi	r7,r7,-2
   8d120:	1585883a 	add	r2,r2,r22
   8d124:	122bc83a 	sub	r21,r2,r8
   8d128:	a00b883a 	mov	r5,r20
   8d12c:	a809883a 	mov	r4,r21
   8d130:	d8c00215 	stw	r3,8(sp)
   8d134:	d9c00515 	stw	r7,20(sp)
   8d138:	0081a780 	call	81a78 <__udivsi3>
   8d13c:	9009883a 	mov	r4,r18
   8d140:	100b883a 	mov	r5,r2
   8d144:	d8800415 	stw	r2,16(sp)
   8d148:	0081b340 	call	81b34 <__mulsi3>
   8d14c:	a809883a 	mov	r4,r21
   8d150:	a00b883a 	mov	r5,r20
   8d154:	1025883a 	mov	r18,r2
   8d158:	0081adc0 	call	81adc <__umodsi3>
   8d15c:	1004943a 	slli	r2,r2,16
   8d160:	813fffcc 	andi	r4,r16,65535
   8d164:	d8c00217 	ldw	r3,8(sp)
   8d168:	20a0b03a 	or	r16,r4,r2
   8d16c:	d9c00517 	ldw	r7,20(sp)
   8d170:	da000417 	ldw	r8,16(sp)
   8d174:	8480062e 	bgeu	r16,r18,8d190 <__divdf3+0x5b8>
   8d178:	85a1883a 	add	r16,r16,r22
   8d17c:	40bfffc4 	addi	r2,r8,-1
   8d180:	8580ac36 	bltu	r16,r22,8d434 <__divdf3+0x85c>
   8d184:	8480ab2e 	bgeu	r16,r18,8d434 <__divdf3+0x85c>
   8d188:	423fff84 	addi	r8,r8,-2
   8d18c:	85a1883a 	add	r16,r16,r22
   8d190:	3804943a 	slli	r2,r7,16
   8d194:	84a1c83a 	sub	r16,r16,r18
   8d198:	e009883a 	mov	r4,fp
   8d19c:	1228b03a 	or	r20,r2,r8
   8d1a0:	a1ffffcc 	andi	r7,r20,65535
   8d1a4:	a024d43a 	srli	r18,r20,16
   8d1a8:	380b883a 	mov	r5,r7
   8d1ac:	d8c00215 	stw	r3,8(sp)
   8d1b0:	d9c00515 	stw	r7,20(sp)
   8d1b4:	0081b340 	call	81b34 <__mulsi3>
   8d1b8:	900b883a 	mov	r5,r18
   8d1bc:	e009883a 	mov	r4,fp
   8d1c0:	102b883a 	mov	r21,r2
   8d1c4:	0081b340 	call	81b34 <__mulsi3>
   8d1c8:	900b883a 	mov	r5,r18
   8d1cc:	b809883a 	mov	r4,r23
   8d1d0:	1039883a 	mov	fp,r2
   8d1d4:	0081b340 	call	81b34 <__mulsi3>
   8d1d8:	d9c00517 	ldw	r7,20(sp)
   8d1dc:	b80b883a 	mov	r5,r23
   8d1e0:	1025883a 	mov	r18,r2
   8d1e4:	3809883a 	mov	r4,r7
   8d1e8:	0081b340 	call	81b34 <__mulsi3>
   8d1ec:	a808d43a 	srli	r4,r21,16
   8d1f0:	1705883a 	add	r2,r2,fp
   8d1f4:	d8c00217 	ldw	r3,8(sp)
   8d1f8:	2085883a 	add	r2,r4,r2
   8d1fc:	1700022e 	bgeu	r2,fp,8d208 <__divdf3+0x630>
   8d200:	01000074 	movhi	r4,1
   8d204:	9125883a 	add	r18,r18,r4
   8d208:	1008d43a 	srli	r4,r2,16
   8d20c:	1004943a 	slli	r2,r2,16
   8d210:	ad7fffcc 	andi	r21,r21,65535
   8d214:	2489883a 	add	r4,r4,r18
   8d218:	1545883a 	add	r2,r2,r21
   8d21c:	81003836 	bltu	r16,r4,8d300 <__divdf3+0x728>
   8d220:	81003626 	beq	r16,r4,8d2fc <__divdf3+0x724>
   8d224:	a5000054 	ori	r20,r20,1
   8d228:	1880ffc4 	addi	r2,r3,1023
   8d22c:	00bf2e0e 	bge	zero,r2,8cee8 <__alt_data_end+0xfffacee8>
   8d230:	a10001cc 	andi	r4,r20,7
   8d234:	20000726 	beq	r4,zero,8d254 <__divdf3+0x67c>
   8d238:	a10003cc 	andi	r4,r20,15
   8d23c:	01400104 	movi	r5,4
   8d240:	21400426 	beq	r4,r5,8d254 <__divdf3+0x67c>
   8d244:	a149883a 	add	r4,r20,r5
   8d248:	2529803a 	cmpltu	r20,r4,r20
   8d24c:	8d23883a 	add	r17,r17,r20
   8d250:	2029883a 	mov	r20,r4
   8d254:	8900402c 	andhi	r4,r17,256
   8d258:	20000426 	beq	r4,zero,8d26c <__divdf3+0x694>
   8d25c:	18810004 	addi	r2,r3,1024
   8d260:	00ffc034 	movhi	r3,65280
   8d264:	18ffffc4 	addi	r3,r3,-1
   8d268:	88e2703a 	and	r17,r17,r3
   8d26c:	00c1ff84 	movi	r3,2046
   8d270:	18beb416 	blt	r3,r2,8cd44 <__alt_data_end+0xfffacd44>
   8d274:	a028d0fa 	srli	r20,r20,3
   8d278:	882a977a 	slli	r21,r17,29
   8d27c:	8820927a 	slli	r16,r17,9
   8d280:	1081ffcc 	andi	r2,r2,2047
   8d284:	ad2ab03a 	or	r21,r21,r20
   8d288:	8020d33a 	srli	r16,r16,12
   8d28c:	9900004c 	andi	r4,r19,1
   8d290:	003eb006 	br	8cd54 <__alt_data_end+0xfffacd54>
   8d294:	8080022c 	andhi	r2,r16,8
   8d298:	10001226 	beq	r2,zero,8d2e4 <__divdf3+0x70c>
   8d29c:	8880022c 	andhi	r2,r17,8
   8d2a0:	1000101e 	bne	r2,zero,8d2e4 <__divdf3+0x70c>
   8d2a4:	00800434 	movhi	r2,16
   8d2a8:	8c000234 	orhi	r16,r17,8
   8d2ac:	10bfffc4 	addi	r2,r2,-1
   8d2b0:	b809883a 	mov	r4,r23
   8d2b4:	80a0703a 	and	r16,r16,r2
   8d2b8:	a02b883a 	mov	r21,r20
   8d2bc:	003f0806 	br	8cee0 <__alt_data_end+0xfffacee0>
   8d2c0:	008000c4 	movi	r2,3
   8d2c4:	3880b126 	beq	r7,r2,8d58c <__divdf3+0x9b4>
   8d2c8:	00800044 	movi	r2,1
   8d2cc:	38805b1e 	bne	r7,r2,8d43c <__divdf3+0x864>
   8d2d0:	e009883a 	mov	r4,fp
   8d2d4:	0005883a 	mov	r2,zero
   8d2d8:	0021883a 	mov	r16,zero
   8d2dc:	002b883a 	mov	r21,zero
   8d2e0:	003e9c06 	br	8cd54 <__alt_data_end+0xfffacd54>
   8d2e4:	00800434 	movhi	r2,16
   8d2e8:	84000234 	orhi	r16,r16,8
   8d2ec:	10bfffc4 	addi	r2,r2,-1
   8d2f0:	b009883a 	mov	r4,r22
   8d2f4:	80a0703a 	and	r16,r16,r2
   8d2f8:	003ef906 	br	8cee0 <__alt_data_end+0xfffacee0>
   8d2fc:	103fca26 	beq	r2,zero,8d228 <__alt_data_end+0xfffad228>
   8d300:	b421883a 	add	r16,r22,r16
   8d304:	a17fffc4 	addi	r5,r20,-1
   8d308:	8580422e 	bgeu	r16,r22,8d414 <__divdf3+0x83c>
   8d30c:	2829883a 	mov	r20,r5
   8d310:	813fc41e 	bne	r16,r4,8d224 <__alt_data_end+0xfffad224>
   8d314:	d9800017 	ldw	r6,0(sp)
   8d318:	30bfc21e 	bne	r6,r2,8d224 <__alt_data_end+0xfffad224>
   8d31c:	003fc206 	br	8d228 <__alt_data_end+0xfffad228>
   8d320:	143ff604 	addi	r16,r2,-40
   8d324:	8c20983a 	sll	r16,r17,r16
   8d328:	002b883a 	mov	r21,zero
   8d32c:	003eb406 	br	8ce00 <__alt_data_end+0xffface00>
   8d330:	d9800215 	stw	r6,8(sp)
   8d334:	d9c00515 	stw	r7,20(sp)
   8d338:	da000415 	stw	r8,16(sp)
   8d33c:	008eb6c0 	call	8eb6c <__clzsi2>
   8d340:	10800804 	addi	r2,r2,32
   8d344:	da000417 	ldw	r8,16(sp)
   8d348:	d9c00517 	ldw	r7,20(sp)
   8d34c:	d9800217 	ldw	r6,8(sp)
   8d350:	003ea106 	br	8cdd8 <__alt_data_end+0xfffacdd8>
   8d354:	147ff604 	addi	r17,r2,-40
   8d358:	3462983a 	sll	r17,r6,r17
   8d35c:	0029883a 	mov	r20,zero
   8d360:	003ec906 	br	8ce88 <__alt_data_end+0xffface88>
   8d364:	3009883a 	mov	r4,r6
   8d368:	d9400115 	stw	r5,4(sp)
   8d36c:	d9800215 	stw	r6,8(sp)
   8d370:	da000415 	stw	r8,16(sp)
   8d374:	da400315 	stw	r9,12(sp)
   8d378:	008eb6c0 	call	8eb6c <__clzsi2>
   8d37c:	10800804 	addi	r2,r2,32
   8d380:	da400317 	ldw	r9,12(sp)
   8d384:	da000417 	ldw	r8,16(sp)
   8d388:	d9800217 	ldw	r6,8(sp)
   8d38c:	d9400117 	ldw	r5,4(sp)
   8d390:	003eb306 	br	8ce60 <__alt_data_end+0xffface60>
   8d394:	d9800017 	ldw	r6,0(sp)
   8d398:	a9ab883a 	add	r21,r21,r6
   8d39c:	a98b803a 	cmpltu	r5,r21,r6
   8d3a0:	2d8b883a 	add	r5,r5,r22
   8d3a4:	2a11883a 	add	r8,r5,r8
   8d3a8:	897fffc4 	addi	r5,r17,-1
   8d3ac:	b2000c2e 	bgeu	r22,r8,8d3e0 <__divdf3+0x808>
   8d3b0:	41003f36 	bltu	r8,r4,8d4b0 <__divdf3+0x8d8>
   8d3b4:	22006c26 	beq	r4,r8,8d568 <__divdf3+0x990>
   8d3b8:	4109c83a 	sub	r4,r8,r4
   8d3bc:	2823883a 	mov	r17,r5
   8d3c0:	003f3b06 	br	8d0b0 <__alt_data_end+0xfffad0b0>
   8d3c4:	ad3ed336 	bltu	r21,r20,8cf14 <__alt_data_end+0xfffacf14>
   8d3c8:	a804d07a 	srli	r2,r21,1
   8d3cc:	802e97fa 	slli	r23,r16,31
   8d3d0:	a82a97fa 	slli	r21,r21,31
   8d3d4:	8020d07a 	srli	r16,r16,1
   8d3d8:	b8aeb03a 	or	r23,r23,r2
   8d3dc:	003ed006 	br	8cf20 <__alt_data_end+0xfffacf20>
   8d3e0:	b23ff51e 	bne	r22,r8,8d3b8 <__alt_data_end+0xfffad3b8>
   8d3e4:	d9800017 	ldw	r6,0(sp)
   8d3e8:	a9bff12e 	bgeu	r21,r6,8d3b0 <__alt_data_end+0xfffad3b0>
   8d3ec:	b109c83a 	sub	r4,r22,r4
   8d3f0:	2823883a 	mov	r17,r5
   8d3f4:	003f2e06 	br	8d0b0 <__alt_data_end+0xfffad0b0>
   8d3f8:	2021883a 	mov	r16,r4
   8d3fc:	003eff06 	br	8cffc <__alt_data_end+0xfffacffc>
   8d400:	2023883a 	mov	r17,r4
   8d404:	003ee406 	br	8cf98 <__alt_data_end+0xfffacf98>
   8d408:	a8bfe236 	bltu	r21,r2,8d394 <__alt_data_end+0xfffad394>
   8d40c:	0009883a 	mov	r4,zero
   8d410:	003f2706 	br	8d0b0 <__alt_data_end+0xfffad0b0>
   8d414:	81002d36 	bltu	r16,r4,8d4cc <__divdf3+0x8f4>
   8d418:	24005626 	beq	r4,r16,8d574 <__divdf3+0x99c>
   8d41c:	2829883a 	mov	r20,r5
   8d420:	003f8006 	br	8d224 <__alt_data_end+0xfffad224>
   8d424:	053fffc4 	movi	r20,-1
   8d428:	003f7f06 	br	8d228 <__alt_data_end+0xfffad228>
   8d42c:	200f883a 	mov	r7,r4
   8d430:	003f3c06 	br	8d124 <__alt_data_end+0xfffad124>
   8d434:	1011883a 	mov	r8,r2
   8d438:	003f5506 	br	8d190 <__alt_data_end+0xfffad190>
   8d43c:	e027883a 	mov	r19,fp
   8d440:	003f7906 	br	8d228 <__alt_data_end+0xfffad228>
   8d444:	010007c4 	movi	r4,31
   8d448:	20c02816 	blt	r4,r3,8d4ec <__divdf3+0x914>
   8d44c:	00800804 	movi	r2,32
   8d450:	10c5c83a 	sub	r2,r2,r3
   8d454:	888a983a 	sll	r5,r17,r2
   8d458:	a0c8d83a 	srl	r4,r20,r3
   8d45c:	a084983a 	sll	r2,r20,r2
   8d460:	88e2d83a 	srl	r17,r17,r3
   8d464:	2906b03a 	or	r3,r5,r4
   8d468:	1004c03a 	cmpne	r2,r2,zero
   8d46c:	1886b03a 	or	r3,r3,r2
   8d470:	188001cc 	andi	r2,r3,7
   8d474:	10000726 	beq	r2,zero,8d494 <__divdf3+0x8bc>
   8d478:	188003cc 	andi	r2,r3,15
   8d47c:	01000104 	movi	r4,4
   8d480:	11000426 	beq	r2,r4,8d494 <__divdf3+0x8bc>
   8d484:	1805883a 	mov	r2,r3
   8d488:	10c00104 	addi	r3,r2,4
   8d48c:	1885803a 	cmpltu	r2,r3,r2
   8d490:	88a3883a 	add	r17,r17,r2
   8d494:	8880202c 	andhi	r2,r17,128
   8d498:	10002926 	beq	r2,zero,8d540 <__divdf3+0x968>
   8d49c:	9900004c 	andi	r4,r19,1
   8d4a0:	00800044 	movi	r2,1
   8d4a4:	0021883a 	mov	r16,zero
   8d4a8:	002b883a 	mov	r21,zero
   8d4ac:	003e2906 	br	8cd54 <__alt_data_end+0xfffacd54>
   8d4b0:	d9800017 	ldw	r6,0(sp)
   8d4b4:	8c7fff84 	addi	r17,r17,-2
   8d4b8:	a9ab883a 	add	r21,r21,r6
   8d4bc:	a98b803a 	cmpltu	r5,r21,r6
   8d4c0:	2d8b883a 	add	r5,r5,r22
   8d4c4:	2a11883a 	add	r8,r5,r8
   8d4c8:	003ef806 	br	8d0ac <__alt_data_end+0xfffad0ac>
   8d4cc:	d9800017 	ldw	r6,0(sp)
   8d4d0:	318f883a 	add	r7,r6,r6
   8d4d4:	398b803a 	cmpltu	r5,r7,r6
   8d4d8:	2d8d883a 	add	r6,r5,r22
   8d4dc:	81a1883a 	add	r16,r16,r6
   8d4e0:	a17fff84 	addi	r5,r20,-2
   8d4e4:	d9c00015 	stw	r7,0(sp)
   8d4e8:	003f8806 	br	8d30c <__alt_data_end+0xfffad30c>
   8d4ec:	013ff844 	movi	r4,-31
   8d4f0:	2085c83a 	sub	r2,r4,r2
   8d4f4:	8888d83a 	srl	r4,r17,r2
   8d4f8:	00800804 	movi	r2,32
   8d4fc:	18802126 	beq	r3,r2,8d584 <__divdf3+0x9ac>
   8d500:	04001004 	movi	r16,64
   8d504:	80c7c83a 	sub	r3,r16,r3
   8d508:	88e0983a 	sll	r16,r17,r3
   8d50c:	8504b03a 	or	r2,r16,r20
   8d510:	1004c03a 	cmpne	r2,r2,zero
   8d514:	2084b03a 	or	r2,r4,r2
   8d518:	144001cc 	andi	r17,r2,7
   8d51c:	88000d1e 	bne	r17,zero,8d554 <__divdf3+0x97c>
   8d520:	0021883a 	mov	r16,zero
   8d524:	102ad0fa 	srli	r21,r2,3
   8d528:	9900004c 	andi	r4,r19,1
   8d52c:	0005883a 	mov	r2,zero
   8d530:	ac6ab03a 	or	r21,r21,r17
   8d534:	003e0706 	br	8cd54 <__alt_data_end+0xfffacd54>
   8d538:	1007883a 	mov	r3,r2
   8d53c:	0023883a 	mov	r17,zero
   8d540:	8820927a 	slli	r16,r17,9
   8d544:	1805883a 	mov	r2,r3
   8d548:	8822977a 	slli	r17,r17,29
   8d54c:	8020d33a 	srli	r16,r16,12
   8d550:	003ff406 	br	8d524 <__alt_data_end+0xfffad524>
   8d554:	10c003cc 	andi	r3,r2,15
   8d558:	01000104 	movi	r4,4
   8d55c:	193ff626 	beq	r3,r4,8d538 <__alt_data_end+0xfffad538>
   8d560:	0023883a 	mov	r17,zero
   8d564:	003fc806 	br	8d488 <__alt_data_end+0xfffad488>
   8d568:	a8bfd136 	bltu	r21,r2,8d4b0 <__alt_data_end+0xfffad4b0>
   8d56c:	2823883a 	mov	r17,r5
   8d570:	003fa606 	br	8d40c <__alt_data_end+0xfffad40c>
   8d574:	d9800017 	ldw	r6,0(sp)
   8d578:	30bfd436 	bltu	r6,r2,8d4cc <__alt_data_end+0xfffad4cc>
   8d57c:	2829883a 	mov	r20,r5
   8d580:	003f6406 	br	8d314 <__alt_data_end+0xfffad314>
   8d584:	0021883a 	mov	r16,zero
   8d588:	003fe006 	br	8d50c <__alt_data_end+0xfffad50c>
   8d58c:	00800434 	movhi	r2,16
   8d590:	8c000234 	orhi	r16,r17,8
   8d594:	10bfffc4 	addi	r2,r2,-1
   8d598:	e009883a 	mov	r4,fp
   8d59c:	80a0703a 	and	r16,r16,r2
   8d5a0:	a02b883a 	mov	r21,r20
   8d5a4:	003e4e06 	br	8cee0 <__alt_data_end+0xfffacee0>

0008d5a8 <__eqdf2>:
   8d5a8:	2804d53a 	srli	r2,r5,20
   8d5ac:	3806d53a 	srli	r3,r7,20
   8d5b0:	02000434 	movhi	r8,16
   8d5b4:	423fffc4 	addi	r8,r8,-1
   8d5b8:	1081ffcc 	andi	r2,r2,2047
   8d5bc:	0281ffc4 	movi	r10,2047
   8d5c0:	2a12703a 	and	r9,r5,r8
   8d5c4:	18c1ffcc 	andi	r3,r3,2047
   8d5c8:	3a10703a 	and	r8,r7,r8
   8d5cc:	280ad7fa 	srli	r5,r5,31
   8d5d0:	380ed7fa 	srli	r7,r7,31
   8d5d4:	12801026 	beq	r2,r10,8d618 <__eqdf2+0x70>
   8d5d8:	0281ffc4 	movi	r10,2047
   8d5dc:	1a800a26 	beq	r3,r10,8d608 <__eqdf2+0x60>
   8d5e0:	10c00226 	beq	r2,r3,8d5ec <__eqdf2+0x44>
   8d5e4:	00800044 	movi	r2,1
   8d5e8:	f800283a 	ret
   8d5ec:	4a3ffd1e 	bne	r9,r8,8d5e4 <__alt_data_end+0xfffad5e4>
   8d5f0:	21bffc1e 	bne	r4,r6,8d5e4 <__alt_data_end+0xfffad5e4>
   8d5f4:	29c00c26 	beq	r5,r7,8d628 <__eqdf2+0x80>
   8d5f8:	103ffa1e 	bne	r2,zero,8d5e4 <__alt_data_end+0xfffad5e4>
   8d5fc:	2244b03a 	or	r2,r4,r9
   8d600:	1004c03a 	cmpne	r2,r2,zero
   8d604:	f800283a 	ret
   8d608:	3214b03a 	or	r10,r6,r8
   8d60c:	503ff426 	beq	r10,zero,8d5e0 <__alt_data_end+0xfffad5e0>
   8d610:	00800044 	movi	r2,1
   8d614:	f800283a 	ret
   8d618:	2254b03a 	or	r10,r4,r9
   8d61c:	503fee26 	beq	r10,zero,8d5d8 <__alt_data_end+0xfffad5d8>
   8d620:	00800044 	movi	r2,1
   8d624:	f800283a 	ret
   8d628:	0005883a 	mov	r2,zero
   8d62c:	f800283a 	ret

0008d630 <__gedf2>:
   8d630:	2804d53a 	srli	r2,r5,20
   8d634:	3806d53a 	srli	r3,r7,20
   8d638:	02000434 	movhi	r8,16
   8d63c:	423fffc4 	addi	r8,r8,-1
   8d640:	1081ffcc 	andi	r2,r2,2047
   8d644:	0241ffc4 	movi	r9,2047
   8d648:	2a14703a 	and	r10,r5,r8
   8d64c:	18c1ffcc 	andi	r3,r3,2047
   8d650:	3a10703a 	and	r8,r7,r8
   8d654:	280ad7fa 	srli	r5,r5,31
   8d658:	380ed7fa 	srli	r7,r7,31
   8d65c:	12401d26 	beq	r2,r9,8d6d4 <__gedf2+0xa4>
   8d660:	0241ffc4 	movi	r9,2047
   8d664:	1a401226 	beq	r3,r9,8d6b0 <__gedf2+0x80>
   8d668:	1000081e 	bne	r2,zero,8d68c <__gedf2+0x5c>
   8d66c:	2296b03a 	or	r11,r4,r10
   8d670:	5813003a 	cmpeq	r9,r11,zero
   8d674:	1800091e 	bne	r3,zero,8d69c <__gedf2+0x6c>
   8d678:	3218b03a 	or	r12,r6,r8
   8d67c:	6000071e 	bne	r12,zero,8d69c <__gedf2+0x6c>
   8d680:	0005883a 	mov	r2,zero
   8d684:	5800101e 	bne	r11,zero,8d6c8 <__gedf2+0x98>
   8d688:	f800283a 	ret
   8d68c:	18000c1e 	bne	r3,zero,8d6c0 <__gedf2+0x90>
   8d690:	3212b03a 	or	r9,r6,r8
   8d694:	48000c26 	beq	r9,zero,8d6c8 <__gedf2+0x98>
   8d698:	0013883a 	mov	r9,zero
   8d69c:	39c03fcc 	andi	r7,r7,255
   8d6a0:	48000826 	beq	r9,zero,8d6c4 <__gedf2+0x94>
   8d6a4:	38000926 	beq	r7,zero,8d6cc <__gedf2+0x9c>
   8d6a8:	00800044 	movi	r2,1
   8d6ac:	f800283a 	ret
   8d6b0:	3212b03a 	or	r9,r6,r8
   8d6b4:	483fec26 	beq	r9,zero,8d668 <__alt_data_end+0xfffad668>
   8d6b8:	00bfff84 	movi	r2,-2
   8d6bc:	f800283a 	ret
   8d6c0:	39c03fcc 	andi	r7,r7,255
   8d6c4:	29c00626 	beq	r5,r7,8d6e0 <__gedf2+0xb0>
   8d6c8:	283ff726 	beq	r5,zero,8d6a8 <__alt_data_end+0xfffad6a8>
   8d6cc:	00bfffc4 	movi	r2,-1
   8d6d0:	f800283a 	ret
   8d6d4:	2292b03a 	or	r9,r4,r10
   8d6d8:	483fe126 	beq	r9,zero,8d660 <__alt_data_end+0xfffad660>
   8d6dc:	003ff606 	br	8d6b8 <__alt_data_end+0xfffad6b8>
   8d6e0:	18bff916 	blt	r3,r2,8d6c8 <__alt_data_end+0xfffad6c8>
   8d6e4:	10c00316 	blt	r2,r3,8d6f4 <__gedf2+0xc4>
   8d6e8:	42bff736 	bltu	r8,r10,8d6c8 <__alt_data_end+0xfffad6c8>
   8d6ec:	52000326 	beq	r10,r8,8d6fc <__gedf2+0xcc>
   8d6f0:	5200042e 	bgeu	r10,r8,8d704 <__gedf2+0xd4>
   8d6f4:	283fec1e 	bne	r5,zero,8d6a8 <__alt_data_end+0xfffad6a8>
   8d6f8:	003ff406 	br	8d6cc <__alt_data_end+0xfffad6cc>
   8d6fc:	313ff236 	bltu	r6,r4,8d6c8 <__alt_data_end+0xfffad6c8>
   8d700:	21bffc36 	bltu	r4,r6,8d6f4 <__alt_data_end+0xfffad6f4>
   8d704:	0005883a 	mov	r2,zero
   8d708:	f800283a 	ret

0008d70c <__ledf2>:
   8d70c:	2804d53a 	srli	r2,r5,20
   8d710:	3810d53a 	srli	r8,r7,20
   8d714:	00c00434 	movhi	r3,16
   8d718:	18ffffc4 	addi	r3,r3,-1
   8d71c:	1081ffcc 	andi	r2,r2,2047
   8d720:	0241ffc4 	movi	r9,2047
   8d724:	28d4703a 	and	r10,r5,r3
   8d728:	4201ffcc 	andi	r8,r8,2047
   8d72c:	38c6703a 	and	r3,r7,r3
   8d730:	280ad7fa 	srli	r5,r5,31
   8d734:	380ed7fa 	srli	r7,r7,31
   8d738:	12401f26 	beq	r2,r9,8d7b8 <__ledf2+0xac>
   8d73c:	0241ffc4 	movi	r9,2047
   8d740:	42401426 	beq	r8,r9,8d794 <__ledf2+0x88>
   8d744:	1000091e 	bne	r2,zero,8d76c <__ledf2+0x60>
   8d748:	2296b03a 	or	r11,r4,r10
   8d74c:	5813003a 	cmpeq	r9,r11,zero
   8d750:	29403fcc 	andi	r5,r5,255
   8d754:	40000a1e 	bne	r8,zero,8d780 <__ledf2+0x74>
   8d758:	30d8b03a 	or	r12,r6,r3
   8d75c:	6000081e 	bne	r12,zero,8d780 <__ledf2+0x74>
   8d760:	0005883a 	mov	r2,zero
   8d764:	5800111e 	bne	r11,zero,8d7ac <__ledf2+0xa0>
   8d768:	f800283a 	ret
   8d76c:	29403fcc 	andi	r5,r5,255
   8d770:	40000c1e 	bne	r8,zero,8d7a4 <__ledf2+0x98>
   8d774:	30d2b03a 	or	r9,r6,r3
   8d778:	48000c26 	beq	r9,zero,8d7ac <__ledf2+0xa0>
   8d77c:	0013883a 	mov	r9,zero
   8d780:	39c03fcc 	andi	r7,r7,255
   8d784:	48000826 	beq	r9,zero,8d7a8 <__ledf2+0x9c>
   8d788:	38001126 	beq	r7,zero,8d7d0 <__ledf2+0xc4>
   8d78c:	00800044 	movi	r2,1
   8d790:	f800283a 	ret
   8d794:	30d2b03a 	or	r9,r6,r3
   8d798:	483fea26 	beq	r9,zero,8d744 <__alt_data_end+0xfffad744>
   8d79c:	00800084 	movi	r2,2
   8d7a0:	f800283a 	ret
   8d7a4:	39c03fcc 	andi	r7,r7,255
   8d7a8:	39400726 	beq	r7,r5,8d7c8 <__ledf2+0xbc>
   8d7ac:	2800081e 	bne	r5,zero,8d7d0 <__ledf2+0xc4>
   8d7b0:	00800044 	movi	r2,1
   8d7b4:	f800283a 	ret
   8d7b8:	2292b03a 	or	r9,r4,r10
   8d7bc:	483fdf26 	beq	r9,zero,8d73c <__alt_data_end+0xfffad73c>
   8d7c0:	00800084 	movi	r2,2
   8d7c4:	f800283a 	ret
   8d7c8:	4080030e 	bge	r8,r2,8d7d8 <__ledf2+0xcc>
   8d7cc:	383fef26 	beq	r7,zero,8d78c <__alt_data_end+0xfffad78c>
   8d7d0:	00bfffc4 	movi	r2,-1
   8d7d4:	f800283a 	ret
   8d7d8:	123feb16 	blt	r2,r8,8d788 <__alt_data_end+0xfffad788>
   8d7dc:	1abff336 	bltu	r3,r10,8d7ac <__alt_data_end+0xfffad7ac>
   8d7e0:	50c00326 	beq	r10,r3,8d7f0 <__ledf2+0xe4>
   8d7e4:	50c0042e 	bgeu	r10,r3,8d7f8 <__ledf2+0xec>
   8d7e8:	283fe81e 	bne	r5,zero,8d78c <__alt_data_end+0xfffad78c>
   8d7ec:	003ff806 	br	8d7d0 <__alt_data_end+0xfffad7d0>
   8d7f0:	313fee36 	bltu	r6,r4,8d7ac <__alt_data_end+0xfffad7ac>
   8d7f4:	21bffc36 	bltu	r4,r6,8d7e8 <__alt_data_end+0xfffad7e8>
   8d7f8:	0005883a 	mov	r2,zero
   8d7fc:	f800283a 	ret

0008d800 <__muldf3>:
   8d800:	deffee04 	addi	sp,sp,-72
   8d804:	dd000c15 	stw	r20,48(sp)
   8d808:	2828d53a 	srli	r20,r5,20
   8d80c:	ddc00f15 	stw	r23,60(sp)
   8d810:	282ed7fa 	srli	r23,r5,31
   8d814:	dc000815 	stw	r16,32(sp)
   8d818:	04000434 	movhi	r16,16
   8d81c:	dcc00b15 	stw	r19,44(sp)
   8d820:	843fffc4 	addi	r16,r16,-1
   8d824:	dfc01115 	stw	ra,68(sp)
   8d828:	df001015 	stw	fp,64(sp)
   8d82c:	dd800e15 	stw	r22,56(sp)
   8d830:	dd400d15 	stw	r21,52(sp)
   8d834:	dc800a15 	stw	r18,40(sp)
   8d838:	dc400915 	stw	r17,36(sp)
   8d83c:	a501ffcc 	andi	r20,r20,2047
   8d840:	2c20703a 	and	r16,r5,r16
   8d844:	b827883a 	mov	r19,r23
   8d848:	ba403fcc 	andi	r9,r23,255
   8d84c:	a0006026 	beq	r20,zero,8d9d0 <__muldf3+0x1d0>
   8d850:	0081ffc4 	movi	r2,2047
   8d854:	202d883a 	mov	r22,r4
   8d858:	a0803626 	beq	r20,r2,8d934 <__muldf3+0x134>
   8d85c:	84000434 	orhi	r16,r16,16
   8d860:	200ad77a 	srli	r5,r4,29
   8d864:	800490fa 	slli	r2,r16,3
   8d868:	202c90fa 	slli	r22,r4,3
   8d86c:	a53f0044 	addi	r20,r20,-1023
   8d870:	28a0b03a 	or	r16,r5,r2
   8d874:	002b883a 	mov	r21,zero
   8d878:	000b883a 	mov	r5,zero
   8d87c:	3804d53a 	srli	r2,r7,20
   8d880:	3838d7fa 	srli	fp,r7,31
   8d884:	04400434 	movhi	r17,16
   8d888:	8c7fffc4 	addi	r17,r17,-1
   8d88c:	1081ffcc 	andi	r2,r2,2047
   8d890:	3025883a 	mov	r18,r6
   8d894:	3c62703a 	and	r17,r7,r17
   8d898:	e2803fcc 	andi	r10,fp,255
   8d89c:	10006d26 	beq	r2,zero,8da54 <__muldf3+0x254>
   8d8a0:	00c1ffc4 	movi	r3,2047
   8d8a4:	10c06526 	beq	r2,r3,8da3c <__muldf3+0x23c>
   8d8a8:	8c400434 	orhi	r17,r17,16
   8d8ac:	300ed77a 	srli	r7,r6,29
   8d8b0:	880690fa 	slli	r3,r17,3
   8d8b4:	302490fa 	slli	r18,r6,3
   8d8b8:	10bf0044 	addi	r2,r2,-1023
   8d8bc:	38e2b03a 	or	r17,r7,r3
   8d8c0:	000f883a 	mov	r7,zero
   8d8c4:	a087883a 	add	r3,r20,r2
   8d8c8:	010003c4 	movi	r4,15
   8d8cc:	3d44b03a 	or	r2,r7,r21
   8d8d0:	e5ccf03a 	xor	r6,fp,r23
   8d8d4:	1a000044 	addi	r8,r3,1
   8d8d8:	20809b36 	bltu	r4,r2,8db48 <__muldf3+0x348>
   8d8dc:	100490ba 	slli	r2,r2,2
   8d8e0:	01000274 	movhi	r4,9
   8d8e4:	21363d04 	addi	r4,r4,-9996
   8d8e8:	1105883a 	add	r2,r2,r4
   8d8ec:	10800017 	ldw	r2,0(r2)
   8d8f0:	1000683a 	jmp	r2
   8d8f4:	0008db48 	cmpgei	zero,zero,9069
   8d8f8:	0008d954 	movui	zero,9061
   8d8fc:	0008d954 	movui	zero,9061
   8d900:	0008d950 	cmplti	zero,zero,9061
   8d904:	0008db24 	muli	zero,zero,9068
   8d908:	0008db24 	muli	zero,zero,9068
   8d90c:	0008db0c 	andi	zero,zero,9068
   8d910:	0008d950 	cmplti	zero,zero,9061
   8d914:	0008db24 	muli	zero,zero,9068
   8d918:	0008db0c 	andi	zero,zero,9068
   8d91c:	0008db24 	muli	zero,zero,9068
   8d920:	0008d950 	cmplti	zero,zero,9061
   8d924:	0008db34 	movhi	zero,9068
   8d928:	0008db34 	movhi	zero,9068
   8d92c:	0008db34 	movhi	zero,9068
   8d930:	0008de94 	movui	zero,9082
   8d934:	2404b03a 	or	r2,r4,r16
   8d938:	1000711e 	bne	r2,zero,8db00 <__muldf3+0x300>
   8d93c:	05400204 	movi	r21,8
   8d940:	0021883a 	mov	r16,zero
   8d944:	002d883a 	mov	r22,zero
   8d948:	01400084 	movi	r5,2
   8d94c:	003fcb06 	br	8d87c <__alt_data_end+0xfffad87c>
   8d950:	500d883a 	mov	r6,r10
   8d954:	00800084 	movi	r2,2
   8d958:	38805926 	beq	r7,r2,8dac0 <__muldf3+0x2c0>
   8d95c:	008000c4 	movi	r2,3
   8d960:	3881bb26 	beq	r7,r2,8e050 <__muldf3+0x850>
   8d964:	00800044 	movi	r2,1
   8d968:	3881961e 	bne	r7,r2,8dfc4 <__muldf3+0x7c4>
   8d96c:	3027883a 	mov	r19,r6
   8d970:	0005883a 	mov	r2,zero
   8d974:	0021883a 	mov	r16,zero
   8d978:	002d883a 	mov	r22,zero
   8d97c:	1004953a 	slli	r2,r2,20
   8d980:	98c03fcc 	andi	r3,r19,255
   8d984:	04400434 	movhi	r17,16
   8d988:	8c7fffc4 	addi	r17,r17,-1
   8d98c:	180697fa 	slli	r3,r3,31
   8d990:	8460703a 	and	r16,r16,r17
   8d994:	80a0b03a 	or	r16,r16,r2
   8d998:	80c6b03a 	or	r3,r16,r3
   8d99c:	b005883a 	mov	r2,r22
   8d9a0:	dfc01117 	ldw	ra,68(sp)
   8d9a4:	df001017 	ldw	fp,64(sp)
   8d9a8:	ddc00f17 	ldw	r23,60(sp)
   8d9ac:	dd800e17 	ldw	r22,56(sp)
   8d9b0:	dd400d17 	ldw	r21,52(sp)
   8d9b4:	dd000c17 	ldw	r20,48(sp)
   8d9b8:	dcc00b17 	ldw	r19,44(sp)
   8d9bc:	dc800a17 	ldw	r18,40(sp)
   8d9c0:	dc400917 	ldw	r17,36(sp)
   8d9c4:	dc000817 	ldw	r16,32(sp)
   8d9c8:	dec01204 	addi	sp,sp,72
   8d9cc:	f800283a 	ret
   8d9d0:	2404b03a 	or	r2,r4,r16
   8d9d4:	202b883a 	mov	r21,r4
   8d9d8:	10004426 	beq	r2,zero,8daec <__muldf3+0x2ec>
   8d9dc:	80015126 	beq	r16,zero,8df24 <__muldf3+0x724>
   8d9e0:	8009883a 	mov	r4,r16
   8d9e4:	d9800715 	stw	r6,28(sp)
   8d9e8:	d9c00215 	stw	r7,8(sp)
   8d9ec:	da400415 	stw	r9,16(sp)
   8d9f0:	008eb6c0 	call	8eb6c <__clzsi2>
   8d9f4:	d9800717 	ldw	r6,28(sp)
   8d9f8:	d9c00217 	ldw	r7,8(sp)
   8d9fc:	da400417 	ldw	r9,16(sp)
   8da00:	113ffd44 	addi	r4,r2,-11
   8da04:	00c00704 	movi	r3,28
   8da08:	19014216 	blt	r3,r4,8df14 <__muldf3+0x714>
   8da0c:	00c00744 	movi	r3,29
   8da10:	15bffe04 	addi	r22,r2,-8
   8da14:	1907c83a 	sub	r3,r3,r4
   8da18:	85a0983a 	sll	r16,r16,r22
   8da1c:	a8c6d83a 	srl	r3,r21,r3
   8da20:	adac983a 	sll	r22,r21,r22
   8da24:	1c20b03a 	or	r16,r3,r16
   8da28:	1080fcc4 	addi	r2,r2,1011
   8da2c:	00a9c83a 	sub	r20,zero,r2
   8da30:	002b883a 	mov	r21,zero
   8da34:	000b883a 	mov	r5,zero
   8da38:	003f9006 	br	8d87c <__alt_data_end+0xfffad87c>
   8da3c:	3446b03a 	or	r3,r6,r17
   8da40:	1800281e 	bne	r3,zero,8dae4 <__muldf3+0x2e4>
   8da44:	0023883a 	mov	r17,zero
   8da48:	0025883a 	mov	r18,zero
   8da4c:	01c00084 	movi	r7,2
   8da50:	003f9c06 	br	8d8c4 <__alt_data_end+0xfffad8c4>
   8da54:	3446b03a 	or	r3,r6,r17
   8da58:	18001e26 	beq	r3,zero,8dad4 <__muldf3+0x2d4>
   8da5c:	88012126 	beq	r17,zero,8dee4 <__muldf3+0x6e4>
   8da60:	8809883a 	mov	r4,r17
   8da64:	d9400215 	stw	r5,8(sp)
   8da68:	d9800715 	stw	r6,28(sp)
   8da6c:	da400415 	stw	r9,16(sp)
   8da70:	da800315 	stw	r10,12(sp)
   8da74:	008eb6c0 	call	8eb6c <__clzsi2>
   8da78:	d9400217 	ldw	r5,8(sp)
   8da7c:	d9800717 	ldw	r6,28(sp)
   8da80:	da400417 	ldw	r9,16(sp)
   8da84:	da800317 	ldw	r10,12(sp)
   8da88:	113ffd44 	addi	r4,r2,-11
   8da8c:	00c00704 	movi	r3,28
   8da90:	19011016 	blt	r3,r4,8ded4 <__muldf3+0x6d4>
   8da94:	00c00744 	movi	r3,29
   8da98:	14bffe04 	addi	r18,r2,-8
   8da9c:	1907c83a 	sub	r3,r3,r4
   8daa0:	8ca2983a 	sll	r17,r17,r18
   8daa4:	30c6d83a 	srl	r3,r6,r3
   8daa8:	34a4983a 	sll	r18,r6,r18
   8daac:	1c62b03a 	or	r17,r3,r17
   8dab0:	1080fcc4 	addi	r2,r2,1011
   8dab4:	0085c83a 	sub	r2,zero,r2
   8dab8:	000f883a 	mov	r7,zero
   8dabc:	003f8106 	br	8d8c4 <__alt_data_end+0xfffad8c4>
   8dac0:	3027883a 	mov	r19,r6
   8dac4:	0081ffc4 	movi	r2,2047
   8dac8:	0021883a 	mov	r16,zero
   8dacc:	002d883a 	mov	r22,zero
   8dad0:	003faa06 	br	8d97c <__alt_data_end+0xfffad97c>
   8dad4:	0023883a 	mov	r17,zero
   8dad8:	0025883a 	mov	r18,zero
   8dadc:	01c00044 	movi	r7,1
   8dae0:	003f7806 	br	8d8c4 <__alt_data_end+0xfffad8c4>
   8dae4:	01c000c4 	movi	r7,3
   8dae8:	003f7606 	br	8d8c4 <__alt_data_end+0xfffad8c4>
   8daec:	05400104 	movi	r21,4
   8daf0:	0021883a 	mov	r16,zero
   8daf4:	002d883a 	mov	r22,zero
   8daf8:	01400044 	movi	r5,1
   8dafc:	003f5f06 	br	8d87c <__alt_data_end+0xfffad87c>
   8db00:	05400304 	movi	r21,12
   8db04:	014000c4 	movi	r5,3
   8db08:	003f5c06 	br	8d87c <__alt_data_end+0xfffad87c>
   8db0c:	04000434 	movhi	r16,16
   8db10:	0027883a 	mov	r19,zero
   8db14:	843fffc4 	addi	r16,r16,-1
   8db18:	05bfffc4 	movi	r22,-1
   8db1c:	0081ffc4 	movi	r2,2047
   8db20:	003f9606 	br	8d97c <__alt_data_end+0xfffad97c>
   8db24:	8023883a 	mov	r17,r16
   8db28:	b025883a 	mov	r18,r22
   8db2c:	280f883a 	mov	r7,r5
   8db30:	003f8806 	br	8d954 <__alt_data_end+0xfffad954>
   8db34:	8023883a 	mov	r17,r16
   8db38:	b025883a 	mov	r18,r22
   8db3c:	480d883a 	mov	r6,r9
   8db40:	280f883a 	mov	r7,r5
   8db44:	003f8306 	br	8d954 <__alt_data_end+0xfffad954>
   8db48:	b026d43a 	srli	r19,r22,16
   8db4c:	902ed43a 	srli	r23,r18,16
   8db50:	b5bfffcc 	andi	r22,r22,65535
   8db54:	94bfffcc 	andi	r18,r18,65535
   8db58:	b00b883a 	mov	r5,r22
   8db5c:	9009883a 	mov	r4,r18
   8db60:	d8c00515 	stw	r3,20(sp)
   8db64:	d9800715 	stw	r6,28(sp)
   8db68:	da000615 	stw	r8,24(sp)
   8db6c:	0081b340 	call	81b34 <__mulsi3>
   8db70:	980b883a 	mov	r5,r19
   8db74:	9009883a 	mov	r4,r18
   8db78:	1029883a 	mov	r20,r2
   8db7c:	0081b340 	call	81b34 <__mulsi3>
   8db80:	b80b883a 	mov	r5,r23
   8db84:	9809883a 	mov	r4,r19
   8db88:	102b883a 	mov	r21,r2
   8db8c:	0081b340 	call	81b34 <__mulsi3>
   8db90:	b809883a 	mov	r4,r23
   8db94:	b00b883a 	mov	r5,r22
   8db98:	1039883a 	mov	fp,r2
   8db9c:	0081b340 	call	81b34 <__mulsi3>
   8dba0:	a008d43a 	srli	r4,r20,16
   8dba4:	1545883a 	add	r2,r2,r21
   8dba8:	d8c00517 	ldw	r3,20(sp)
   8dbac:	2085883a 	add	r2,r4,r2
   8dbb0:	d9800717 	ldw	r6,28(sp)
   8dbb4:	da000617 	ldw	r8,24(sp)
   8dbb8:	1540022e 	bgeu	r2,r21,8dbc4 <__muldf3+0x3c4>
   8dbbc:	01000074 	movhi	r4,1
   8dbc0:	e139883a 	add	fp,fp,r4
   8dbc4:	100e943a 	slli	r7,r2,16
   8dbc8:	1004d43a 	srli	r2,r2,16
   8dbcc:	882ad43a 	srli	r21,r17,16
   8dbd0:	a53fffcc 	andi	r20,r20,65535
   8dbd4:	8c7fffcc 	andi	r17,r17,65535
   8dbd8:	3d29883a 	add	r20,r7,r20
   8dbdc:	b00b883a 	mov	r5,r22
   8dbe0:	8809883a 	mov	r4,r17
   8dbe4:	d8c00515 	stw	r3,20(sp)
   8dbe8:	d9800715 	stw	r6,28(sp)
   8dbec:	da000615 	stw	r8,24(sp)
   8dbf0:	dd000115 	stw	r20,4(sp)
   8dbf4:	d8800015 	stw	r2,0(sp)
   8dbf8:	0081b340 	call	81b34 <__mulsi3>
   8dbfc:	980b883a 	mov	r5,r19
   8dc00:	8809883a 	mov	r4,r17
   8dc04:	d8800215 	stw	r2,8(sp)
   8dc08:	0081b340 	call	81b34 <__mulsi3>
   8dc0c:	9809883a 	mov	r4,r19
   8dc10:	a80b883a 	mov	r5,r21
   8dc14:	1029883a 	mov	r20,r2
   8dc18:	0081b340 	call	81b34 <__mulsi3>
   8dc1c:	b00b883a 	mov	r5,r22
   8dc20:	a809883a 	mov	r4,r21
   8dc24:	d8800415 	stw	r2,16(sp)
   8dc28:	0081b340 	call	81b34 <__mulsi3>
   8dc2c:	d9c00217 	ldw	r7,8(sp)
   8dc30:	1505883a 	add	r2,r2,r20
   8dc34:	d8c00517 	ldw	r3,20(sp)
   8dc38:	3826d43a 	srli	r19,r7,16
   8dc3c:	d9800717 	ldw	r6,28(sp)
   8dc40:	da000617 	ldw	r8,24(sp)
   8dc44:	9885883a 	add	r2,r19,r2
   8dc48:	da400417 	ldw	r9,16(sp)
   8dc4c:	1500022e 	bgeu	r2,r20,8dc58 <__muldf3+0x458>
   8dc50:	01000074 	movhi	r4,1
   8dc54:	4913883a 	add	r9,r9,r4
   8dc58:	1028d43a 	srli	r20,r2,16
   8dc5c:	1004943a 	slli	r2,r2,16
   8dc60:	802cd43a 	srli	r22,r16,16
   8dc64:	843fffcc 	andi	r16,r16,65535
   8dc68:	3cffffcc 	andi	r19,r7,65535
   8dc6c:	9009883a 	mov	r4,r18
   8dc70:	800b883a 	mov	r5,r16
   8dc74:	a269883a 	add	r20,r20,r9
   8dc78:	d8c00515 	stw	r3,20(sp)
   8dc7c:	d9800715 	stw	r6,28(sp)
   8dc80:	da000615 	stw	r8,24(sp)
   8dc84:	14e7883a 	add	r19,r2,r19
   8dc88:	0081b340 	call	81b34 <__mulsi3>
   8dc8c:	9009883a 	mov	r4,r18
   8dc90:	b00b883a 	mov	r5,r22
   8dc94:	d8800315 	stw	r2,12(sp)
   8dc98:	0081b340 	call	81b34 <__mulsi3>
   8dc9c:	b809883a 	mov	r4,r23
   8dca0:	b00b883a 	mov	r5,r22
   8dca4:	d8800215 	stw	r2,8(sp)
   8dca8:	0081b340 	call	81b34 <__mulsi3>
   8dcac:	b80b883a 	mov	r5,r23
   8dcb0:	8009883a 	mov	r4,r16
   8dcb4:	d8800415 	stw	r2,16(sp)
   8dcb8:	0081b340 	call	81b34 <__mulsi3>
   8dcbc:	da800317 	ldw	r10,12(sp)
   8dcc0:	d9c00217 	ldw	r7,8(sp)
   8dcc4:	d9000017 	ldw	r4,0(sp)
   8dcc8:	502ed43a 	srli	r23,r10,16
   8dccc:	11c5883a 	add	r2,r2,r7
   8dcd0:	24e5883a 	add	r18,r4,r19
   8dcd4:	b885883a 	add	r2,r23,r2
   8dcd8:	d8c00517 	ldw	r3,20(sp)
   8dcdc:	d9800717 	ldw	r6,28(sp)
   8dce0:	da000617 	ldw	r8,24(sp)
   8dce4:	da400417 	ldw	r9,16(sp)
   8dce8:	11c0022e 	bgeu	r2,r7,8dcf4 <__muldf3+0x4f4>
   8dcec:	01000074 	movhi	r4,1
   8dcf0:	4913883a 	add	r9,r9,r4
   8dcf4:	100ed43a 	srli	r7,r2,16
   8dcf8:	1004943a 	slli	r2,r2,16
   8dcfc:	55ffffcc 	andi	r23,r10,65535
   8dd00:	3a53883a 	add	r9,r7,r9
   8dd04:	8809883a 	mov	r4,r17
   8dd08:	800b883a 	mov	r5,r16
   8dd0c:	d8c00515 	stw	r3,20(sp)
   8dd10:	d9800715 	stw	r6,28(sp)
   8dd14:	da000615 	stw	r8,24(sp)
   8dd18:	da400415 	stw	r9,16(sp)
   8dd1c:	15ef883a 	add	r23,r2,r23
   8dd20:	0081b340 	call	81b34 <__mulsi3>
   8dd24:	8809883a 	mov	r4,r17
   8dd28:	b00b883a 	mov	r5,r22
   8dd2c:	d8800215 	stw	r2,8(sp)
   8dd30:	0081b340 	call	81b34 <__mulsi3>
   8dd34:	b00b883a 	mov	r5,r22
   8dd38:	a809883a 	mov	r4,r21
   8dd3c:	d8800315 	stw	r2,12(sp)
   8dd40:	0081b340 	call	81b34 <__mulsi3>
   8dd44:	8009883a 	mov	r4,r16
   8dd48:	a80b883a 	mov	r5,r21
   8dd4c:	1023883a 	mov	r17,r2
   8dd50:	0081b340 	call	81b34 <__mulsi3>
   8dd54:	d9c00217 	ldw	r7,8(sp)
   8dd58:	da800317 	ldw	r10,12(sp)
   8dd5c:	d8c00517 	ldw	r3,20(sp)
   8dd60:	3808d43a 	srli	r4,r7,16
   8dd64:	1285883a 	add	r2,r2,r10
   8dd68:	d9800717 	ldw	r6,28(sp)
   8dd6c:	2085883a 	add	r2,r4,r2
   8dd70:	da000617 	ldw	r8,24(sp)
   8dd74:	da400417 	ldw	r9,16(sp)
   8dd78:	1280022e 	bgeu	r2,r10,8dd84 <__muldf3+0x584>
   8dd7c:	01000074 	movhi	r4,1
   8dd80:	8923883a 	add	r17,r17,r4
   8dd84:	1008943a 	slli	r4,r2,16
   8dd88:	39ffffcc 	andi	r7,r7,65535
   8dd8c:	e4b9883a 	add	fp,fp,r18
   8dd90:	21cf883a 	add	r7,r4,r7
   8dd94:	e4e7803a 	cmpltu	r19,fp,r19
   8dd98:	3d0f883a 	add	r7,r7,r20
   8dd9c:	bf39883a 	add	fp,r23,fp
   8dda0:	99c9883a 	add	r4,r19,r7
   8dda4:	e5ef803a 	cmpltu	r23,fp,r23
   8dda8:	490b883a 	add	r5,r9,r4
   8ddac:	1004d43a 	srli	r2,r2,16
   8ddb0:	b965883a 	add	r18,r23,r5
   8ddb4:	24c9803a 	cmpltu	r4,r4,r19
   8ddb8:	3d29803a 	cmpltu	r20,r7,r20
   8ddbc:	a128b03a 	or	r20,r20,r4
   8ddc0:	95ef803a 	cmpltu	r23,r18,r23
   8ddc4:	2a53803a 	cmpltu	r9,r5,r9
   8ddc8:	a0a9883a 	add	r20,r20,r2
   8ddcc:	4deeb03a 	or	r23,r9,r23
   8ddd0:	a5ef883a 	add	r23,r20,r23
   8ddd4:	bc63883a 	add	r17,r23,r17
   8ddd8:	e004927a 	slli	r2,fp,9
   8dddc:	d9000117 	ldw	r4,4(sp)
   8dde0:	882e927a 	slli	r23,r17,9
   8dde4:	9022d5fa 	srli	r17,r18,23
   8dde8:	e038d5fa 	srli	fp,fp,23
   8ddec:	1104b03a 	or	r2,r2,r4
   8ddf0:	9024927a 	slli	r18,r18,9
   8ddf4:	1004c03a 	cmpne	r2,r2,zero
   8ddf8:	bc62b03a 	or	r17,r23,r17
   8ddfc:	1738b03a 	or	fp,r2,fp
   8de00:	8880402c 	andhi	r2,r17,256
   8de04:	e4a4b03a 	or	r18,fp,r18
   8de08:	10000726 	beq	r2,zero,8de28 <__muldf3+0x628>
   8de0c:	9006d07a 	srli	r3,r18,1
   8de10:	880497fa 	slli	r2,r17,31
   8de14:	9480004c 	andi	r18,r18,1
   8de18:	8822d07a 	srli	r17,r17,1
   8de1c:	1ca4b03a 	or	r18,r3,r18
   8de20:	14a4b03a 	or	r18,r2,r18
   8de24:	4007883a 	mov	r3,r8
   8de28:	1880ffc4 	addi	r2,r3,1023
   8de2c:	0080460e 	bge	zero,r2,8df48 <__muldf3+0x748>
   8de30:	910001cc 	andi	r4,r18,7
   8de34:	20000726 	beq	r4,zero,8de54 <__muldf3+0x654>
   8de38:	910003cc 	andi	r4,r18,15
   8de3c:	01400104 	movi	r5,4
   8de40:	21400426 	beq	r4,r5,8de54 <__muldf3+0x654>
   8de44:	9149883a 	add	r4,r18,r5
   8de48:	24a5803a 	cmpltu	r18,r4,r18
   8de4c:	8ca3883a 	add	r17,r17,r18
   8de50:	2025883a 	mov	r18,r4
   8de54:	8900402c 	andhi	r4,r17,256
   8de58:	20000426 	beq	r4,zero,8de6c <__muldf3+0x66c>
   8de5c:	18810004 	addi	r2,r3,1024
   8de60:	00ffc034 	movhi	r3,65280
   8de64:	18ffffc4 	addi	r3,r3,-1
   8de68:	88e2703a 	and	r17,r17,r3
   8de6c:	00c1ff84 	movi	r3,2046
   8de70:	18bf1316 	blt	r3,r2,8dac0 <__alt_data_end+0xfffadac0>
   8de74:	882c977a 	slli	r22,r17,29
   8de78:	9024d0fa 	srli	r18,r18,3
   8de7c:	8822927a 	slli	r17,r17,9
   8de80:	1081ffcc 	andi	r2,r2,2047
   8de84:	b4acb03a 	or	r22,r22,r18
   8de88:	8820d33a 	srli	r16,r17,12
   8de8c:	3027883a 	mov	r19,r6
   8de90:	003eba06 	br	8d97c <__alt_data_end+0xfffad97c>
   8de94:	8080022c 	andhi	r2,r16,8
   8de98:	10000926 	beq	r2,zero,8dec0 <__muldf3+0x6c0>
   8de9c:	8880022c 	andhi	r2,r17,8
   8dea0:	1000071e 	bne	r2,zero,8dec0 <__muldf3+0x6c0>
   8dea4:	00800434 	movhi	r2,16
   8dea8:	8c000234 	orhi	r16,r17,8
   8deac:	10bfffc4 	addi	r2,r2,-1
   8deb0:	e027883a 	mov	r19,fp
   8deb4:	80a0703a 	and	r16,r16,r2
   8deb8:	902d883a 	mov	r22,r18
   8debc:	003f1706 	br	8db1c <__alt_data_end+0xfffadb1c>
   8dec0:	00800434 	movhi	r2,16
   8dec4:	84000234 	orhi	r16,r16,8
   8dec8:	10bfffc4 	addi	r2,r2,-1
   8decc:	80a0703a 	and	r16,r16,r2
   8ded0:	003f1206 	br	8db1c <__alt_data_end+0xfffadb1c>
   8ded4:	147ff604 	addi	r17,r2,-40
   8ded8:	3462983a 	sll	r17,r6,r17
   8dedc:	0025883a 	mov	r18,zero
   8dee0:	003ef306 	br	8dab0 <__alt_data_end+0xfffadab0>
   8dee4:	3009883a 	mov	r4,r6
   8dee8:	d9400215 	stw	r5,8(sp)
   8deec:	d9800715 	stw	r6,28(sp)
   8def0:	da400415 	stw	r9,16(sp)
   8def4:	da800315 	stw	r10,12(sp)
   8def8:	008eb6c0 	call	8eb6c <__clzsi2>
   8defc:	10800804 	addi	r2,r2,32
   8df00:	da800317 	ldw	r10,12(sp)
   8df04:	da400417 	ldw	r9,16(sp)
   8df08:	d9800717 	ldw	r6,28(sp)
   8df0c:	d9400217 	ldw	r5,8(sp)
   8df10:	003edd06 	br	8da88 <__alt_data_end+0xfffada88>
   8df14:	143ff604 	addi	r16,r2,-40
   8df18:	ac20983a 	sll	r16,r21,r16
   8df1c:	002d883a 	mov	r22,zero
   8df20:	003ec106 	br	8da28 <__alt_data_end+0xfffada28>
   8df24:	d9800715 	stw	r6,28(sp)
   8df28:	d9c00215 	stw	r7,8(sp)
   8df2c:	da400415 	stw	r9,16(sp)
   8df30:	008eb6c0 	call	8eb6c <__clzsi2>
   8df34:	10800804 	addi	r2,r2,32
   8df38:	da400417 	ldw	r9,16(sp)
   8df3c:	d9c00217 	ldw	r7,8(sp)
   8df40:	d9800717 	ldw	r6,28(sp)
   8df44:	003eae06 	br	8da00 <__alt_data_end+0xfffada00>
   8df48:	00c00044 	movi	r3,1
   8df4c:	1887c83a 	sub	r3,r3,r2
   8df50:	01000e04 	movi	r4,56
   8df54:	20fe8516 	blt	r4,r3,8d96c <__alt_data_end+0xfffad96c>
   8df58:	010007c4 	movi	r4,31
   8df5c:	20c01b16 	blt	r4,r3,8dfcc <__muldf3+0x7cc>
   8df60:	00800804 	movi	r2,32
   8df64:	10c5c83a 	sub	r2,r2,r3
   8df68:	888a983a 	sll	r5,r17,r2
   8df6c:	90c8d83a 	srl	r4,r18,r3
   8df70:	9084983a 	sll	r2,r18,r2
   8df74:	88e2d83a 	srl	r17,r17,r3
   8df78:	2906b03a 	or	r3,r5,r4
   8df7c:	1004c03a 	cmpne	r2,r2,zero
   8df80:	1886b03a 	or	r3,r3,r2
   8df84:	188001cc 	andi	r2,r3,7
   8df88:	10000726 	beq	r2,zero,8dfa8 <__muldf3+0x7a8>
   8df8c:	188003cc 	andi	r2,r3,15
   8df90:	01000104 	movi	r4,4
   8df94:	11000426 	beq	r2,r4,8dfa8 <__muldf3+0x7a8>
   8df98:	1805883a 	mov	r2,r3
   8df9c:	10c00104 	addi	r3,r2,4
   8dfa0:	1885803a 	cmpltu	r2,r3,r2
   8dfa4:	88a3883a 	add	r17,r17,r2
   8dfa8:	8880202c 	andhi	r2,r17,128
   8dfac:	10001c26 	beq	r2,zero,8e020 <__muldf3+0x820>
   8dfb0:	3027883a 	mov	r19,r6
   8dfb4:	00800044 	movi	r2,1
   8dfb8:	0021883a 	mov	r16,zero
   8dfbc:	002d883a 	mov	r22,zero
   8dfc0:	003e6e06 	br	8d97c <__alt_data_end+0xfffad97c>
   8dfc4:	4007883a 	mov	r3,r8
   8dfc8:	003f9706 	br	8de28 <__alt_data_end+0xfffade28>
   8dfcc:	017ff844 	movi	r5,-31
   8dfd0:	2885c83a 	sub	r2,r5,r2
   8dfd4:	888ad83a 	srl	r5,r17,r2
   8dfd8:	00800804 	movi	r2,32
   8dfdc:	18801a26 	beq	r3,r2,8e048 <__muldf3+0x848>
   8dfe0:	01001004 	movi	r4,64
   8dfe4:	20c7c83a 	sub	r3,r4,r3
   8dfe8:	88e2983a 	sll	r17,r17,r3
   8dfec:	8ca4b03a 	or	r18,r17,r18
   8dff0:	9004c03a 	cmpne	r2,r18,zero
   8dff4:	2884b03a 	or	r2,r5,r2
   8dff8:	144001cc 	andi	r17,r2,7
   8dffc:	88000d1e 	bne	r17,zero,8e034 <__muldf3+0x834>
   8e000:	0021883a 	mov	r16,zero
   8e004:	102cd0fa 	srli	r22,r2,3
   8e008:	3027883a 	mov	r19,r6
   8e00c:	0005883a 	mov	r2,zero
   8e010:	b46cb03a 	or	r22,r22,r17
   8e014:	003e5906 	br	8d97c <__alt_data_end+0xfffad97c>
   8e018:	1007883a 	mov	r3,r2
   8e01c:	0023883a 	mov	r17,zero
   8e020:	8820927a 	slli	r16,r17,9
   8e024:	1805883a 	mov	r2,r3
   8e028:	8822977a 	slli	r17,r17,29
   8e02c:	8020d33a 	srli	r16,r16,12
   8e030:	003ff406 	br	8e004 <__alt_data_end+0xfffae004>
   8e034:	10c003cc 	andi	r3,r2,15
   8e038:	01000104 	movi	r4,4
   8e03c:	193ff626 	beq	r3,r4,8e018 <__alt_data_end+0xfffae018>
   8e040:	0023883a 	mov	r17,zero
   8e044:	003fd506 	br	8df9c <__alt_data_end+0xfffadf9c>
   8e048:	0023883a 	mov	r17,zero
   8e04c:	003fe706 	br	8dfec <__alt_data_end+0xfffadfec>
   8e050:	00800434 	movhi	r2,16
   8e054:	8c000234 	orhi	r16,r17,8
   8e058:	10bfffc4 	addi	r2,r2,-1
   8e05c:	3027883a 	mov	r19,r6
   8e060:	80a0703a 	and	r16,r16,r2
   8e064:	902d883a 	mov	r22,r18
   8e068:	003eac06 	br	8db1c <__alt_data_end+0xfffadb1c>

0008e06c <__subdf3>:
   8e06c:	02000434 	movhi	r8,16
   8e070:	423fffc4 	addi	r8,r8,-1
   8e074:	defffb04 	addi	sp,sp,-20
   8e078:	2a14703a 	and	r10,r5,r8
   8e07c:	3812d53a 	srli	r9,r7,20
   8e080:	3a10703a 	and	r8,r7,r8
   8e084:	2006d77a 	srli	r3,r4,29
   8e088:	3004d77a 	srli	r2,r6,29
   8e08c:	dc000015 	stw	r16,0(sp)
   8e090:	501490fa 	slli	r10,r10,3
   8e094:	2820d53a 	srli	r16,r5,20
   8e098:	401090fa 	slli	r8,r8,3
   8e09c:	dc800215 	stw	r18,8(sp)
   8e0a0:	dc400115 	stw	r17,4(sp)
   8e0a4:	dfc00415 	stw	ra,16(sp)
   8e0a8:	202290fa 	slli	r17,r4,3
   8e0ac:	dcc00315 	stw	r19,12(sp)
   8e0b0:	4a41ffcc 	andi	r9,r9,2047
   8e0b4:	0101ffc4 	movi	r4,2047
   8e0b8:	2824d7fa 	srli	r18,r5,31
   8e0bc:	8401ffcc 	andi	r16,r16,2047
   8e0c0:	50c6b03a 	or	r3,r10,r3
   8e0c4:	380ed7fa 	srli	r7,r7,31
   8e0c8:	408ab03a 	or	r5,r8,r2
   8e0cc:	300c90fa 	slli	r6,r6,3
   8e0d0:	49009626 	beq	r9,r4,8e32c <__subdf3+0x2c0>
   8e0d4:	39c0005c 	xori	r7,r7,1
   8e0d8:	8245c83a 	sub	r2,r16,r9
   8e0dc:	3c807426 	beq	r7,r18,8e2b0 <__subdf3+0x244>
   8e0e0:	0080af0e 	bge	zero,r2,8e3a0 <__subdf3+0x334>
   8e0e4:	48002a1e 	bne	r9,zero,8e190 <__subdf3+0x124>
   8e0e8:	2988b03a 	or	r4,r5,r6
   8e0ec:	20009a1e 	bne	r4,zero,8e358 <__subdf3+0x2ec>
   8e0f0:	888001cc 	andi	r2,r17,7
   8e0f4:	10000726 	beq	r2,zero,8e114 <__subdf3+0xa8>
   8e0f8:	888003cc 	andi	r2,r17,15
   8e0fc:	01000104 	movi	r4,4
   8e100:	11000426 	beq	r2,r4,8e114 <__subdf3+0xa8>
   8e104:	890b883a 	add	r5,r17,r4
   8e108:	2c63803a 	cmpltu	r17,r5,r17
   8e10c:	1c47883a 	add	r3,r3,r17
   8e110:	2823883a 	mov	r17,r5
   8e114:	1880202c 	andhi	r2,r3,128
   8e118:	10005926 	beq	r2,zero,8e280 <__subdf3+0x214>
   8e11c:	84000044 	addi	r16,r16,1
   8e120:	0081ffc4 	movi	r2,2047
   8e124:	8080be26 	beq	r16,r2,8e420 <__subdf3+0x3b4>
   8e128:	017fe034 	movhi	r5,65408
   8e12c:	297fffc4 	addi	r5,r5,-1
   8e130:	1946703a 	and	r3,r3,r5
   8e134:	1804977a 	slli	r2,r3,29
   8e138:	1806927a 	slli	r3,r3,9
   8e13c:	8822d0fa 	srli	r17,r17,3
   8e140:	8401ffcc 	andi	r16,r16,2047
   8e144:	180ad33a 	srli	r5,r3,12
   8e148:	9100004c 	andi	r4,r18,1
   8e14c:	1444b03a 	or	r2,r2,r17
   8e150:	80c1ffcc 	andi	r3,r16,2047
   8e154:	1820953a 	slli	r16,r3,20
   8e158:	20c03fcc 	andi	r3,r4,255
   8e15c:	180897fa 	slli	r4,r3,31
   8e160:	00c00434 	movhi	r3,16
   8e164:	18ffffc4 	addi	r3,r3,-1
   8e168:	28c6703a 	and	r3,r5,r3
   8e16c:	1c06b03a 	or	r3,r3,r16
   8e170:	1906b03a 	or	r3,r3,r4
   8e174:	dfc00417 	ldw	ra,16(sp)
   8e178:	dcc00317 	ldw	r19,12(sp)
   8e17c:	dc800217 	ldw	r18,8(sp)
   8e180:	dc400117 	ldw	r17,4(sp)
   8e184:	dc000017 	ldw	r16,0(sp)
   8e188:	dec00504 	addi	sp,sp,20
   8e18c:	f800283a 	ret
   8e190:	0101ffc4 	movi	r4,2047
   8e194:	813fd626 	beq	r16,r4,8e0f0 <__alt_data_end+0xfffae0f0>
   8e198:	29402034 	orhi	r5,r5,128
   8e19c:	01000e04 	movi	r4,56
   8e1a0:	2080a316 	blt	r4,r2,8e430 <__subdf3+0x3c4>
   8e1a4:	010007c4 	movi	r4,31
   8e1a8:	2080c616 	blt	r4,r2,8e4c4 <__subdf3+0x458>
   8e1ac:	01000804 	movi	r4,32
   8e1b0:	2089c83a 	sub	r4,r4,r2
   8e1b4:	2910983a 	sll	r8,r5,r4
   8e1b8:	308ed83a 	srl	r7,r6,r2
   8e1bc:	3108983a 	sll	r4,r6,r4
   8e1c0:	2884d83a 	srl	r2,r5,r2
   8e1c4:	41ccb03a 	or	r6,r8,r7
   8e1c8:	2008c03a 	cmpne	r4,r4,zero
   8e1cc:	310cb03a 	or	r6,r6,r4
   8e1d0:	898dc83a 	sub	r6,r17,r6
   8e1d4:	89a3803a 	cmpltu	r17,r17,r6
   8e1d8:	1887c83a 	sub	r3,r3,r2
   8e1dc:	1c47c83a 	sub	r3,r3,r17
   8e1e0:	3023883a 	mov	r17,r6
   8e1e4:	1880202c 	andhi	r2,r3,128
   8e1e8:	10002326 	beq	r2,zero,8e278 <__subdf3+0x20c>
   8e1ec:	04c02034 	movhi	r19,128
   8e1f0:	9cffffc4 	addi	r19,r19,-1
   8e1f4:	1ce6703a 	and	r19,r3,r19
   8e1f8:	98007a26 	beq	r19,zero,8e3e4 <__subdf3+0x378>
   8e1fc:	9809883a 	mov	r4,r19
   8e200:	008eb6c0 	call	8eb6c <__clzsi2>
   8e204:	113ffe04 	addi	r4,r2,-8
   8e208:	00c007c4 	movi	r3,31
   8e20c:	19007b16 	blt	r3,r4,8e3fc <__subdf3+0x390>
   8e210:	00800804 	movi	r2,32
   8e214:	1105c83a 	sub	r2,r2,r4
   8e218:	8884d83a 	srl	r2,r17,r2
   8e21c:	9906983a 	sll	r3,r19,r4
   8e220:	8922983a 	sll	r17,r17,r4
   8e224:	10c4b03a 	or	r2,r2,r3
   8e228:	24007816 	blt	r4,r16,8e40c <__subdf3+0x3a0>
   8e22c:	2421c83a 	sub	r16,r4,r16
   8e230:	80c00044 	addi	r3,r16,1
   8e234:	010007c4 	movi	r4,31
   8e238:	20c09516 	blt	r4,r3,8e490 <__subdf3+0x424>
   8e23c:	01400804 	movi	r5,32
   8e240:	28cbc83a 	sub	r5,r5,r3
   8e244:	88c8d83a 	srl	r4,r17,r3
   8e248:	8962983a 	sll	r17,r17,r5
   8e24c:	114a983a 	sll	r5,r2,r5
   8e250:	10c6d83a 	srl	r3,r2,r3
   8e254:	8804c03a 	cmpne	r2,r17,zero
   8e258:	290ab03a 	or	r5,r5,r4
   8e25c:	28a2b03a 	or	r17,r5,r2
   8e260:	0021883a 	mov	r16,zero
   8e264:	003fa206 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e268:	2090b03a 	or	r8,r4,r2
   8e26c:	40018e26 	beq	r8,zero,8e8a8 <__subdf3+0x83c>
   8e270:	1007883a 	mov	r3,r2
   8e274:	2023883a 	mov	r17,r4
   8e278:	888001cc 	andi	r2,r17,7
   8e27c:	103f9e1e 	bne	r2,zero,8e0f8 <__alt_data_end+0xfffae0f8>
   8e280:	1804977a 	slli	r2,r3,29
   8e284:	8822d0fa 	srli	r17,r17,3
   8e288:	1810d0fa 	srli	r8,r3,3
   8e28c:	9100004c 	andi	r4,r18,1
   8e290:	1444b03a 	or	r2,r2,r17
   8e294:	00c1ffc4 	movi	r3,2047
   8e298:	80c02826 	beq	r16,r3,8e33c <__subdf3+0x2d0>
   8e29c:	01400434 	movhi	r5,16
   8e2a0:	297fffc4 	addi	r5,r5,-1
   8e2a4:	80e0703a 	and	r16,r16,r3
   8e2a8:	414a703a 	and	r5,r8,r5
   8e2ac:	003fa806 	br	8e150 <__alt_data_end+0xfffae150>
   8e2b0:	0080630e 	bge	zero,r2,8e440 <__subdf3+0x3d4>
   8e2b4:	48003026 	beq	r9,zero,8e378 <__subdf3+0x30c>
   8e2b8:	0101ffc4 	movi	r4,2047
   8e2bc:	813f8c26 	beq	r16,r4,8e0f0 <__alt_data_end+0xfffae0f0>
   8e2c0:	29402034 	orhi	r5,r5,128
   8e2c4:	01000e04 	movi	r4,56
   8e2c8:	2080a90e 	bge	r4,r2,8e570 <__subdf3+0x504>
   8e2cc:	298cb03a 	or	r6,r5,r6
   8e2d0:	3012c03a 	cmpne	r9,r6,zero
   8e2d4:	0005883a 	mov	r2,zero
   8e2d8:	4c53883a 	add	r9,r9,r17
   8e2dc:	4c63803a 	cmpltu	r17,r9,r17
   8e2e0:	10c7883a 	add	r3,r2,r3
   8e2e4:	88c7883a 	add	r3,r17,r3
   8e2e8:	4823883a 	mov	r17,r9
   8e2ec:	1880202c 	andhi	r2,r3,128
   8e2f0:	1000d026 	beq	r2,zero,8e634 <__subdf3+0x5c8>
   8e2f4:	84000044 	addi	r16,r16,1
   8e2f8:	0081ffc4 	movi	r2,2047
   8e2fc:	8080fe26 	beq	r16,r2,8e6f8 <__subdf3+0x68c>
   8e300:	00bfe034 	movhi	r2,65408
   8e304:	10bfffc4 	addi	r2,r2,-1
   8e308:	1886703a 	and	r3,r3,r2
   8e30c:	880ad07a 	srli	r5,r17,1
   8e310:	180497fa 	slli	r2,r3,31
   8e314:	8900004c 	andi	r4,r17,1
   8e318:	2922b03a 	or	r17,r5,r4
   8e31c:	1806d07a 	srli	r3,r3,1
   8e320:	1462b03a 	or	r17,r2,r17
   8e324:	3825883a 	mov	r18,r7
   8e328:	003f7106 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e32c:	2984b03a 	or	r2,r5,r6
   8e330:	103f6826 	beq	r2,zero,8e0d4 <__alt_data_end+0xfffae0d4>
   8e334:	39c03fcc 	andi	r7,r7,255
   8e338:	003f6706 	br	8e0d8 <__alt_data_end+0xfffae0d8>
   8e33c:	4086b03a 	or	r3,r8,r2
   8e340:	18015226 	beq	r3,zero,8e88c <__subdf3+0x820>
   8e344:	00c00434 	movhi	r3,16
   8e348:	41400234 	orhi	r5,r8,8
   8e34c:	18ffffc4 	addi	r3,r3,-1
   8e350:	28ca703a 	and	r5,r5,r3
   8e354:	003f7e06 	br	8e150 <__alt_data_end+0xfffae150>
   8e358:	10bfffc4 	addi	r2,r2,-1
   8e35c:	1000491e 	bne	r2,zero,8e484 <__subdf3+0x418>
   8e360:	898fc83a 	sub	r7,r17,r6
   8e364:	89e3803a 	cmpltu	r17,r17,r7
   8e368:	1947c83a 	sub	r3,r3,r5
   8e36c:	1c47c83a 	sub	r3,r3,r17
   8e370:	3823883a 	mov	r17,r7
   8e374:	003f9b06 	br	8e1e4 <__alt_data_end+0xfffae1e4>
   8e378:	2988b03a 	or	r4,r5,r6
   8e37c:	203f5c26 	beq	r4,zero,8e0f0 <__alt_data_end+0xfffae0f0>
   8e380:	10bfffc4 	addi	r2,r2,-1
   8e384:	1000931e 	bne	r2,zero,8e5d4 <__subdf3+0x568>
   8e388:	898d883a 	add	r6,r17,r6
   8e38c:	3463803a 	cmpltu	r17,r6,r17
   8e390:	1947883a 	add	r3,r3,r5
   8e394:	88c7883a 	add	r3,r17,r3
   8e398:	3023883a 	mov	r17,r6
   8e39c:	003fd306 	br	8e2ec <__alt_data_end+0xfffae2ec>
   8e3a0:	1000541e 	bne	r2,zero,8e4f4 <__subdf3+0x488>
   8e3a4:	80800044 	addi	r2,r16,1
   8e3a8:	1081ffcc 	andi	r2,r2,2047
   8e3ac:	01000044 	movi	r4,1
   8e3b0:	2080a20e 	bge	r4,r2,8e63c <__subdf3+0x5d0>
   8e3b4:	8989c83a 	sub	r4,r17,r6
   8e3b8:	8905803a 	cmpltu	r2,r17,r4
   8e3bc:	1967c83a 	sub	r19,r3,r5
   8e3c0:	98a7c83a 	sub	r19,r19,r2
   8e3c4:	9880202c 	andhi	r2,r19,128
   8e3c8:	10006326 	beq	r2,zero,8e558 <__subdf3+0x4ec>
   8e3cc:	3463c83a 	sub	r17,r6,r17
   8e3d0:	28c7c83a 	sub	r3,r5,r3
   8e3d4:	344d803a 	cmpltu	r6,r6,r17
   8e3d8:	19a7c83a 	sub	r19,r3,r6
   8e3dc:	3825883a 	mov	r18,r7
   8e3e0:	983f861e 	bne	r19,zero,8e1fc <__alt_data_end+0xfffae1fc>
   8e3e4:	8809883a 	mov	r4,r17
   8e3e8:	008eb6c0 	call	8eb6c <__clzsi2>
   8e3ec:	10800804 	addi	r2,r2,32
   8e3f0:	113ffe04 	addi	r4,r2,-8
   8e3f4:	00c007c4 	movi	r3,31
   8e3f8:	193f850e 	bge	r3,r4,8e210 <__alt_data_end+0xfffae210>
   8e3fc:	10bff604 	addi	r2,r2,-40
   8e400:	8884983a 	sll	r2,r17,r2
   8e404:	0023883a 	mov	r17,zero
   8e408:	243f880e 	bge	r4,r16,8e22c <__alt_data_end+0xfffae22c>
   8e40c:	00ffe034 	movhi	r3,65408
   8e410:	18ffffc4 	addi	r3,r3,-1
   8e414:	8121c83a 	sub	r16,r16,r4
   8e418:	10c6703a 	and	r3,r2,r3
   8e41c:	003f3406 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e420:	9100004c 	andi	r4,r18,1
   8e424:	000b883a 	mov	r5,zero
   8e428:	0005883a 	mov	r2,zero
   8e42c:	003f4806 	br	8e150 <__alt_data_end+0xfffae150>
   8e430:	298cb03a 	or	r6,r5,r6
   8e434:	300cc03a 	cmpne	r6,r6,zero
   8e438:	0005883a 	mov	r2,zero
   8e43c:	003f6406 	br	8e1d0 <__alt_data_end+0xfffae1d0>
   8e440:	10009a1e 	bne	r2,zero,8e6ac <__subdf3+0x640>
   8e444:	82400044 	addi	r9,r16,1
   8e448:	4881ffcc 	andi	r2,r9,2047
   8e44c:	02800044 	movi	r10,1
   8e450:	5080670e 	bge	r10,r2,8e5f0 <__subdf3+0x584>
   8e454:	0081ffc4 	movi	r2,2047
   8e458:	4880af26 	beq	r9,r2,8e718 <__subdf3+0x6ac>
   8e45c:	898d883a 	add	r6,r17,r6
   8e460:	1945883a 	add	r2,r3,r5
   8e464:	3447803a 	cmpltu	r3,r6,r17
   8e468:	1887883a 	add	r3,r3,r2
   8e46c:	182297fa 	slli	r17,r3,31
   8e470:	300cd07a 	srli	r6,r6,1
   8e474:	1806d07a 	srli	r3,r3,1
   8e478:	4821883a 	mov	r16,r9
   8e47c:	89a2b03a 	or	r17,r17,r6
   8e480:	003f1b06 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e484:	0101ffc4 	movi	r4,2047
   8e488:	813f441e 	bne	r16,r4,8e19c <__alt_data_end+0xfffae19c>
   8e48c:	003f1806 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e490:	843ff844 	addi	r16,r16,-31
   8e494:	01400804 	movi	r5,32
   8e498:	1408d83a 	srl	r4,r2,r16
   8e49c:	19405026 	beq	r3,r5,8e5e0 <__subdf3+0x574>
   8e4a0:	01401004 	movi	r5,64
   8e4a4:	28c7c83a 	sub	r3,r5,r3
   8e4a8:	10c4983a 	sll	r2,r2,r3
   8e4ac:	88a2b03a 	or	r17,r17,r2
   8e4b0:	8822c03a 	cmpne	r17,r17,zero
   8e4b4:	2462b03a 	or	r17,r4,r17
   8e4b8:	0007883a 	mov	r3,zero
   8e4bc:	0021883a 	mov	r16,zero
   8e4c0:	003f6d06 	br	8e278 <__alt_data_end+0xfffae278>
   8e4c4:	11fff804 	addi	r7,r2,-32
   8e4c8:	01000804 	movi	r4,32
   8e4cc:	29ced83a 	srl	r7,r5,r7
   8e4d0:	11004526 	beq	r2,r4,8e5e8 <__subdf3+0x57c>
   8e4d4:	01001004 	movi	r4,64
   8e4d8:	2089c83a 	sub	r4,r4,r2
   8e4dc:	2904983a 	sll	r2,r5,r4
   8e4e0:	118cb03a 	or	r6,r2,r6
   8e4e4:	300cc03a 	cmpne	r6,r6,zero
   8e4e8:	398cb03a 	or	r6,r7,r6
   8e4ec:	0005883a 	mov	r2,zero
   8e4f0:	003f3706 	br	8e1d0 <__alt_data_end+0xfffae1d0>
   8e4f4:	80002a26 	beq	r16,zero,8e5a0 <__subdf3+0x534>
   8e4f8:	0101ffc4 	movi	r4,2047
   8e4fc:	49006626 	beq	r9,r4,8e698 <__subdf3+0x62c>
   8e500:	0085c83a 	sub	r2,zero,r2
   8e504:	18c02034 	orhi	r3,r3,128
   8e508:	01000e04 	movi	r4,56
   8e50c:	20807e16 	blt	r4,r2,8e708 <__subdf3+0x69c>
   8e510:	010007c4 	movi	r4,31
   8e514:	2080e716 	blt	r4,r2,8e8b4 <__subdf3+0x848>
   8e518:	01000804 	movi	r4,32
   8e51c:	2089c83a 	sub	r4,r4,r2
   8e520:	1914983a 	sll	r10,r3,r4
   8e524:	8890d83a 	srl	r8,r17,r2
   8e528:	8908983a 	sll	r4,r17,r4
   8e52c:	1884d83a 	srl	r2,r3,r2
   8e530:	5222b03a 	or	r17,r10,r8
   8e534:	2006c03a 	cmpne	r3,r4,zero
   8e538:	88e2b03a 	or	r17,r17,r3
   8e53c:	3463c83a 	sub	r17,r6,r17
   8e540:	2885c83a 	sub	r2,r5,r2
   8e544:	344d803a 	cmpltu	r6,r6,r17
   8e548:	1187c83a 	sub	r3,r2,r6
   8e54c:	4821883a 	mov	r16,r9
   8e550:	3825883a 	mov	r18,r7
   8e554:	003f2306 	br	8e1e4 <__alt_data_end+0xfffae1e4>
   8e558:	24d0b03a 	or	r8,r4,r19
   8e55c:	40001b1e 	bne	r8,zero,8e5cc <__subdf3+0x560>
   8e560:	0005883a 	mov	r2,zero
   8e564:	0009883a 	mov	r4,zero
   8e568:	0021883a 	mov	r16,zero
   8e56c:	003f4906 	br	8e294 <__alt_data_end+0xfffae294>
   8e570:	010007c4 	movi	r4,31
   8e574:	20803a16 	blt	r4,r2,8e660 <__subdf3+0x5f4>
   8e578:	01000804 	movi	r4,32
   8e57c:	2089c83a 	sub	r4,r4,r2
   8e580:	2912983a 	sll	r9,r5,r4
   8e584:	3090d83a 	srl	r8,r6,r2
   8e588:	3108983a 	sll	r4,r6,r4
   8e58c:	2884d83a 	srl	r2,r5,r2
   8e590:	4a12b03a 	or	r9,r9,r8
   8e594:	2008c03a 	cmpne	r4,r4,zero
   8e598:	4912b03a 	or	r9,r9,r4
   8e59c:	003f4e06 	br	8e2d8 <__alt_data_end+0xfffae2d8>
   8e5a0:	1c48b03a 	or	r4,r3,r17
   8e5a4:	20003c26 	beq	r4,zero,8e698 <__subdf3+0x62c>
   8e5a8:	0084303a 	nor	r2,zero,r2
   8e5ac:	1000381e 	bne	r2,zero,8e690 <__subdf3+0x624>
   8e5b0:	3463c83a 	sub	r17,r6,r17
   8e5b4:	28c5c83a 	sub	r2,r5,r3
   8e5b8:	344d803a 	cmpltu	r6,r6,r17
   8e5bc:	1187c83a 	sub	r3,r2,r6
   8e5c0:	4821883a 	mov	r16,r9
   8e5c4:	3825883a 	mov	r18,r7
   8e5c8:	003f0606 	br	8e1e4 <__alt_data_end+0xfffae1e4>
   8e5cc:	2023883a 	mov	r17,r4
   8e5d0:	003f0906 	br	8e1f8 <__alt_data_end+0xfffae1f8>
   8e5d4:	0101ffc4 	movi	r4,2047
   8e5d8:	813f3a1e 	bne	r16,r4,8e2c4 <__alt_data_end+0xfffae2c4>
   8e5dc:	003ec406 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e5e0:	0005883a 	mov	r2,zero
   8e5e4:	003fb106 	br	8e4ac <__alt_data_end+0xfffae4ac>
   8e5e8:	0005883a 	mov	r2,zero
   8e5ec:	003fbc06 	br	8e4e0 <__alt_data_end+0xfffae4e0>
   8e5f0:	1c44b03a 	or	r2,r3,r17
   8e5f4:	80008e1e 	bne	r16,zero,8e830 <__subdf3+0x7c4>
   8e5f8:	1000c826 	beq	r2,zero,8e91c <__subdf3+0x8b0>
   8e5fc:	2984b03a 	or	r2,r5,r6
   8e600:	103ebb26 	beq	r2,zero,8e0f0 <__alt_data_end+0xfffae0f0>
   8e604:	8989883a 	add	r4,r17,r6
   8e608:	1945883a 	add	r2,r3,r5
   8e60c:	2447803a 	cmpltu	r3,r4,r17
   8e610:	1887883a 	add	r3,r3,r2
   8e614:	1880202c 	andhi	r2,r3,128
   8e618:	2023883a 	mov	r17,r4
   8e61c:	103f1626 	beq	r2,zero,8e278 <__alt_data_end+0xfffae278>
   8e620:	00bfe034 	movhi	r2,65408
   8e624:	10bfffc4 	addi	r2,r2,-1
   8e628:	5021883a 	mov	r16,r10
   8e62c:	1886703a 	and	r3,r3,r2
   8e630:	003eaf06 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e634:	3825883a 	mov	r18,r7
   8e638:	003f0f06 	br	8e278 <__alt_data_end+0xfffae278>
   8e63c:	1c44b03a 	or	r2,r3,r17
   8e640:	8000251e 	bne	r16,zero,8e6d8 <__subdf3+0x66c>
   8e644:	1000661e 	bne	r2,zero,8e7e0 <__subdf3+0x774>
   8e648:	2990b03a 	or	r8,r5,r6
   8e64c:	40009626 	beq	r8,zero,8e8a8 <__subdf3+0x83c>
   8e650:	2807883a 	mov	r3,r5
   8e654:	3023883a 	mov	r17,r6
   8e658:	3825883a 	mov	r18,r7
   8e65c:	003ea406 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e660:	127ff804 	addi	r9,r2,-32
   8e664:	01000804 	movi	r4,32
   8e668:	2a52d83a 	srl	r9,r5,r9
   8e66c:	11008c26 	beq	r2,r4,8e8a0 <__subdf3+0x834>
   8e670:	01001004 	movi	r4,64
   8e674:	2085c83a 	sub	r2,r4,r2
   8e678:	2884983a 	sll	r2,r5,r2
   8e67c:	118cb03a 	or	r6,r2,r6
   8e680:	300cc03a 	cmpne	r6,r6,zero
   8e684:	4992b03a 	or	r9,r9,r6
   8e688:	0005883a 	mov	r2,zero
   8e68c:	003f1206 	br	8e2d8 <__alt_data_end+0xfffae2d8>
   8e690:	0101ffc4 	movi	r4,2047
   8e694:	493f9c1e 	bne	r9,r4,8e508 <__alt_data_end+0xfffae508>
   8e698:	2807883a 	mov	r3,r5
   8e69c:	3023883a 	mov	r17,r6
   8e6a0:	4821883a 	mov	r16,r9
   8e6a4:	3825883a 	mov	r18,r7
   8e6a8:	003e9106 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e6ac:	80001f1e 	bne	r16,zero,8e72c <__subdf3+0x6c0>
   8e6b0:	1c48b03a 	or	r4,r3,r17
   8e6b4:	20005a26 	beq	r4,zero,8e820 <__subdf3+0x7b4>
   8e6b8:	0084303a 	nor	r2,zero,r2
   8e6bc:	1000561e 	bne	r2,zero,8e818 <__subdf3+0x7ac>
   8e6c0:	89a3883a 	add	r17,r17,r6
   8e6c4:	1945883a 	add	r2,r3,r5
   8e6c8:	898d803a 	cmpltu	r6,r17,r6
   8e6cc:	3087883a 	add	r3,r6,r2
   8e6d0:	4821883a 	mov	r16,r9
   8e6d4:	003f0506 	br	8e2ec <__alt_data_end+0xfffae2ec>
   8e6d8:	10002b1e 	bne	r2,zero,8e788 <__subdf3+0x71c>
   8e6dc:	2984b03a 	or	r2,r5,r6
   8e6e0:	10008026 	beq	r2,zero,8e8e4 <__subdf3+0x878>
   8e6e4:	2807883a 	mov	r3,r5
   8e6e8:	3023883a 	mov	r17,r6
   8e6ec:	3825883a 	mov	r18,r7
   8e6f0:	0401ffc4 	movi	r16,2047
   8e6f4:	003e7e06 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e6f8:	3809883a 	mov	r4,r7
   8e6fc:	0011883a 	mov	r8,zero
   8e700:	0005883a 	mov	r2,zero
   8e704:	003ee306 	br	8e294 <__alt_data_end+0xfffae294>
   8e708:	1c62b03a 	or	r17,r3,r17
   8e70c:	8822c03a 	cmpne	r17,r17,zero
   8e710:	0005883a 	mov	r2,zero
   8e714:	003f8906 	br	8e53c <__alt_data_end+0xfffae53c>
   8e718:	3809883a 	mov	r4,r7
   8e71c:	4821883a 	mov	r16,r9
   8e720:	0011883a 	mov	r8,zero
   8e724:	0005883a 	mov	r2,zero
   8e728:	003eda06 	br	8e294 <__alt_data_end+0xfffae294>
   8e72c:	0101ffc4 	movi	r4,2047
   8e730:	49003b26 	beq	r9,r4,8e820 <__subdf3+0x7b4>
   8e734:	0085c83a 	sub	r2,zero,r2
   8e738:	18c02034 	orhi	r3,r3,128
   8e73c:	01000e04 	movi	r4,56
   8e740:	20806e16 	blt	r4,r2,8e8fc <__subdf3+0x890>
   8e744:	010007c4 	movi	r4,31
   8e748:	20807716 	blt	r4,r2,8e928 <__subdf3+0x8bc>
   8e74c:	01000804 	movi	r4,32
   8e750:	2089c83a 	sub	r4,r4,r2
   8e754:	1914983a 	sll	r10,r3,r4
   8e758:	8890d83a 	srl	r8,r17,r2
   8e75c:	8908983a 	sll	r4,r17,r4
   8e760:	1884d83a 	srl	r2,r3,r2
   8e764:	5222b03a 	or	r17,r10,r8
   8e768:	2006c03a 	cmpne	r3,r4,zero
   8e76c:	88e2b03a 	or	r17,r17,r3
   8e770:	89a3883a 	add	r17,r17,r6
   8e774:	1145883a 	add	r2,r2,r5
   8e778:	898d803a 	cmpltu	r6,r17,r6
   8e77c:	3087883a 	add	r3,r6,r2
   8e780:	4821883a 	mov	r16,r9
   8e784:	003ed906 	br	8e2ec <__alt_data_end+0xfffae2ec>
   8e788:	2984b03a 	or	r2,r5,r6
   8e78c:	10004226 	beq	r2,zero,8e898 <__subdf3+0x82c>
   8e790:	1808d0fa 	srli	r4,r3,3
   8e794:	8822d0fa 	srli	r17,r17,3
   8e798:	1806977a 	slli	r3,r3,29
   8e79c:	2080022c 	andhi	r2,r4,8
   8e7a0:	1c62b03a 	or	r17,r3,r17
   8e7a4:	10000826 	beq	r2,zero,8e7c8 <__subdf3+0x75c>
   8e7a8:	2812d0fa 	srli	r9,r5,3
   8e7ac:	4880022c 	andhi	r2,r9,8
   8e7b0:	1000051e 	bne	r2,zero,8e7c8 <__subdf3+0x75c>
   8e7b4:	300cd0fa 	srli	r6,r6,3
   8e7b8:	2804977a 	slli	r2,r5,29
   8e7bc:	4809883a 	mov	r4,r9
   8e7c0:	3825883a 	mov	r18,r7
   8e7c4:	11a2b03a 	or	r17,r2,r6
   8e7c8:	8806d77a 	srli	r3,r17,29
   8e7cc:	200890fa 	slli	r4,r4,3
   8e7d0:	882290fa 	slli	r17,r17,3
   8e7d4:	0401ffc4 	movi	r16,2047
   8e7d8:	1906b03a 	or	r3,r3,r4
   8e7dc:	003e4406 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e7e0:	2984b03a 	or	r2,r5,r6
   8e7e4:	103e4226 	beq	r2,zero,8e0f0 <__alt_data_end+0xfffae0f0>
   8e7e8:	8989c83a 	sub	r4,r17,r6
   8e7ec:	8911803a 	cmpltu	r8,r17,r4
   8e7f0:	1945c83a 	sub	r2,r3,r5
   8e7f4:	1205c83a 	sub	r2,r2,r8
   8e7f8:	1200202c 	andhi	r8,r2,128
   8e7fc:	403e9a26 	beq	r8,zero,8e268 <__alt_data_end+0xfffae268>
   8e800:	3463c83a 	sub	r17,r6,r17
   8e804:	28c5c83a 	sub	r2,r5,r3
   8e808:	344d803a 	cmpltu	r6,r6,r17
   8e80c:	1187c83a 	sub	r3,r2,r6
   8e810:	3825883a 	mov	r18,r7
   8e814:	003e3606 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e818:	0101ffc4 	movi	r4,2047
   8e81c:	493fc71e 	bne	r9,r4,8e73c <__alt_data_end+0xfffae73c>
   8e820:	2807883a 	mov	r3,r5
   8e824:	3023883a 	mov	r17,r6
   8e828:	4821883a 	mov	r16,r9
   8e82c:	003e3006 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e830:	10003626 	beq	r2,zero,8e90c <__subdf3+0x8a0>
   8e834:	2984b03a 	or	r2,r5,r6
   8e838:	10001726 	beq	r2,zero,8e898 <__subdf3+0x82c>
   8e83c:	1808d0fa 	srli	r4,r3,3
   8e840:	8822d0fa 	srli	r17,r17,3
   8e844:	1806977a 	slli	r3,r3,29
   8e848:	2080022c 	andhi	r2,r4,8
   8e84c:	1c62b03a 	or	r17,r3,r17
   8e850:	10000726 	beq	r2,zero,8e870 <__subdf3+0x804>
   8e854:	2812d0fa 	srli	r9,r5,3
   8e858:	4880022c 	andhi	r2,r9,8
   8e85c:	1000041e 	bne	r2,zero,8e870 <__subdf3+0x804>
   8e860:	300cd0fa 	srli	r6,r6,3
   8e864:	2804977a 	slli	r2,r5,29
   8e868:	4809883a 	mov	r4,r9
   8e86c:	11a2b03a 	or	r17,r2,r6
   8e870:	8806d77a 	srli	r3,r17,29
   8e874:	200890fa 	slli	r4,r4,3
   8e878:	882290fa 	slli	r17,r17,3
   8e87c:	3825883a 	mov	r18,r7
   8e880:	1906b03a 	or	r3,r3,r4
   8e884:	0401ffc4 	movi	r16,2047
   8e888:	003e1906 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e88c:	000b883a 	mov	r5,zero
   8e890:	0005883a 	mov	r2,zero
   8e894:	003e2e06 	br	8e150 <__alt_data_end+0xfffae150>
   8e898:	0401ffc4 	movi	r16,2047
   8e89c:	003e1406 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e8a0:	0005883a 	mov	r2,zero
   8e8a4:	003f7506 	br	8e67c <__alt_data_end+0xfffae67c>
   8e8a8:	0005883a 	mov	r2,zero
   8e8ac:	0009883a 	mov	r4,zero
   8e8b0:	003e7806 	br	8e294 <__alt_data_end+0xfffae294>
   8e8b4:	123ff804 	addi	r8,r2,-32
   8e8b8:	01000804 	movi	r4,32
   8e8bc:	1a10d83a 	srl	r8,r3,r8
   8e8c0:	11002526 	beq	r2,r4,8e958 <__subdf3+0x8ec>
   8e8c4:	01001004 	movi	r4,64
   8e8c8:	2085c83a 	sub	r2,r4,r2
   8e8cc:	1884983a 	sll	r2,r3,r2
   8e8d0:	1444b03a 	or	r2,r2,r17
   8e8d4:	1004c03a 	cmpne	r2,r2,zero
   8e8d8:	40a2b03a 	or	r17,r8,r2
   8e8dc:	0005883a 	mov	r2,zero
   8e8e0:	003f1606 	br	8e53c <__alt_data_end+0xfffae53c>
   8e8e4:	02000434 	movhi	r8,16
   8e8e8:	0009883a 	mov	r4,zero
   8e8ec:	423fffc4 	addi	r8,r8,-1
   8e8f0:	00bfffc4 	movi	r2,-1
   8e8f4:	0401ffc4 	movi	r16,2047
   8e8f8:	003e6606 	br	8e294 <__alt_data_end+0xfffae294>
   8e8fc:	1c62b03a 	or	r17,r3,r17
   8e900:	8822c03a 	cmpne	r17,r17,zero
   8e904:	0005883a 	mov	r2,zero
   8e908:	003f9906 	br	8e770 <__alt_data_end+0xfffae770>
   8e90c:	2807883a 	mov	r3,r5
   8e910:	3023883a 	mov	r17,r6
   8e914:	0401ffc4 	movi	r16,2047
   8e918:	003df506 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e91c:	2807883a 	mov	r3,r5
   8e920:	3023883a 	mov	r17,r6
   8e924:	003df206 	br	8e0f0 <__alt_data_end+0xfffae0f0>
   8e928:	123ff804 	addi	r8,r2,-32
   8e92c:	01000804 	movi	r4,32
   8e930:	1a10d83a 	srl	r8,r3,r8
   8e934:	11000a26 	beq	r2,r4,8e960 <__subdf3+0x8f4>
   8e938:	01001004 	movi	r4,64
   8e93c:	2085c83a 	sub	r2,r4,r2
   8e940:	1884983a 	sll	r2,r3,r2
   8e944:	1444b03a 	or	r2,r2,r17
   8e948:	1004c03a 	cmpne	r2,r2,zero
   8e94c:	40a2b03a 	or	r17,r8,r2
   8e950:	0005883a 	mov	r2,zero
   8e954:	003f8606 	br	8e770 <__alt_data_end+0xfffae770>
   8e958:	0005883a 	mov	r2,zero
   8e95c:	003fdc06 	br	8e8d0 <__alt_data_end+0xfffae8d0>
   8e960:	0005883a 	mov	r2,zero
   8e964:	003ff706 	br	8e944 <__alt_data_end+0xfffae944>

0008e968 <__fixdfsi>:
   8e968:	280cd53a 	srli	r6,r5,20
   8e96c:	00c00434 	movhi	r3,16
   8e970:	18ffffc4 	addi	r3,r3,-1
   8e974:	3181ffcc 	andi	r6,r6,2047
   8e978:	01c0ff84 	movi	r7,1022
   8e97c:	28c6703a 	and	r3,r5,r3
   8e980:	280ad7fa 	srli	r5,r5,31
   8e984:	3980120e 	bge	r7,r6,8e9d0 <__fixdfsi+0x68>
   8e988:	00810744 	movi	r2,1053
   8e98c:	11800c16 	blt	r2,r6,8e9c0 <__fixdfsi+0x58>
   8e990:	00810cc4 	movi	r2,1075
   8e994:	1185c83a 	sub	r2,r2,r6
   8e998:	01c007c4 	movi	r7,31
   8e99c:	18c00434 	orhi	r3,r3,16
   8e9a0:	38800d16 	blt	r7,r2,8e9d8 <__fixdfsi+0x70>
   8e9a4:	31befb44 	addi	r6,r6,-1043
   8e9a8:	2084d83a 	srl	r2,r4,r2
   8e9ac:	1986983a 	sll	r3,r3,r6
   8e9b0:	1884b03a 	or	r2,r3,r2
   8e9b4:	28000726 	beq	r5,zero,8e9d4 <__fixdfsi+0x6c>
   8e9b8:	0085c83a 	sub	r2,zero,r2
   8e9bc:	f800283a 	ret
   8e9c0:	00a00034 	movhi	r2,32768
   8e9c4:	10bfffc4 	addi	r2,r2,-1
   8e9c8:	2885883a 	add	r2,r5,r2
   8e9cc:	f800283a 	ret
   8e9d0:	0005883a 	mov	r2,zero
   8e9d4:	f800283a 	ret
   8e9d8:	008104c4 	movi	r2,1043
   8e9dc:	1185c83a 	sub	r2,r2,r6
   8e9e0:	1884d83a 	srl	r2,r3,r2
   8e9e4:	003ff306 	br	8e9b4 <__alt_data_end+0xfffae9b4>

0008e9e8 <__floatsidf>:
   8e9e8:	defffd04 	addi	sp,sp,-12
   8e9ec:	dfc00215 	stw	ra,8(sp)
   8e9f0:	dc400115 	stw	r17,4(sp)
   8e9f4:	dc000015 	stw	r16,0(sp)
   8e9f8:	20002b26 	beq	r4,zero,8eaa8 <__floatsidf+0xc0>
   8e9fc:	2023883a 	mov	r17,r4
   8ea00:	2020d7fa 	srli	r16,r4,31
   8ea04:	20002d16 	blt	r4,zero,8eabc <__floatsidf+0xd4>
   8ea08:	8809883a 	mov	r4,r17
   8ea0c:	008eb6c0 	call	8eb6c <__clzsi2>
   8ea10:	01410784 	movi	r5,1054
   8ea14:	288bc83a 	sub	r5,r5,r2
   8ea18:	01010cc4 	movi	r4,1075
   8ea1c:	2149c83a 	sub	r4,r4,r5
   8ea20:	00c007c4 	movi	r3,31
   8ea24:	1900160e 	bge	r3,r4,8ea80 <__floatsidf+0x98>
   8ea28:	00c104c4 	movi	r3,1043
   8ea2c:	1947c83a 	sub	r3,r3,r5
   8ea30:	88c6983a 	sll	r3,r17,r3
   8ea34:	00800434 	movhi	r2,16
   8ea38:	10bfffc4 	addi	r2,r2,-1
   8ea3c:	1886703a 	and	r3,r3,r2
   8ea40:	2941ffcc 	andi	r5,r5,2047
   8ea44:	800d883a 	mov	r6,r16
   8ea48:	0005883a 	mov	r2,zero
   8ea4c:	280a953a 	slli	r5,r5,20
   8ea50:	31803fcc 	andi	r6,r6,255
   8ea54:	01000434 	movhi	r4,16
   8ea58:	300c97fa 	slli	r6,r6,31
   8ea5c:	213fffc4 	addi	r4,r4,-1
   8ea60:	1906703a 	and	r3,r3,r4
   8ea64:	1946b03a 	or	r3,r3,r5
   8ea68:	1986b03a 	or	r3,r3,r6
   8ea6c:	dfc00217 	ldw	ra,8(sp)
   8ea70:	dc400117 	ldw	r17,4(sp)
   8ea74:	dc000017 	ldw	r16,0(sp)
   8ea78:	dec00304 	addi	sp,sp,12
   8ea7c:	f800283a 	ret
   8ea80:	00c002c4 	movi	r3,11
   8ea84:	1887c83a 	sub	r3,r3,r2
   8ea88:	88c6d83a 	srl	r3,r17,r3
   8ea8c:	8904983a 	sll	r2,r17,r4
   8ea90:	01000434 	movhi	r4,16
   8ea94:	213fffc4 	addi	r4,r4,-1
   8ea98:	2941ffcc 	andi	r5,r5,2047
   8ea9c:	1906703a 	and	r3,r3,r4
   8eaa0:	800d883a 	mov	r6,r16
   8eaa4:	003fe906 	br	8ea4c <__alt_data_end+0xfffaea4c>
   8eaa8:	000d883a 	mov	r6,zero
   8eaac:	000b883a 	mov	r5,zero
   8eab0:	0007883a 	mov	r3,zero
   8eab4:	0005883a 	mov	r2,zero
   8eab8:	003fe406 	br	8ea4c <__alt_data_end+0xfffaea4c>
   8eabc:	0123c83a 	sub	r17,zero,r4
   8eac0:	003fd106 	br	8ea08 <__alt_data_end+0xfffaea08>

0008eac4 <__floatunsidf>:
   8eac4:	defffe04 	addi	sp,sp,-8
   8eac8:	dc000015 	stw	r16,0(sp)
   8eacc:	dfc00115 	stw	ra,4(sp)
   8ead0:	2021883a 	mov	r16,r4
   8ead4:	20002226 	beq	r4,zero,8eb60 <__floatunsidf+0x9c>
   8ead8:	008eb6c0 	call	8eb6c <__clzsi2>
   8eadc:	01010784 	movi	r4,1054
   8eae0:	2089c83a 	sub	r4,r4,r2
   8eae4:	01810cc4 	movi	r6,1075
   8eae8:	310dc83a 	sub	r6,r6,r4
   8eaec:	00c007c4 	movi	r3,31
   8eaf0:	1980120e 	bge	r3,r6,8eb3c <__floatunsidf+0x78>
   8eaf4:	00c104c4 	movi	r3,1043
   8eaf8:	1907c83a 	sub	r3,r3,r4
   8eafc:	80ca983a 	sll	r5,r16,r3
   8eb00:	00800434 	movhi	r2,16
   8eb04:	10bfffc4 	addi	r2,r2,-1
   8eb08:	2101ffcc 	andi	r4,r4,2047
   8eb0c:	0021883a 	mov	r16,zero
   8eb10:	288a703a 	and	r5,r5,r2
   8eb14:	2008953a 	slli	r4,r4,20
   8eb18:	00c00434 	movhi	r3,16
   8eb1c:	18ffffc4 	addi	r3,r3,-1
   8eb20:	28c6703a 	and	r3,r5,r3
   8eb24:	8005883a 	mov	r2,r16
   8eb28:	1906b03a 	or	r3,r3,r4
   8eb2c:	dfc00117 	ldw	ra,4(sp)
   8eb30:	dc000017 	ldw	r16,0(sp)
   8eb34:	dec00204 	addi	sp,sp,8
   8eb38:	f800283a 	ret
   8eb3c:	00c002c4 	movi	r3,11
   8eb40:	188bc83a 	sub	r5,r3,r2
   8eb44:	814ad83a 	srl	r5,r16,r5
   8eb48:	00c00434 	movhi	r3,16
   8eb4c:	18ffffc4 	addi	r3,r3,-1
   8eb50:	81a0983a 	sll	r16,r16,r6
   8eb54:	2101ffcc 	andi	r4,r4,2047
   8eb58:	28ca703a 	and	r5,r5,r3
   8eb5c:	003fed06 	br	8eb14 <__alt_data_end+0xfffaeb14>
   8eb60:	0009883a 	mov	r4,zero
   8eb64:	000b883a 	mov	r5,zero
   8eb68:	003fea06 	br	8eb14 <__alt_data_end+0xfffaeb14>

0008eb6c <__clzsi2>:
   8eb6c:	00bfffd4 	movui	r2,65535
   8eb70:	11000536 	bltu	r2,r4,8eb88 <__clzsi2+0x1c>
   8eb74:	00803fc4 	movi	r2,255
   8eb78:	11000f36 	bltu	r2,r4,8ebb8 <__clzsi2+0x4c>
   8eb7c:	00800804 	movi	r2,32
   8eb80:	0007883a 	mov	r3,zero
   8eb84:	00000506 	br	8eb9c <__clzsi2+0x30>
   8eb88:	00804034 	movhi	r2,256
   8eb8c:	10bfffc4 	addi	r2,r2,-1
   8eb90:	11000c2e 	bgeu	r2,r4,8ebc4 <__clzsi2+0x58>
   8eb94:	00800204 	movi	r2,8
   8eb98:	00c00604 	movi	r3,24
   8eb9c:	20c8d83a 	srl	r4,r4,r3
   8eba0:	00c00274 	movhi	r3,9
   8eba4:	18c5b704 	addi	r3,r3,5852
   8eba8:	1909883a 	add	r4,r3,r4
   8ebac:	20c00003 	ldbu	r3,0(r4)
   8ebb0:	10c5c83a 	sub	r2,r2,r3
   8ebb4:	f800283a 	ret
   8ebb8:	00800604 	movi	r2,24
   8ebbc:	00c00204 	movi	r3,8
   8ebc0:	003ff606 	br	8eb9c <__alt_data_end+0xfffaeb9c>
   8ebc4:	00800404 	movi	r2,16
   8ebc8:	1007883a 	mov	r3,r2
   8ebcc:	003ff306 	br	8eb9c <__alt_data_end+0xfffaeb9c>

0008ebd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ebd0:	defffe04 	addi	sp,sp,-8
   8ebd4:	dfc00115 	stw	ra,4(sp)
   8ebd8:	df000015 	stw	fp,0(sp)
   8ebdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ebe0:	d0a00b17 	ldw	r2,-32724(gp)
   8ebe4:	10000326 	beq	r2,zero,8ebf4 <alt_get_errno+0x24>
   8ebe8:	d0a00b17 	ldw	r2,-32724(gp)
   8ebec:	103ee83a 	callr	r2
   8ebf0:	00000106 	br	8ebf8 <alt_get_errno+0x28>
   8ebf4:	d0a9a104 	addi	r2,gp,-22908
}
   8ebf8:	e037883a 	mov	sp,fp
   8ebfc:	dfc00117 	ldw	ra,4(sp)
   8ec00:	df000017 	ldw	fp,0(sp)
   8ec04:	dec00204 	addi	sp,sp,8
   8ec08:	f800283a 	ret

0008ec0c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8ec0c:	defffb04 	addi	sp,sp,-20
   8ec10:	dfc00415 	stw	ra,16(sp)
   8ec14:	df000315 	stw	fp,12(sp)
   8ec18:	df000304 	addi	fp,sp,12
   8ec1c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8ec20:	e0bfff17 	ldw	r2,-4(fp)
   8ec24:	10000816 	blt	r2,zero,8ec48 <close+0x3c>
   8ec28:	01400304 	movi	r5,12
   8ec2c:	e13fff17 	ldw	r4,-4(fp)
   8ec30:	0081b340 	call	81b34 <__mulsi3>
   8ec34:	1007883a 	mov	r3,r2
   8ec38:	00800274 	movhi	r2,9
   8ec3c:	108b0504 	addi	r2,r2,11284
   8ec40:	1885883a 	add	r2,r3,r2
   8ec44:	00000106 	br	8ec4c <close+0x40>
   8ec48:	0005883a 	mov	r2,zero
   8ec4c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8ec50:	e0bffd17 	ldw	r2,-12(fp)
   8ec54:	10001926 	beq	r2,zero,8ecbc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8ec58:	e0bffd17 	ldw	r2,-12(fp)
   8ec5c:	10800017 	ldw	r2,0(r2)
   8ec60:	10800417 	ldw	r2,16(r2)
   8ec64:	10000626 	beq	r2,zero,8ec80 <close+0x74>
   8ec68:	e0bffd17 	ldw	r2,-12(fp)
   8ec6c:	10800017 	ldw	r2,0(r2)
   8ec70:	10800417 	ldw	r2,16(r2)
   8ec74:	e13ffd17 	ldw	r4,-12(fp)
   8ec78:	103ee83a 	callr	r2
   8ec7c:	00000106 	br	8ec84 <close+0x78>
   8ec80:	0005883a 	mov	r2,zero
   8ec84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8ec88:	e13fff17 	ldw	r4,-4(fp)
   8ec8c:	008f3300 	call	8f330 <alt_release_fd>
    if (rval < 0)
   8ec90:	e0bffe17 	ldw	r2,-8(fp)
   8ec94:	1000070e 	bge	r2,zero,8ecb4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   8ec98:	008ebd00 	call	8ebd0 <alt_get_errno>
   8ec9c:	1007883a 	mov	r3,r2
   8eca0:	e0bffe17 	ldw	r2,-8(fp)
   8eca4:	0085c83a 	sub	r2,zero,r2
   8eca8:	18800015 	stw	r2,0(r3)
      return -1;
   8ecac:	00bfffc4 	movi	r2,-1
   8ecb0:	00000706 	br	8ecd0 <close+0xc4>
    }
    return 0;
   8ecb4:	0005883a 	mov	r2,zero
   8ecb8:	00000506 	br	8ecd0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8ecbc:	008ebd00 	call	8ebd0 <alt_get_errno>
   8ecc0:	1007883a 	mov	r3,r2
   8ecc4:	00801444 	movi	r2,81
   8ecc8:	18800015 	stw	r2,0(r3)
    return -1;
   8eccc:	00bfffc4 	movi	r2,-1
  }
}
   8ecd0:	e037883a 	mov	sp,fp
   8ecd4:	dfc00117 	ldw	ra,4(sp)
   8ecd8:	df000017 	ldw	fp,0(sp)
   8ecdc:	dec00204 	addi	sp,sp,8
   8ece0:	f800283a 	ret

0008ece4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8ece4:	defffc04 	addi	sp,sp,-16
   8ece8:	df000315 	stw	fp,12(sp)
   8ecec:	df000304 	addi	fp,sp,12
   8ecf0:	e13ffd15 	stw	r4,-12(fp)
   8ecf4:	e17ffe15 	stw	r5,-8(fp)
   8ecf8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8ecfc:	e0bfff17 	ldw	r2,-4(fp)
}
   8ed00:	e037883a 	mov	sp,fp
   8ed04:	df000017 	ldw	fp,0(sp)
   8ed08:	dec00104 	addi	sp,sp,4
   8ed0c:	f800283a 	ret

0008ed10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ed10:	defffe04 	addi	sp,sp,-8
   8ed14:	dfc00115 	stw	ra,4(sp)
   8ed18:	df000015 	stw	fp,0(sp)
   8ed1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ed20:	d0a00b17 	ldw	r2,-32724(gp)
   8ed24:	10000326 	beq	r2,zero,8ed34 <alt_get_errno+0x24>
   8ed28:	d0a00b17 	ldw	r2,-32724(gp)
   8ed2c:	103ee83a 	callr	r2
   8ed30:	00000106 	br	8ed38 <alt_get_errno+0x28>
   8ed34:	d0a9a104 	addi	r2,gp,-22908
}
   8ed38:	e037883a 	mov	sp,fp
   8ed3c:	dfc00117 	ldw	ra,4(sp)
   8ed40:	df000017 	ldw	fp,0(sp)
   8ed44:	dec00204 	addi	sp,sp,8
   8ed48:	f800283a 	ret

0008ed4c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8ed4c:	defffb04 	addi	sp,sp,-20
   8ed50:	dfc00415 	stw	ra,16(sp)
   8ed54:	df000315 	stw	fp,12(sp)
   8ed58:	df000304 	addi	fp,sp,12
   8ed5c:	e13ffe15 	stw	r4,-8(fp)
   8ed60:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ed64:	e0bffe17 	ldw	r2,-8(fp)
   8ed68:	10000816 	blt	r2,zero,8ed8c <fstat+0x40>
   8ed6c:	01400304 	movi	r5,12
   8ed70:	e13ffe17 	ldw	r4,-8(fp)
   8ed74:	0081b340 	call	81b34 <__mulsi3>
   8ed78:	1007883a 	mov	r3,r2
   8ed7c:	00800274 	movhi	r2,9
   8ed80:	108b0504 	addi	r2,r2,11284
   8ed84:	1885883a 	add	r2,r3,r2
   8ed88:	00000106 	br	8ed90 <fstat+0x44>
   8ed8c:	0005883a 	mov	r2,zero
   8ed90:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8ed94:	e0bffd17 	ldw	r2,-12(fp)
   8ed98:	10001026 	beq	r2,zero,8eddc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8ed9c:	e0bffd17 	ldw	r2,-12(fp)
   8eda0:	10800017 	ldw	r2,0(r2)
   8eda4:	10800817 	ldw	r2,32(r2)
   8eda8:	10000726 	beq	r2,zero,8edc8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   8edac:	e0bffd17 	ldw	r2,-12(fp)
   8edb0:	10800017 	ldw	r2,0(r2)
   8edb4:	10800817 	ldw	r2,32(r2)
   8edb8:	e17fff17 	ldw	r5,-4(fp)
   8edbc:	e13ffd17 	ldw	r4,-12(fp)
   8edc0:	103ee83a 	callr	r2
   8edc4:	00000a06 	br	8edf0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8edc8:	e0bfff17 	ldw	r2,-4(fp)
   8edcc:	00c80004 	movi	r3,8192
   8edd0:	10c00115 	stw	r3,4(r2)
      return 0;
   8edd4:	0005883a 	mov	r2,zero
   8edd8:	00000506 	br	8edf0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8eddc:	008ed100 	call	8ed10 <alt_get_errno>
   8ede0:	1007883a 	mov	r3,r2
   8ede4:	00801444 	movi	r2,81
   8ede8:	18800015 	stw	r2,0(r3)
    return -1;
   8edec:	00bfffc4 	movi	r2,-1
  }
}
   8edf0:	e037883a 	mov	sp,fp
   8edf4:	dfc00117 	ldw	ra,4(sp)
   8edf8:	df000017 	ldw	fp,0(sp)
   8edfc:	dec00204 	addi	sp,sp,8
   8ee00:	f800283a 	ret

0008ee04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ee04:	defffe04 	addi	sp,sp,-8
   8ee08:	dfc00115 	stw	ra,4(sp)
   8ee0c:	df000015 	stw	fp,0(sp)
   8ee10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ee14:	d0a00b17 	ldw	r2,-32724(gp)
   8ee18:	10000326 	beq	r2,zero,8ee28 <alt_get_errno+0x24>
   8ee1c:	d0a00b17 	ldw	r2,-32724(gp)
   8ee20:	103ee83a 	callr	r2
   8ee24:	00000106 	br	8ee2c <alt_get_errno+0x28>
   8ee28:	d0a9a104 	addi	r2,gp,-22908
}
   8ee2c:	e037883a 	mov	sp,fp
   8ee30:	dfc00117 	ldw	ra,4(sp)
   8ee34:	df000017 	ldw	fp,0(sp)
   8ee38:	dec00204 	addi	sp,sp,8
   8ee3c:	f800283a 	ret

0008ee40 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8ee40:	deffed04 	addi	sp,sp,-76
   8ee44:	dfc01215 	stw	ra,72(sp)
   8ee48:	df001115 	stw	fp,68(sp)
   8ee4c:	df001104 	addi	fp,sp,68
   8ee50:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ee54:	e0bfff17 	ldw	r2,-4(fp)
   8ee58:	10000816 	blt	r2,zero,8ee7c <isatty+0x3c>
   8ee5c:	01400304 	movi	r5,12
   8ee60:	e13fff17 	ldw	r4,-4(fp)
   8ee64:	0081b340 	call	81b34 <__mulsi3>
   8ee68:	1007883a 	mov	r3,r2
   8ee6c:	00800274 	movhi	r2,9
   8ee70:	108b0504 	addi	r2,r2,11284
   8ee74:	1885883a 	add	r2,r3,r2
   8ee78:	00000106 	br	8ee80 <isatty+0x40>
   8ee7c:	0005883a 	mov	r2,zero
   8ee80:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8ee84:	e0bfef17 	ldw	r2,-68(fp)
   8ee88:	10000e26 	beq	r2,zero,8eec4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8ee8c:	e0bfef17 	ldw	r2,-68(fp)
   8ee90:	10800017 	ldw	r2,0(r2)
   8ee94:	10800817 	ldw	r2,32(r2)
   8ee98:	1000021e 	bne	r2,zero,8eea4 <isatty+0x64>
    {
      return 1;
   8ee9c:	00800044 	movi	r2,1
   8eea0:	00000d06 	br	8eed8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8eea4:	e0bff004 	addi	r2,fp,-64
   8eea8:	100b883a 	mov	r5,r2
   8eeac:	e13fff17 	ldw	r4,-4(fp)
   8eeb0:	008ed4c0 	call	8ed4c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8eeb4:	e0bff117 	ldw	r2,-60(fp)
   8eeb8:	10880020 	cmpeqi	r2,r2,8192
   8eebc:	10803fcc 	andi	r2,r2,255
   8eec0:	00000506 	br	8eed8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8eec4:	008ee040 	call	8ee04 <alt_get_errno>
   8eec8:	1007883a 	mov	r3,r2
   8eecc:	00801444 	movi	r2,81
   8eed0:	18800015 	stw	r2,0(r3)
    return 0;
   8eed4:	0005883a 	mov	r2,zero
  }
}
   8eed8:	e037883a 	mov	sp,fp
   8eedc:	dfc00117 	ldw	ra,4(sp)
   8eee0:	df000017 	ldw	fp,0(sp)
   8eee4:	dec00204 	addi	sp,sp,8
   8eee8:	f800283a 	ret

0008eeec <alt_load_section>:
   8eeec:	defffc04 	addi	sp,sp,-16
   8eef0:	df000315 	stw	fp,12(sp)
   8eef4:	df000304 	addi	fp,sp,12
   8eef8:	e13ffd15 	stw	r4,-12(fp)
   8eefc:	e17ffe15 	stw	r5,-8(fp)
   8ef00:	e1bfff15 	stw	r6,-4(fp)
   8ef04:	e0fffe17 	ldw	r3,-8(fp)
   8ef08:	e0bffd17 	ldw	r2,-12(fp)
   8ef0c:	18800c26 	beq	r3,r2,8ef40 <alt_load_section+0x54>
   8ef10:	00000806 	br	8ef34 <alt_load_section+0x48>
   8ef14:	e0bffe17 	ldw	r2,-8(fp)
   8ef18:	10c00104 	addi	r3,r2,4
   8ef1c:	e0fffe15 	stw	r3,-8(fp)
   8ef20:	e0fffd17 	ldw	r3,-12(fp)
   8ef24:	19000104 	addi	r4,r3,4
   8ef28:	e13ffd15 	stw	r4,-12(fp)
   8ef2c:	18c00017 	ldw	r3,0(r3)
   8ef30:	10c00015 	stw	r3,0(r2)
   8ef34:	e0fffe17 	ldw	r3,-8(fp)
   8ef38:	e0bfff17 	ldw	r2,-4(fp)
   8ef3c:	18bff51e 	bne	r3,r2,8ef14 <__alt_data_end+0xfffaef14>
   8ef40:	0001883a 	nop
   8ef44:	e037883a 	mov	sp,fp
   8ef48:	df000017 	ldw	fp,0(sp)
   8ef4c:	dec00104 	addi	sp,sp,4
   8ef50:	f800283a 	ret

0008ef54 <alt_load>:
   8ef54:	defffe04 	addi	sp,sp,-8
   8ef58:	dfc00115 	stw	ra,4(sp)
   8ef5c:	df000015 	stw	fp,0(sp)
   8ef60:	d839883a 	mov	fp,sp
   8ef64:	01800274 	movhi	r6,9
   8ef68:	318f8d04 	addi	r6,r6,15924
   8ef6c:	01400274 	movhi	r5,9
   8ef70:	29460204 	addi	r5,r5,6152
   8ef74:	01000274 	movhi	r4,9
   8ef78:	210f8d04 	addi	r4,r4,15924
   8ef7c:	008eeec0 	call	8eeec <alt_load_section>
   8ef80:	01800234 	movhi	r6,8
   8ef84:	31808c04 	addi	r6,r6,560
   8ef88:	01400234 	movhi	r5,8
   8ef8c:	29400804 	addi	r5,r5,32
   8ef90:	01000234 	movhi	r4,8
   8ef94:	21000804 	addi	r4,r4,32
   8ef98:	008eeec0 	call	8eeec <alt_load_section>
   8ef9c:	01800274 	movhi	r6,9
   8efa0:	31860204 	addi	r6,r6,6152
   8efa4:	01400274 	movhi	r5,9
   8efa8:	2944d504 	addi	r5,r5,4948
   8efac:	01000274 	movhi	r4,9
   8efb0:	2104d504 	addi	r4,r4,4948
   8efb4:	008eeec0 	call	8eeec <alt_load_section>
   8efb8:	00901e80 	call	901e8 <alt_dcache_flush_all>
   8efbc:	00903a80 	call	903a8 <alt_icache_flush_all>
   8efc0:	0001883a 	nop
   8efc4:	e037883a 	mov	sp,fp
   8efc8:	dfc00117 	ldw	ra,4(sp)
   8efcc:	df000017 	ldw	fp,0(sp)
   8efd0:	dec00204 	addi	sp,sp,8
   8efd4:	f800283a 	ret

0008efd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8efd8:	defffe04 	addi	sp,sp,-8
   8efdc:	dfc00115 	stw	ra,4(sp)
   8efe0:	df000015 	stw	fp,0(sp)
   8efe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8efe8:	d0a00b17 	ldw	r2,-32724(gp)
   8efec:	10000326 	beq	r2,zero,8effc <alt_get_errno+0x24>
   8eff0:	d0a00b17 	ldw	r2,-32724(gp)
   8eff4:	103ee83a 	callr	r2
   8eff8:	00000106 	br	8f000 <alt_get_errno+0x28>
   8effc:	d0a9a104 	addi	r2,gp,-22908
}
   8f000:	e037883a 	mov	sp,fp
   8f004:	dfc00117 	ldw	ra,4(sp)
   8f008:	df000017 	ldw	fp,0(sp)
   8f00c:	dec00204 	addi	sp,sp,8
   8f010:	f800283a 	ret

0008f014 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8f014:	defff904 	addi	sp,sp,-28
   8f018:	dfc00615 	stw	ra,24(sp)
   8f01c:	df000515 	stw	fp,20(sp)
   8f020:	df000504 	addi	fp,sp,20
   8f024:	e13ffd15 	stw	r4,-12(fp)
   8f028:	e17ffe15 	stw	r5,-8(fp)
   8f02c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8f030:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8f034:	e0bffd17 	ldw	r2,-12(fp)
   8f038:	10000816 	blt	r2,zero,8f05c <lseek+0x48>
   8f03c:	01400304 	movi	r5,12
   8f040:	e13ffd17 	ldw	r4,-12(fp)
   8f044:	0081b340 	call	81b34 <__mulsi3>
   8f048:	1007883a 	mov	r3,r2
   8f04c:	00800274 	movhi	r2,9
   8f050:	108b0504 	addi	r2,r2,11284
   8f054:	1885883a 	add	r2,r3,r2
   8f058:	00000106 	br	8f060 <lseek+0x4c>
   8f05c:	0005883a 	mov	r2,zero
   8f060:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8f064:	e0bffc17 	ldw	r2,-16(fp)
   8f068:	10001026 	beq	r2,zero,8f0ac <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8f06c:	e0bffc17 	ldw	r2,-16(fp)
   8f070:	10800017 	ldw	r2,0(r2)
   8f074:	10800717 	ldw	r2,28(r2)
   8f078:	10000926 	beq	r2,zero,8f0a0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8f07c:	e0bffc17 	ldw	r2,-16(fp)
   8f080:	10800017 	ldw	r2,0(r2)
   8f084:	10800717 	ldw	r2,28(r2)
   8f088:	e1bfff17 	ldw	r6,-4(fp)
   8f08c:	e17ffe17 	ldw	r5,-8(fp)
   8f090:	e13ffc17 	ldw	r4,-16(fp)
   8f094:	103ee83a 	callr	r2
   8f098:	e0bffb15 	stw	r2,-20(fp)
   8f09c:	00000506 	br	8f0b4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8f0a0:	00bfde84 	movi	r2,-134
   8f0a4:	e0bffb15 	stw	r2,-20(fp)
   8f0a8:	00000206 	br	8f0b4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   8f0ac:	00bfebc4 	movi	r2,-81
   8f0b0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8f0b4:	e0bffb17 	ldw	r2,-20(fp)
   8f0b8:	1000070e 	bge	r2,zero,8f0d8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   8f0bc:	008efd80 	call	8efd8 <alt_get_errno>
   8f0c0:	1007883a 	mov	r3,r2
   8f0c4:	e0bffb17 	ldw	r2,-20(fp)
   8f0c8:	0085c83a 	sub	r2,zero,r2
   8f0cc:	18800015 	stw	r2,0(r3)
    rc = -1;
   8f0d0:	00bfffc4 	movi	r2,-1
   8f0d4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8f0d8:	e0bffb17 	ldw	r2,-20(fp)
}
   8f0dc:	e037883a 	mov	sp,fp
   8f0e0:	dfc00117 	ldw	ra,4(sp)
   8f0e4:	df000017 	ldw	fp,0(sp)
   8f0e8:	dec00204 	addi	sp,sp,8
   8f0ec:	f800283a 	ret

0008f0f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8f0f0:	defffd04 	addi	sp,sp,-12
   8f0f4:	dfc00215 	stw	ra,8(sp)
   8f0f8:	df000115 	stw	fp,4(sp)
   8f0fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8f100:	0009883a 	mov	r4,zero
   8f104:	008f5d40 	call	8f5d4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8f108:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8f10c:	008f60c0 	call	8f60c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8f110:	01800274 	movhi	r6,9
   8f114:	3185fa04 	addi	r6,r6,6120
   8f118:	01400274 	movhi	r5,9
   8f11c:	2945fa04 	addi	r5,r5,6120
   8f120:	01000274 	movhi	r4,9
   8f124:	2105fa04 	addi	r4,r4,6120
   8f128:	009074c0 	call	9074c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8f12c:	00902e80 	call	902e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8f130:	01000274 	movhi	r4,9
   8f134:	2100d204 	addi	r4,r4,840
   8f138:	0090f0c0 	call	90f0c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8f13c:	d0a9a217 	ldw	r2,-22904(gp)
   8f140:	d0e9a317 	ldw	r3,-22900(gp)
   8f144:	d129a417 	ldw	r4,-22896(gp)
   8f148:	200d883a 	mov	r6,r4
   8f14c:	180b883a 	mov	r5,r3
   8f150:	1009883a 	mov	r4,r2
   8f154:	0080bb40 	call	80bb4 <main>
   8f158:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8f15c:	01000044 	movi	r4,1
   8f160:	008ec0c0 	call	8ec0c <close>
  exit (result);
   8f164:	e13fff17 	ldw	r4,-4(fp)
   8f168:	0090f200 	call	90f20 <exit>

0008f16c <__malloc_lock>:
   8f16c:	defffe04 	addi	sp,sp,-8
   8f170:	df000115 	stw	fp,4(sp)
   8f174:	df000104 	addi	fp,sp,4
   8f178:	e13fff15 	stw	r4,-4(fp)
   8f17c:	0001883a 	nop
   8f180:	e037883a 	mov	sp,fp
   8f184:	df000017 	ldw	fp,0(sp)
   8f188:	dec00104 	addi	sp,sp,4
   8f18c:	f800283a 	ret

0008f190 <__malloc_unlock>:
   8f190:	defffe04 	addi	sp,sp,-8
   8f194:	df000115 	stw	fp,4(sp)
   8f198:	df000104 	addi	fp,sp,4
   8f19c:	e13fff15 	stw	r4,-4(fp)
   8f1a0:	0001883a 	nop
   8f1a4:	e037883a 	mov	sp,fp
   8f1a8:	df000017 	ldw	fp,0(sp)
   8f1ac:	dec00104 	addi	sp,sp,4
   8f1b0:	f800283a 	ret

0008f1b4 <alt_putstr>:
   8f1b4:	defffd04 	addi	sp,sp,-12
   8f1b8:	dfc00215 	stw	ra,8(sp)
   8f1bc:	df000115 	stw	fp,4(sp)
   8f1c0:	df000104 	addi	fp,sp,4
   8f1c4:	e13fff15 	stw	r4,-4(fp)
   8f1c8:	d0a00117 	ldw	r2,-32764(gp)
   8f1cc:	10800217 	ldw	r2,8(r2)
   8f1d0:	100b883a 	mov	r5,r2
   8f1d4:	e13fff17 	ldw	r4,-4(fp)
   8f1d8:	0090ff40 	call	90ff4 <fputs>
   8f1dc:	e037883a 	mov	sp,fp
   8f1e0:	dfc00117 	ldw	ra,4(sp)
   8f1e4:	df000017 	ldw	fp,0(sp)
   8f1e8:	dec00204 	addi	sp,sp,8
   8f1ec:	f800283a 	ret

0008f1f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8f1f0:	defffe04 	addi	sp,sp,-8
   8f1f4:	dfc00115 	stw	ra,4(sp)
   8f1f8:	df000015 	stw	fp,0(sp)
   8f1fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8f200:	d0a00b17 	ldw	r2,-32724(gp)
   8f204:	10000326 	beq	r2,zero,8f214 <alt_get_errno+0x24>
   8f208:	d0a00b17 	ldw	r2,-32724(gp)
   8f20c:	103ee83a 	callr	r2
   8f210:	00000106 	br	8f218 <alt_get_errno+0x28>
   8f214:	d0a9a104 	addi	r2,gp,-22908
}
   8f218:	e037883a 	mov	sp,fp
   8f21c:	dfc00117 	ldw	ra,4(sp)
   8f220:	df000017 	ldw	fp,0(sp)
   8f224:	dec00204 	addi	sp,sp,8
   8f228:	f800283a 	ret

0008f22c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8f22c:	defff904 	addi	sp,sp,-28
   8f230:	dfc00615 	stw	ra,24(sp)
   8f234:	df000515 	stw	fp,20(sp)
   8f238:	df000504 	addi	fp,sp,20
   8f23c:	e13ffd15 	stw	r4,-12(fp)
   8f240:	e17ffe15 	stw	r5,-8(fp)
   8f244:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8f248:	e0bffd17 	ldw	r2,-12(fp)
   8f24c:	10000816 	blt	r2,zero,8f270 <read+0x44>
   8f250:	01400304 	movi	r5,12
   8f254:	e13ffd17 	ldw	r4,-12(fp)
   8f258:	0081b340 	call	81b34 <__mulsi3>
   8f25c:	1007883a 	mov	r3,r2
   8f260:	00800274 	movhi	r2,9
   8f264:	108b0504 	addi	r2,r2,11284
   8f268:	1885883a 	add	r2,r3,r2
   8f26c:	00000106 	br	8f274 <read+0x48>
   8f270:	0005883a 	mov	r2,zero
   8f274:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8f278:	e0bffb17 	ldw	r2,-20(fp)
   8f27c:	10002226 	beq	r2,zero,8f308 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8f280:	e0bffb17 	ldw	r2,-20(fp)
   8f284:	10800217 	ldw	r2,8(r2)
   8f288:	108000cc 	andi	r2,r2,3
   8f28c:	10800060 	cmpeqi	r2,r2,1
   8f290:	1000181e 	bne	r2,zero,8f2f4 <read+0xc8>
        (fd->dev->read))
   8f294:	e0bffb17 	ldw	r2,-20(fp)
   8f298:	10800017 	ldw	r2,0(r2)
   8f29c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8f2a0:	10001426 	beq	r2,zero,8f2f4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8f2a4:	e0bffb17 	ldw	r2,-20(fp)
   8f2a8:	10800017 	ldw	r2,0(r2)
   8f2ac:	10800517 	ldw	r2,20(r2)
   8f2b0:	e0ffff17 	ldw	r3,-4(fp)
   8f2b4:	180d883a 	mov	r6,r3
   8f2b8:	e17ffe17 	ldw	r5,-8(fp)
   8f2bc:	e13ffb17 	ldw	r4,-20(fp)
   8f2c0:	103ee83a 	callr	r2
   8f2c4:	e0bffc15 	stw	r2,-16(fp)
   8f2c8:	e0bffc17 	ldw	r2,-16(fp)
   8f2cc:	1000070e 	bge	r2,zero,8f2ec <read+0xc0>
        {
          ALT_ERRNO = -rval;
   8f2d0:	008f1f00 	call	8f1f0 <alt_get_errno>
   8f2d4:	1007883a 	mov	r3,r2
   8f2d8:	e0bffc17 	ldw	r2,-16(fp)
   8f2dc:	0085c83a 	sub	r2,zero,r2
   8f2e0:	18800015 	stw	r2,0(r3)
          return -1;
   8f2e4:	00bfffc4 	movi	r2,-1
   8f2e8:	00000c06 	br	8f31c <read+0xf0>
        }
        return rval;
   8f2ec:	e0bffc17 	ldw	r2,-16(fp)
   8f2f0:	00000a06 	br	8f31c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8f2f4:	008f1f00 	call	8f1f0 <alt_get_errno>
   8f2f8:	1007883a 	mov	r3,r2
   8f2fc:	00800344 	movi	r2,13
   8f300:	18800015 	stw	r2,0(r3)
   8f304:	00000406 	br	8f318 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8f308:	008f1f00 	call	8f1f0 <alt_get_errno>
   8f30c:	1007883a 	mov	r3,r2
   8f310:	00801444 	movi	r2,81
   8f314:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8f318:	00bfffc4 	movi	r2,-1
}
   8f31c:	e037883a 	mov	sp,fp
   8f320:	dfc00117 	ldw	ra,4(sp)
   8f324:	df000017 	ldw	fp,0(sp)
   8f328:	dec00204 	addi	sp,sp,8
   8f32c:	f800283a 	ret

0008f330 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8f330:	defffc04 	addi	sp,sp,-16
   8f334:	dfc00315 	stw	ra,12(sp)
   8f338:	df000215 	stw	fp,8(sp)
   8f33c:	dc000115 	stw	r16,4(sp)
   8f340:	df000204 	addi	fp,sp,8
   8f344:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   8f348:	e0bffe17 	ldw	r2,-8(fp)
   8f34c:	108000d0 	cmplti	r2,r2,3
   8f350:	1000111e 	bne	r2,zero,8f398 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   8f354:	04000274 	movhi	r16,9
   8f358:	840b0504 	addi	r16,r16,11284
   8f35c:	e0bffe17 	ldw	r2,-8(fp)
   8f360:	01400304 	movi	r5,12
   8f364:	1009883a 	mov	r4,r2
   8f368:	0081b340 	call	81b34 <__mulsi3>
   8f36c:	8085883a 	add	r2,r16,r2
   8f370:	10800204 	addi	r2,r2,8
   8f374:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8f378:	04000274 	movhi	r16,9
   8f37c:	840b0504 	addi	r16,r16,11284
   8f380:	e0bffe17 	ldw	r2,-8(fp)
   8f384:	01400304 	movi	r5,12
   8f388:	1009883a 	mov	r4,r2
   8f38c:	0081b340 	call	81b34 <__mulsi3>
   8f390:	8085883a 	add	r2,r16,r2
   8f394:	10000015 	stw	zero,0(r2)
  }
}
   8f398:	0001883a 	nop
   8f39c:	e6ffff04 	addi	sp,fp,-4
   8f3a0:	dfc00217 	ldw	ra,8(sp)
   8f3a4:	df000117 	ldw	fp,4(sp)
   8f3a8:	dc000017 	ldw	r16,0(sp)
   8f3ac:	dec00304 	addi	sp,sp,12
   8f3b0:	f800283a 	ret

0008f3b4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8f3b4:	defff904 	addi	sp,sp,-28
   8f3b8:	df000615 	stw	fp,24(sp)
   8f3bc:	df000604 	addi	fp,sp,24
   8f3c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f3c4:	0005303a 	rdctl	r2,status
   8f3c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f3cc:	e0fffe17 	ldw	r3,-8(fp)
   8f3d0:	00bfff84 	movi	r2,-2
   8f3d4:	1884703a 	and	r2,r3,r2
   8f3d8:	1001703a 	wrctl	status,r2
  
  return context;
   8f3dc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8f3e0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8f3e4:	d0a00c17 	ldw	r2,-32720(gp)
   8f3e8:	10c000c4 	addi	r3,r2,3
   8f3ec:	00bfff04 	movi	r2,-4
   8f3f0:	1884703a 	and	r2,r3,r2
   8f3f4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8f3f8:	d0e00c17 	ldw	r3,-32720(gp)
   8f3fc:	e0bfff17 	ldw	r2,-4(fp)
   8f400:	1887883a 	add	r3,r3,r2
   8f404:	008003b4 	movhi	r2,14
   8f408:	10800004 	addi	r2,r2,0
   8f40c:	10c0062e 	bgeu	r2,r3,8f428 <sbrk+0x74>
   8f410:	e0bffb17 	ldw	r2,-20(fp)
   8f414:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f418:	e0bffa17 	ldw	r2,-24(fp)
   8f41c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8f420:	00bfffc4 	movi	r2,-1
   8f424:	00000b06 	br	8f454 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8f428:	d0a00c17 	ldw	r2,-32720(gp)
   8f42c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8f430:	d0e00c17 	ldw	r3,-32720(gp)
   8f434:	e0bfff17 	ldw	r2,-4(fp)
   8f438:	1885883a 	add	r2,r3,r2
   8f43c:	d0a00c15 	stw	r2,-32720(gp)
   8f440:	e0bffb17 	ldw	r2,-20(fp)
   8f444:	e0bffc15 	stw	r2,-16(fp)
   8f448:	e0bffc17 	ldw	r2,-16(fp)
   8f44c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8f450:	e0bffd17 	ldw	r2,-12(fp)
} 
   8f454:	e037883a 	mov	sp,fp
   8f458:	df000017 	ldw	fp,0(sp)
   8f45c:	dec00104 	addi	sp,sp,4
   8f460:	f800283a 	ret

0008f464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8f464:	defffe04 	addi	sp,sp,-8
   8f468:	dfc00115 	stw	ra,4(sp)
   8f46c:	df000015 	stw	fp,0(sp)
   8f470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8f474:	d0a00b17 	ldw	r2,-32724(gp)
   8f478:	10000326 	beq	r2,zero,8f488 <alt_get_errno+0x24>
   8f47c:	d0a00b17 	ldw	r2,-32724(gp)
   8f480:	103ee83a 	callr	r2
   8f484:	00000106 	br	8f48c <alt_get_errno+0x28>
   8f488:	d0a9a104 	addi	r2,gp,-22908
}
   8f48c:	e037883a 	mov	sp,fp
   8f490:	dfc00117 	ldw	ra,4(sp)
   8f494:	df000017 	ldw	fp,0(sp)
   8f498:	dec00204 	addi	sp,sp,8
   8f49c:	f800283a 	ret

0008f4a0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8f4a0:	defff904 	addi	sp,sp,-28
   8f4a4:	dfc00615 	stw	ra,24(sp)
   8f4a8:	df000515 	stw	fp,20(sp)
   8f4ac:	df000504 	addi	fp,sp,20
   8f4b0:	e13ffd15 	stw	r4,-12(fp)
   8f4b4:	e17ffe15 	stw	r5,-8(fp)
   8f4b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8f4bc:	e0bffd17 	ldw	r2,-12(fp)
   8f4c0:	10000816 	blt	r2,zero,8f4e4 <write+0x44>
   8f4c4:	01400304 	movi	r5,12
   8f4c8:	e13ffd17 	ldw	r4,-12(fp)
   8f4cc:	0081b340 	call	81b34 <__mulsi3>
   8f4d0:	1007883a 	mov	r3,r2
   8f4d4:	00800274 	movhi	r2,9
   8f4d8:	108b0504 	addi	r2,r2,11284
   8f4dc:	1885883a 	add	r2,r3,r2
   8f4e0:	00000106 	br	8f4e8 <write+0x48>
   8f4e4:	0005883a 	mov	r2,zero
   8f4e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8f4ec:	e0bffb17 	ldw	r2,-20(fp)
   8f4f0:	10002126 	beq	r2,zero,8f578 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8f4f4:	e0bffb17 	ldw	r2,-20(fp)
   8f4f8:	10800217 	ldw	r2,8(r2)
   8f4fc:	108000cc 	andi	r2,r2,3
   8f500:	10001826 	beq	r2,zero,8f564 <write+0xc4>
   8f504:	e0bffb17 	ldw	r2,-20(fp)
   8f508:	10800017 	ldw	r2,0(r2)
   8f50c:	10800617 	ldw	r2,24(r2)
   8f510:	10001426 	beq	r2,zero,8f564 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8f514:	e0bffb17 	ldw	r2,-20(fp)
   8f518:	10800017 	ldw	r2,0(r2)
   8f51c:	10800617 	ldw	r2,24(r2)
   8f520:	e0ffff17 	ldw	r3,-4(fp)
   8f524:	180d883a 	mov	r6,r3
   8f528:	e17ffe17 	ldw	r5,-8(fp)
   8f52c:	e13ffb17 	ldw	r4,-20(fp)
   8f530:	103ee83a 	callr	r2
   8f534:	e0bffc15 	stw	r2,-16(fp)
   8f538:	e0bffc17 	ldw	r2,-16(fp)
   8f53c:	1000070e 	bge	r2,zero,8f55c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   8f540:	008f4640 	call	8f464 <alt_get_errno>
   8f544:	1007883a 	mov	r3,r2
   8f548:	e0bffc17 	ldw	r2,-16(fp)
   8f54c:	0085c83a 	sub	r2,zero,r2
   8f550:	18800015 	stw	r2,0(r3)
        return -1;
   8f554:	00bfffc4 	movi	r2,-1
   8f558:	00000c06 	br	8f58c <write+0xec>
      }
      return rval;
   8f55c:	e0bffc17 	ldw	r2,-16(fp)
   8f560:	00000a06 	br	8f58c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8f564:	008f4640 	call	8f464 <alt_get_errno>
   8f568:	1007883a 	mov	r3,r2
   8f56c:	00800344 	movi	r2,13
   8f570:	18800015 	stw	r2,0(r3)
   8f574:	00000406 	br	8f588 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8f578:	008f4640 	call	8f464 <alt_get_errno>
   8f57c:	1007883a 	mov	r3,r2
   8f580:	00801444 	movi	r2,81
   8f584:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8f588:	00bfffc4 	movi	r2,-1
}
   8f58c:	e037883a 	mov	sp,fp
   8f590:	dfc00117 	ldw	ra,4(sp)
   8f594:	df000017 	ldw	fp,0(sp)
   8f598:	dec00204 	addi	sp,sp,8
   8f59c:	f800283a 	ret

0008f5a0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8f5a0:	defffd04 	addi	sp,sp,-12
   8f5a4:	dfc00215 	stw	ra,8(sp)
   8f5a8:	df000115 	stw	fp,4(sp)
   8f5ac:	df000104 	addi	fp,sp,4
   8f5b0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8f5b4:	d1600804 	addi	r5,gp,-32736
   8f5b8:	e13fff17 	ldw	r4,-4(fp)
   8f5bc:	00902440 	call	90244 <alt_dev_llist_insert>
}
   8f5c0:	e037883a 	mov	sp,fp
   8f5c4:	dfc00117 	ldw	ra,4(sp)
   8f5c8:	df000017 	ldw	fp,0(sp)
   8f5cc:	dec00204 	addi	sp,sp,8
   8f5d0:	f800283a 	ret

0008f5d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8f5d4:	defffd04 	addi	sp,sp,-12
   8f5d8:	dfc00215 	stw	ra,8(sp)
   8f5dc:	df000115 	stw	fp,4(sp)
   8f5e0:	df000104 	addi	fp,sp,4
   8f5e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   8f5e8:	0090bf00 	call	90bf0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8f5ec:	00800044 	movi	r2,1
   8f5f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8f5f4:	0001883a 	nop
   8f5f8:	e037883a 	mov	sp,fp
   8f5fc:	dfc00117 	ldw	ra,4(sp)
   8f600:	df000017 	ldw	fp,0(sp)
   8f604:	dec00204 	addi	sp,sp,8
   8f608:	f800283a 	ret

0008f60c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8f60c:	defffe04 	addi	sp,sp,-8
   8f610:	dfc00115 	stw	ra,4(sp)
   8f614:	df000015 	stw	fp,0(sp)
   8f618:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8f61c:	000d883a 	mov	r6,zero
   8f620:	000b883a 	mov	r5,zero
   8f624:	01000274 	movhi	r4,9
   8f628:	210b6f04 	addi	r4,r4,11708
   8f62c:	008f7b80 	call	8f7b8 <altera_avalon_jtag_uart_init>
   8f630:	01000274 	movhi	r4,9
   8f634:	210b6504 	addi	r4,r4,11668
   8f638:	008f5a00 	call	8f5a0 <alt_dev_reg>
}
   8f63c:	0001883a 	nop
   8f640:	e037883a 	mov	sp,fp
   8f644:	dfc00117 	ldw	ra,4(sp)
   8f648:	df000017 	ldw	fp,0(sp)
   8f64c:	dec00204 	addi	sp,sp,8
   8f650:	f800283a 	ret

0008f654 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8f654:	defffa04 	addi	sp,sp,-24
   8f658:	dfc00515 	stw	ra,20(sp)
   8f65c:	df000415 	stw	fp,16(sp)
   8f660:	df000404 	addi	fp,sp,16
   8f664:	e13ffd15 	stw	r4,-12(fp)
   8f668:	e17ffe15 	stw	r5,-8(fp)
   8f66c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f670:	e0bffd17 	ldw	r2,-12(fp)
   8f674:	10800017 	ldw	r2,0(r2)
   8f678:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8f67c:	e0bffc17 	ldw	r2,-16(fp)
   8f680:	10c00a04 	addi	r3,r2,40
   8f684:	e0bffd17 	ldw	r2,-12(fp)
   8f688:	10800217 	ldw	r2,8(r2)
   8f68c:	100f883a 	mov	r7,r2
   8f690:	e1bfff17 	ldw	r6,-4(fp)
   8f694:	e17ffe17 	ldw	r5,-8(fp)
   8f698:	1809883a 	mov	r4,r3
   8f69c:	008fc7c0 	call	8fc7c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8f6a0:	e037883a 	mov	sp,fp
   8f6a4:	dfc00117 	ldw	ra,4(sp)
   8f6a8:	df000017 	ldw	fp,0(sp)
   8f6ac:	dec00204 	addi	sp,sp,8
   8f6b0:	f800283a 	ret

0008f6b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8f6b4:	defffa04 	addi	sp,sp,-24
   8f6b8:	dfc00515 	stw	ra,20(sp)
   8f6bc:	df000415 	stw	fp,16(sp)
   8f6c0:	df000404 	addi	fp,sp,16
   8f6c4:	e13ffd15 	stw	r4,-12(fp)
   8f6c8:	e17ffe15 	stw	r5,-8(fp)
   8f6cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f6d0:	e0bffd17 	ldw	r2,-12(fp)
   8f6d4:	10800017 	ldw	r2,0(r2)
   8f6d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8f6dc:	e0bffc17 	ldw	r2,-16(fp)
   8f6e0:	10c00a04 	addi	r3,r2,40
   8f6e4:	e0bffd17 	ldw	r2,-12(fp)
   8f6e8:	10800217 	ldw	r2,8(r2)
   8f6ec:	100f883a 	mov	r7,r2
   8f6f0:	e1bfff17 	ldw	r6,-4(fp)
   8f6f4:	e17ffe17 	ldw	r5,-8(fp)
   8f6f8:	1809883a 	mov	r4,r3
   8f6fc:	008fe980 	call	8fe98 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8f700:	e037883a 	mov	sp,fp
   8f704:	dfc00117 	ldw	ra,4(sp)
   8f708:	df000017 	ldw	fp,0(sp)
   8f70c:	dec00204 	addi	sp,sp,8
   8f710:	f800283a 	ret

0008f714 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8f714:	defffc04 	addi	sp,sp,-16
   8f718:	dfc00315 	stw	ra,12(sp)
   8f71c:	df000215 	stw	fp,8(sp)
   8f720:	df000204 	addi	fp,sp,8
   8f724:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f728:	e0bfff17 	ldw	r2,-4(fp)
   8f72c:	10800017 	ldw	r2,0(r2)
   8f730:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8f734:	e0bffe17 	ldw	r2,-8(fp)
   8f738:	10c00a04 	addi	r3,r2,40
   8f73c:	e0bfff17 	ldw	r2,-4(fp)
   8f740:	10800217 	ldw	r2,8(r2)
   8f744:	100b883a 	mov	r5,r2
   8f748:	1809883a 	mov	r4,r3
   8f74c:	008fb240 	call	8fb24 <altera_avalon_jtag_uart_close>
}
   8f750:	e037883a 	mov	sp,fp
   8f754:	dfc00117 	ldw	ra,4(sp)
   8f758:	df000017 	ldw	fp,0(sp)
   8f75c:	dec00204 	addi	sp,sp,8
   8f760:	f800283a 	ret

0008f764 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8f764:	defffa04 	addi	sp,sp,-24
   8f768:	dfc00515 	stw	ra,20(sp)
   8f76c:	df000415 	stw	fp,16(sp)
   8f770:	df000404 	addi	fp,sp,16
   8f774:	e13ffd15 	stw	r4,-12(fp)
   8f778:	e17ffe15 	stw	r5,-8(fp)
   8f77c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8f780:	e0bffd17 	ldw	r2,-12(fp)
   8f784:	10800017 	ldw	r2,0(r2)
   8f788:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8f78c:	e0bffc17 	ldw	r2,-16(fp)
   8f790:	10800a04 	addi	r2,r2,40
   8f794:	e1bfff17 	ldw	r6,-4(fp)
   8f798:	e17ffe17 	ldw	r5,-8(fp)
   8f79c:	1009883a 	mov	r4,r2
   8f7a0:	008fb8c0 	call	8fb8c <altera_avalon_jtag_uart_ioctl>
}
   8f7a4:	e037883a 	mov	sp,fp
   8f7a8:	dfc00117 	ldw	ra,4(sp)
   8f7ac:	df000017 	ldw	fp,0(sp)
   8f7b0:	dec00204 	addi	sp,sp,8
   8f7b4:	f800283a 	ret

0008f7b8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8f7b8:	defffa04 	addi	sp,sp,-24
   8f7bc:	dfc00515 	stw	ra,20(sp)
   8f7c0:	df000415 	stw	fp,16(sp)
   8f7c4:	df000404 	addi	fp,sp,16
   8f7c8:	e13ffd15 	stw	r4,-12(fp)
   8f7cc:	e17ffe15 	stw	r5,-8(fp)
   8f7d0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f7d4:	e0bffd17 	ldw	r2,-12(fp)
   8f7d8:	00c00044 	movi	r3,1
   8f7dc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8f7e0:	e0bffd17 	ldw	r2,-12(fp)
   8f7e4:	10800017 	ldw	r2,0(r2)
   8f7e8:	10800104 	addi	r2,r2,4
   8f7ec:	1007883a 	mov	r3,r2
   8f7f0:	e0bffd17 	ldw	r2,-12(fp)
   8f7f4:	10800817 	ldw	r2,32(r2)
   8f7f8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8f7fc:	e0bffe17 	ldw	r2,-8(fp)
   8f800:	e0ffff17 	ldw	r3,-4(fp)
   8f804:	d8000015 	stw	zero,0(sp)
   8f808:	e1fffd17 	ldw	r7,-12(fp)
   8f80c:	01800274 	movhi	r6,9
   8f810:	31be1e04 	addi	r6,r6,-1928
   8f814:	180b883a 	mov	r5,r3
   8f818:	1009883a 	mov	r4,r2
   8f81c:	00903c80 	call	903c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8f820:	e0bffd17 	ldw	r2,-12(fp)
   8f824:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8f828:	e0bffd17 	ldw	r2,-12(fp)
   8f82c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8f830:	d0e9a617 	ldw	r3,-22888(gp)
   8f834:	e1fffd17 	ldw	r7,-12(fp)
   8f838:	01800274 	movhi	r6,9
   8f83c:	31bea104 	addi	r6,r6,-1404
   8f840:	180b883a 	mov	r5,r3
   8f844:	1009883a 	mov	r4,r2
   8f848:	00900bc0 	call	900bc <alt_alarm_start>
   8f84c:	1000040e 	bge	r2,zero,8f860 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8f850:	e0fffd17 	ldw	r3,-12(fp)
   8f854:	00a00034 	movhi	r2,32768
   8f858:	10bfffc4 	addi	r2,r2,-1
   8f85c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8f860:	0001883a 	nop
   8f864:	e037883a 	mov	sp,fp
   8f868:	dfc00117 	ldw	ra,4(sp)
   8f86c:	df000017 	ldw	fp,0(sp)
   8f870:	dec00204 	addi	sp,sp,8
   8f874:	f800283a 	ret

0008f878 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8f878:	defff804 	addi	sp,sp,-32
   8f87c:	df000715 	stw	fp,28(sp)
   8f880:	df000704 	addi	fp,sp,28
   8f884:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8f888:	e0bfff17 	ldw	r2,-4(fp)
   8f88c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8f890:	e0bffb17 	ldw	r2,-20(fp)
   8f894:	10800017 	ldw	r2,0(r2)
   8f898:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f89c:	e0bffc17 	ldw	r2,-16(fp)
   8f8a0:	10800104 	addi	r2,r2,4
   8f8a4:	10800037 	ldwio	r2,0(r2)
   8f8a8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8f8ac:	e0bffd17 	ldw	r2,-12(fp)
   8f8b0:	1080c00c 	andi	r2,r2,768
   8f8b4:	10006d26 	beq	r2,zero,8fa6c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8f8b8:	e0bffd17 	ldw	r2,-12(fp)
   8f8bc:	1080400c 	andi	r2,r2,256
   8f8c0:	10003526 	beq	r2,zero,8f998 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8f8c4:	00800074 	movhi	r2,1
   8f8c8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f8cc:	e0bffb17 	ldw	r2,-20(fp)
   8f8d0:	10800a17 	ldw	r2,40(r2)
   8f8d4:	10800044 	addi	r2,r2,1
   8f8d8:	1081ffcc 	andi	r2,r2,2047
   8f8dc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8f8e0:	e0bffb17 	ldw	r2,-20(fp)
   8f8e4:	10c00b17 	ldw	r3,44(r2)
   8f8e8:	e0bffe17 	ldw	r2,-8(fp)
   8f8ec:	18801526 	beq	r3,r2,8f944 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8f8f0:	e0bffc17 	ldw	r2,-16(fp)
   8f8f4:	10800037 	ldwio	r2,0(r2)
   8f8f8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8f8fc:	e0bff917 	ldw	r2,-28(fp)
   8f900:	10a0000c 	andi	r2,r2,32768
   8f904:	10001126 	beq	r2,zero,8f94c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8f908:	e0bffb17 	ldw	r2,-20(fp)
   8f90c:	10800a17 	ldw	r2,40(r2)
   8f910:	e0fff917 	ldw	r3,-28(fp)
   8f914:	1809883a 	mov	r4,r3
   8f918:	e0fffb17 	ldw	r3,-20(fp)
   8f91c:	1885883a 	add	r2,r3,r2
   8f920:	10800e04 	addi	r2,r2,56
   8f924:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f928:	e0bffb17 	ldw	r2,-20(fp)
   8f92c:	10800a17 	ldw	r2,40(r2)
   8f930:	10800044 	addi	r2,r2,1
   8f934:	10c1ffcc 	andi	r3,r2,2047
   8f938:	e0bffb17 	ldw	r2,-20(fp)
   8f93c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8f940:	003fe206 	br	8f8cc <__alt_data_end+0xfffaf8cc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8f944:	0001883a 	nop
   8f948:	00000106 	br	8f950 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8f94c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8f950:	e0bff917 	ldw	r2,-28(fp)
   8f954:	10bfffec 	andhi	r2,r2,65535
   8f958:	10000f26 	beq	r2,zero,8f998 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f95c:	e0bffb17 	ldw	r2,-20(fp)
   8f960:	10c00817 	ldw	r3,32(r2)
   8f964:	00bfff84 	movi	r2,-2
   8f968:	1886703a 	and	r3,r3,r2
   8f96c:	e0bffb17 	ldw	r2,-20(fp)
   8f970:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8f974:	e0bffc17 	ldw	r2,-16(fp)
   8f978:	10800104 	addi	r2,r2,4
   8f97c:	1007883a 	mov	r3,r2
   8f980:	e0bffb17 	ldw	r2,-20(fp)
   8f984:	10800817 	ldw	r2,32(r2)
   8f988:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f98c:	e0bffc17 	ldw	r2,-16(fp)
   8f990:	10800104 	addi	r2,r2,4
   8f994:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8f998:	e0bffd17 	ldw	r2,-12(fp)
   8f99c:	1080800c 	andi	r2,r2,512
   8f9a0:	103fbe26 	beq	r2,zero,8f89c <__alt_data_end+0xfffaf89c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8f9a4:	e0bffd17 	ldw	r2,-12(fp)
   8f9a8:	1004d43a 	srli	r2,r2,16
   8f9ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f9b0:	00001406 	br	8fa04 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8f9b4:	e0bffc17 	ldw	r2,-16(fp)
   8f9b8:	e0fffb17 	ldw	r3,-20(fp)
   8f9bc:	18c00d17 	ldw	r3,52(r3)
   8f9c0:	e13ffb17 	ldw	r4,-20(fp)
   8f9c4:	20c7883a 	add	r3,r4,r3
   8f9c8:	18c20e04 	addi	r3,r3,2104
   8f9cc:	18c00003 	ldbu	r3,0(r3)
   8f9d0:	18c03fcc 	andi	r3,r3,255
   8f9d4:	18c0201c 	xori	r3,r3,128
   8f9d8:	18ffe004 	addi	r3,r3,-128
   8f9dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f9e0:	e0bffb17 	ldw	r2,-20(fp)
   8f9e4:	10800d17 	ldw	r2,52(r2)
   8f9e8:	10800044 	addi	r2,r2,1
   8f9ec:	10c1ffcc 	andi	r3,r2,2047
   8f9f0:	e0bffb17 	ldw	r2,-20(fp)
   8f9f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8f9f8:	e0bffa17 	ldw	r2,-24(fp)
   8f9fc:	10bfffc4 	addi	r2,r2,-1
   8fa00:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8fa04:	e0bffa17 	ldw	r2,-24(fp)
   8fa08:	10000526 	beq	r2,zero,8fa20 <altera_avalon_jtag_uart_irq+0x1a8>
   8fa0c:	e0bffb17 	ldw	r2,-20(fp)
   8fa10:	10c00d17 	ldw	r3,52(r2)
   8fa14:	e0bffb17 	ldw	r2,-20(fp)
   8fa18:	10800c17 	ldw	r2,48(r2)
   8fa1c:	18bfe51e 	bne	r3,r2,8f9b4 <__alt_data_end+0xfffaf9b4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8fa20:	e0bffa17 	ldw	r2,-24(fp)
   8fa24:	103f9d26 	beq	r2,zero,8f89c <__alt_data_end+0xfffaf89c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8fa28:	e0bffb17 	ldw	r2,-20(fp)
   8fa2c:	10c00817 	ldw	r3,32(r2)
   8fa30:	00bfff44 	movi	r2,-3
   8fa34:	1886703a 	and	r3,r3,r2
   8fa38:	e0bffb17 	ldw	r2,-20(fp)
   8fa3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8fa40:	e0bffb17 	ldw	r2,-20(fp)
   8fa44:	10800017 	ldw	r2,0(r2)
   8fa48:	10800104 	addi	r2,r2,4
   8fa4c:	1007883a 	mov	r3,r2
   8fa50:	e0bffb17 	ldw	r2,-20(fp)
   8fa54:	10800817 	ldw	r2,32(r2)
   8fa58:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8fa5c:	e0bffc17 	ldw	r2,-16(fp)
   8fa60:	10800104 	addi	r2,r2,4
   8fa64:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8fa68:	003f8c06 	br	8f89c <__alt_data_end+0xfffaf89c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8fa6c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8fa70:	0001883a 	nop
   8fa74:	e037883a 	mov	sp,fp
   8fa78:	df000017 	ldw	fp,0(sp)
   8fa7c:	dec00104 	addi	sp,sp,4
   8fa80:	f800283a 	ret

0008fa84 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8fa84:	defff804 	addi	sp,sp,-32
   8fa88:	df000715 	stw	fp,28(sp)
   8fa8c:	df000704 	addi	fp,sp,28
   8fa90:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8fa94:	e0bffb17 	ldw	r2,-20(fp)
   8fa98:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8fa9c:	e0bff917 	ldw	r2,-28(fp)
   8faa0:	10800017 	ldw	r2,0(r2)
   8faa4:	10800104 	addi	r2,r2,4
   8faa8:	10800037 	ldwio	r2,0(r2)
   8faac:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8fab0:	e0bffa17 	ldw	r2,-24(fp)
   8fab4:	1081000c 	andi	r2,r2,1024
   8fab8:	10000b26 	beq	r2,zero,8fae8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8fabc:	e0bff917 	ldw	r2,-28(fp)
   8fac0:	10800017 	ldw	r2,0(r2)
   8fac4:	10800104 	addi	r2,r2,4
   8fac8:	1007883a 	mov	r3,r2
   8facc:	e0bff917 	ldw	r2,-28(fp)
   8fad0:	10800817 	ldw	r2,32(r2)
   8fad4:	10810014 	ori	r2,r2,1024
   8fad8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8fadc:	e0bff917 	ldw	r2,-28(fp)
   8fae0:	10000915 	stw	zero,36(r2)
   8fae4:	00000a06 	br	8fb10 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8fae8:	e0bff917 	ldw	r2,-28(fp)
   8faec:	10c00917 	ldw	r3,36(r2)
   8faf0:	00a00034 	movhi	r2,32768
   8faf4:	10bfff04 	addi	r2,r2,-4
   8faf8:	10c00536 	bltu	r2,r3,8fb10 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8fafc:	e0bff917 	ldw	r2,-28(fp)
   8fb00:	10800917 	ldw	r2,36(r2)
   8fb04:	10c00044 	addi	r3,r2,1
   8fb08:	e0bff917 	ldw	r2,-28(fp)
   8fb0c:	10c00915 	stw	r3,36(r2)
   8fb10:	d0a9a617 	ldw	r2,-22888(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8fb14:	e037883a 	mov	sp,fp
   8fb18:	df000017 	ldw	fp,0(sp)
   8fb1c:	dec00104 	addi	sp,sp,4
   8fb20:	f800283a 	ret

0008fb24 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8fb24:	defffd04 	addi	sp,sp,-12
   8fb28:	df000215 	stw	fp,8(sp)
   8fb2c:	df000204 	addi	fp,sp,8
   8fb30:	e13ffe15 	stw	r4,-8(fp)
   8fb34:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8fb38:	00000506 	br	8fb50 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8fb3c:	e0bfff17 	ldw	r2,-4(fp)
   8fb40:	1090000c 	andi	r2,r2,16384
   8fb44:	10000226 	beq	r2,zero,8fb50 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8fb48:	00bffd44 	movi	r2,-11
   8fb4c:	00000b06 	br	8fb7c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8fb50:	e0bffe17 	ldw	r2,-8(fp)
   8fb54:	10c00d17 	ldw	r3,52(r2)
   8fb58:	e0bffe17 	ldw	r2,-8(fp)
   8fb5c:	10800c17 	ldw	r2,48(r2)
   8fb60:	18800526 	beq	r3,r2,8fb78 <altera_avalon_jtag_uart_close+0x54>
   8fb64:	e0bffe17 	ldw	r2,-8(fp)
   8fb68:	10c00917 	ldw	r3,36(r2)
   8fb6c:	e0bffe17 	ldw	r2,-8(fp)
   8fb70:	10800117 	ldw	r2,4(r2)
   8fb74:	18bff136 	bltu	r3,r2,8fb3c <__alt_data_end+0xfffafb3c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8fb78:	0005883a 	mov	r2,zero
}
   8fb7c:	e037883a 	mov	sp,fp
   8fb80:	df000017 	ldw	fp,0(sp)
   8fb84:	dec00104 	addi	sp,sp,4
   8fb88:	f800283a 	ret

0008fb8c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8fb8c:	defffa04 	addi	sp,sp,-24
   8fb90:	df000515 	stw	fp,20(sp)
   8fb94:	df000504 	addi	fp,sp,20
   8fb98:	e13ffd15 	stw	r4,-12(fp)
   8fb9c:	e17ffe15 	stw	r5,-8(fp)
   8fba0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8fba4:	00bff9c4 	movi	r2,-25
   8fba8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8fbac:	e0bffe17 	ldw	r2,-8(fp)
   8fbb0:	10da8060 	cmpeqi	r3,r2,27137
   8fbb4:	1800031e 	bne	r3,zero,8fbc4 <altera_avalon_jtag_uart_ioctl+0x38>
   8fbb8:	109a80a0 	cmpeqi	r2,r2,27138
   8fbbc:	1000181e 	bne	r2,zero,8fc20 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   8fbc0:	00002906 	br	8fc68 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8fbc4:	e0bffd17 	ldw	r2,-12(fp)
   8fbc8:	10c00117 	ldw	r3,4(r2)
   8fbcc:	00a00034 	movhi	r2,32768
   8fbd0:	10bfffc4 	addi	r2,r2,-1
   8fbd4:	18802126 	beq	r3,r2,8fc5c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   8fbd8:	e0bfff17 	ldw	r2,-4(fp)
   8fbdc:	10800017 	ldw	r2,0(r2)
   8fbe0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8fbe4:	e0bffc17 	ldw	r2,-16(fp)
   8fbe8:	10800090 	cmplti	r2,r2,2
   8fbec:	1000061e 	bne	r2,zero,8fc08 <altera_avalon_jtag_uart_ioctl+0x7c>
   8fbf0:	e0fffc17 	ldw	r3,-16(fp)
   8fbf4:	00a00034 	movhi	r2,32768
   8fbf8:	10bfffc4 	addi	r2,r2,-1
   8fbfc:	18800226 	beq	r3,r2,8fc08 <altera_avalon_jtag_uart_ioctl+0x7c>
   8fc00:	e0bffc17 	ldw	r2,-16(fp)
   8fc04:	00000206 	br	8fc10 <altera_avalon_jtag_uart_ioctl+0x84>
   8fc08:	00a00034 	movhi	r2,32768
   8fc0c:	10bfff84 	addi	r2,r2,-2
   8fc10:	e0fffd17 	ldw	r3,-12(fp)
   8fc14:	18800115 	stw	r2,4(r3)
      rc = 0;
   8fc18:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8fc1c:	00000f06 	br	8fc5c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8fc20:	e0bffd17 	ldw	r2,-12(fp)
   8fc24:	10c00117 	ldw	r3,4(r2)
   8fc28:	00a00034 	movhi	r2,32768
   8fc2c:	10bfffc4 	addi	r2,r2,-1
   8fc30:	18800c26 	beq	r3,r2,8fc64 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8fc34:	e0bffd17 	ldw	r2,-12(fp)
   8fc38:	10c00917 	ldw	r3,36(r2)
   8fc3c:	e0bffd17 	ldw	r2,-12(fp)
   8fc40:	10800117 	ldw	r2,4(r2)
   8fc44:	1885803a 	cmpltu	r2,r3,r2
   8fc48:	10c03fcc 	andi	r3,r2,255
   8fc4c:	e0bfff17 	ldw	r2,-4(fp)
   8fc50:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8fc54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8fc58:	00000206 	br	8fc64 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8fc5c:	0001883a 	nop
   8fc60:	00000106 	br	8fc68 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8fc64:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8fc68:	e0bffb17 	ldw	r2,-20(fp)
}
   8fc6c:	e037883a 	mov	sp,fp
   8fc70:	df000017 	ldw	fp,0(sp)
   8fc74:	dec00104 	addi	sp,sp,4
   8fc78:	f800283a 	ret

0008fc7c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8fc7c:	defff304 	addi	sp,sp,-52
   8fc80:	dfc00c15 	stw	ra,48(sp)
   8fc84:	df000b15 	stw	fp,44(sp)
   8fc88:	df000b04 	addi	fp,sp,44
   8fc8c:	e13ffc15 	stw	r4,-16(fp)
   8fc90:	e17ffd15 	stw	r5,-12(fp)
   8fc94:	e1bffe15 	stw	r6,-8(fp)
   8fc98:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8fc9c:	e0bffd17 	ldw	r2,-12(fp)
   8fca0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8fca4:	00004706 	br	8fdc4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8fca8:	e0bffc17 	ldw	r2,-16(fp)
   8fcac:	10800a17 	ldw	r2,40(r2)
   8fcb0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8fcb4:	e0bffc17 	ldw	r2,-16(fp)
   8fcb8:	10800b17 	ldw	r2,44(r2)
   8fcbc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8fcc0:	e0fff717 	ldw	r3,-36(fp)
   8fcc4:	e0bff817 	ldw	r2,-32(fp)
   8fcc8:	18800536 	bltu	r3,r2,8fce0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8fccc:	e0fff717 	ldw	r3,-36(fp)
   8fcd0:	e0bff817 	ldw	r2,-32(fp)
   8fcd4:	1885c83a 	sub	r2,r3,r2
   8fcd8:	e0bff615 	stw	r2,-40(fp)
   8fcdc:	00000406 	br	8fcf0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8fce0:	00c20004 	movi	r3,2048
   8fce4:	e0bff817 	ldw	r2,-32(fp)
   8fce8:	1885c83a 	sub	r2,r3,r2
   8fcec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8fcf0:	e0bff617 	ldw	r2,-40(fp)
   8fcf4:	10001e26 	beq	r2,zero,8fd70 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8fcf8:	e0fffe17 	ldw	r3,-8(fp)
   8fcfc:	e0bff617 	ldw	r2,-40(fp)
   8fd00:	1880022e 	bgeu	r3,r2,8fd0c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8fd04:	e0bffe17 	ldw	r2,-8(fp)
   8fd08:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8fd0c:	e0bffc17 	ldw	r2,-16(fp)
   8fd10:	10c00e04 	addi	r3,r2,56
   8fd14:	e0bff817 	ldw	r2,-32(fp)
   8fd18:	1885883a 	add	r2,r3,r2
   8fd1c:	e1bff617 	ldw	r6,-40(fp)
   8fd20:	100b883a 	mov	r5,r2
   8fd24:	e13ff517 	ldw	r4,-44(fp)
   8fd28:	00877ec0 	call	877ec <memcpy>
      ptr   += n;
   8fd2c:	e0fff517 	ldw	r3,-44(fp)
   8fd30:	e0bff617 	ldw	r2,-40(fp)
   8fd34:	1885883a 	add	r2,r3,r2
   8fd38:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8fd3c:	e0fffe17 	ldw	r3,-8(fp)
   8fd40:	e0bff617 	ldw	r2,-40(fp)
   8fd44:	1885c83a 	sub	r2,r3,r2
   8fd48:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8fd4c:	e0fff817 	ldw	r3,-32(fp)
   8fd50:	e0bff617 	ldw	r2,-40(fp)
   8fd54:	1885883a 	add	r2,r3,r2
   8fd58:	10c1ffcc 	andi	r3,r2,2047
   8fd5c:	e0bffc17 	ldw	r2,-16(fp)
   8fd60:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8fd64:	e0bffe17 	ldw	r2,-8(fp)
   8fd68:	00bfcf16 	blt	zero,r2,8fca8 <__alt_data_end+0xfffafca8>
   8fd6c:	00000106 	br	8fd74 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8fd70:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8fd74:	e0fff517 	ldw	r3,-44(fp)
   8fd78:	e0bffd17 	ldw	r2,-12(fp)
   8fd7c:	1880141e 	bne	r3,r2,8fdd0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8fd80:	e0bfff17 	ldw	r2,-4(fp)
   8fd84:	1090000c 	andi	r2,r2,16384
   8fd88:	1000131e 	bne	r2,zero,8fdd8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8fd8c:	0001883a 	nop
   8fd90:	e0bffc17 	ldw	r2,-16(fp)
   8fd94:	10c00a17 	ldw	r3,40(r2)
   8fd98:	e0bff717 	ldw	r2,-36(fp)
   8fd9c:	1880051e 	bne	r3,r2,8fdb4 <altera_avalon_jtag_uart_read+0x138>
   8fda0:	e0bffc17 	ldw	r2,-16(fp)
   8fda4:	10c00917 	ldw	r3,36(r2)
   8fda8:	e0bffc17 	ldw	r2,-16(fp)
   8fdac:	10800117 	ldw	r2,4(r2)
   8fdb0:	18bff736 	bltu	r3,r2,8fd90 <__alt_data_end+0xfffafd90>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8fdb4:	e0bffc17 	ldw	r2,-16(fp)
   8fdb8:	10c00a17 	ldw	r3,40(r2)
   8fdbc:	e0bff717 	ldw	r2,-36(fp)
   8fdc0:	18800726 	beq	r3,r2,8fde0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8fdc4:	e0bffe17 	ldw	r2,-8(fp)
   8fdc8:	00bfb716 	blt	zero,r2,8fca8 <__alt_data_end+0xfffafca8>
   8fdcc:	00000506 	br	8fde4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8fdd0:	0001883a 	nop
   8fdd4:	00000306 	br	8fde4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8fdd8:	0001883a 	nop
   8fddc:	00000106 	br	8fde4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8fde0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8fde4:	e0fff517 	ldw	r3,-44(fp)
   8fde8:	e0bffd17 	ldw	r2,-12(fp)
   8fdec:	18801826 	beq	r3,r2,8fe50 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fdf0:	0005303a 	rdctl	r2,status
   8fdf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fdf8:	e0fffb17 	ldw	r3,-20(fp)
   8fdfc:	00bfff84 	movi	r2,-2
   8fe00:	1884703a 	and	r2,r3,r2
   8fe04:	1001703a 	wrctl	status,r2
  
  return context;
   8fe08:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8fe0c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8fe10:	e0bffc17 	ldw	r2,-16(fp)
   8fe14:	10800817 	ldw	r2,32(r2)
   8fe18:	10c00054 	ori	r3,r2,1
   8fe1c:	e0bffc17 	ldw	r2,-16(fp)
   8fe20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8fe24:	e0bffc17 	ldw	r2,-16(fp)
   8fe28:	10800017 	ldw	r2,0(r2)
   8fe2c:	10800104 	addi	r2,r2,4
   8fe30:	1007883a 	mov	r3,r2
   8fe34:	e0bffc17 	ldw	r2,-16(fp)
   8fe38:	10800817 	ldw	r2,32(r2)
   8fe3c:	18800035 	stwio	r2,0(r3)
   8fe40:	e0bffa17 	ldw	r2,-24(fp)
   8fe44:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fe48:	e0bff917 	ldw	r2,-28(fp)
   8fe4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8fe50:	e0fff517 	ldw	r3,-44(fp)
   8fe54:	e0bffd17 	ldw	r2,-12(fp)
   8fe58:	18800426 	beq	r3,r2,8fe6c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   8fe5c:	e0fff517 	ldw	r3,-44(fp)
   8fe60:	e0bffd17 	ldw	r2,-12(fp)
   8fe64:	1885c83a 	sub	r2,r3,r2
   8fe68:	00000606 	br	8fe84 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   8fe6c:	e0bfff17 	ldw	r2,-4(fp)
   8fe70:	1090000c 	andi	r2,r2,16384
   8fe74:	10000226 	beq	r2,zero,8fe80 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8fe78:	00bffd44 	movi	r2,-11
   8fe7c:	00000106 	br	8fe84 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   8fe80:	00bffec4 	movi	r2,-5
}
   8fe84:	e037883a 	mov	sp,fp
   8fe88:	dfc00117 	ldw	ra,4(sp)
   8fe8c:	df000017 	ldw	fp,0(sp)
   8fe90:	dec00204 	addi	sp,sp,8
   8fe94:	f800283a 	ret

0008fe98 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8fe98:	defff304 	addi	sp,sp,-52
   8fe9c:	dfc00c15 	stw	ra,48(sp)
   8fea0:	df000b15 	stw	fp,44(sp)
   8fea4:	df000b04 	addi	fp,sp,44
   8fea8:	e13ffc15 	stw	r4,-16(fp)
   8feac:	e17ffd15 	stw	r5,-12(fp)
   8feb0:	e1bffe15 	stw	r6,-8(fp)
   8feb4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8feb8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8febc:	e0bffd17 	ldw	r2,-12(fp)
   8fec0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8fec4:	00003706 	br	8ffa4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8fec8:	e0bffc17 	ldw	r2,-16(fp)
   8fecc:	10800c17 	ldw	r2,48(r2)
   8fed0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8fed4:	e0bffc17 	ldw	r2,-16(fp)
   8fed8:	10800d17 	ldw	r2,52(r2)
   8fedc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8fee0:	e0fff917 	ldw	r3,-28(fp)
   8fee4:	e0bff517 	ldw	r2,-44(fp)
   8fee8:	1880062e 	bgeu	r3,r2,8ff04 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8feec:	e0fff517 	ldw	r3,-44(fp)
   8fef0:	e0bff917 	ldw	r2,-28(fp)
   8fef4:	1885c83a 	sub	r2,r3,r2
   8fef8:	10bfffc4 	addi	r2,r2,-1
   8fefc:	e0bff615 	stw	r2,-40(fp)
   8ff00:	00000b06 	br	8ff30 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8ff04:	e0bff517 	ldw	r2,-44(fp)
   8ff08:	10000526 	beq	r2,zero,8ff20 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8ff0c:	00c20004 	movi	r3,2048
   8ff10:	e0bff917 	ldw	r2,-28(fp)
   8ff14:	1885c83a 	sub	r2,r3,r2
   8ff18:	e0bff615 	stw	r2,-40(fp)
   8ff1c:	00000406 	br	8ff30 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8ff20:	00c1ffc4 	movi	r3,2047
   8ff24:	e0bff917 	ldw	r2,-28(fp)
   8ff28:	1885c83a 	sub	r2,r3,r2
   8ff2c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8ff30:	e0bff617 	ldw	r2,-40(fp)
   8ff34:	10001e26 	beq	r2,zero,8ffb0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8ff38:	e0fffe17 	ldw	r3,-8(fp)
   8ff3c:	e0bff617 	ldw	r2,-40(fp)
   8ff40:	1880022e 	bgeu	r3,r2,8ff4c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8ff44:	e0bffe17 	ldw	r2,-8(fp)
   8ff48:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8ff4c:	e0bffc17 	ldw	r2,-16(fp)
   8ff50:	10c20e04 	addi	r3,r2,2104
   8ff54:	e0bff917 	ldw	r2,-28(fp)
   8ff58:	1885883a 	add	r2,r3,r2
   8ff5c:	e1bff617 	ldw	r6,-40(fp)
   8ff60:	e17ffd17 	ldw	r5,-12(fp)
   8ff64:	1009883a 	mov	r4,r2
   8ff68:	00877ec0 	call	877ec <memcpy>
      ptr   += n;
   8ff6c:	e0fffd17 	ldw	r3,-12(fp)
   8ff70:	e0bff617 	ldw	r2,-40(fp)
   8ff74:	1885883a 	add	r2,r3,r2
   8ff78:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8ff7c:	e0fffe17 	ldw	r3,-8(fp)
   8ff80:	e0bff617 	ldw	r2,-40(fp)
   8ff84:	1885c83a 	sub	r2,r3,r2
   8ff88:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ff8c:	e0fff917 	ldw	r3,-28(fp)
   8ff90:	e0bff617 	ldw	r2,-40(fp)
   8ff94:	1885883a 	add	r2,r3,r2
   8ff98:	10c1ffcc 	andi	r3,r2,2047
   8ff9c:	e0bffc17 	ldw	r2,-16(fp)
   8ffa0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8ffa4:	e0bffe17 	ldw	r2,-8(fp)
   8ffa8:	00bfc716 	blt	zero,r2,8fec8 <__alt_data_end+0xfffafec8>
   8ffac:	00000106 	br	8ffb4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8ffb0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ffb4:	0005303a 	rdctl	r2,status
   8ffb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ffbc:	e0fffb17 	ldw	r3,-20(fp)
   8ffc0:	00bfff84 	movi	r2,-2
   8ffc4:	1884703a 	and	r2,r3,r2
   8ffc8:	1001703a 	wrctl	status,r2
  
  return context;
   8ffcc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8ffd0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8ffd4:	e0bffc17 	ldw	r2,-16(fp)
   8ffd8:	10800817 	ldw	r2,32(r2)
   8ffdc:	10c00094 	ori	r3,r2,2
   8ffe0:	e0bffc17 	ldw	r2,-16(fp)
   8ffe4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ffe8:	e0bffc17 	ldw	r2,-16(fp)
   8ffec:	10800017 	ldw	r2,0(r2)
   8fff0:	10800104 	addi	r2,r2,4
   8fff4:	1007883a 	mov	r3,r2
   8fff8:	e0bffc17 	ldw	r2,-16(fp)
   8fffc:	10800817 	ldw	r2,32(r2)
   90000:	18800035 	stwio	r2,0(r3)
   90004:	e0bffa17 	ldw	r2,-24(fp)
   90008:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9000c:	e0bff817 	ldw	r2,-32(fp)
   90010:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   90014:	e0bffe17 	ldw	r2,-8(fp)
   90018:	0080100e 	bge	zero,r2,9005c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   9001c:	e0bfff17 	ldw	r2,-4(fp)
   90020:	1090000c 	andi	r2,r2,16384
   90024:	1000101e 	bne	r2,zero,90068 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   90028:	0001883a 	nop
   9002c:	e0bffc17 	ldw	r2,-16(fp)
   90030:	10c00d17 	ldw	r3,52(r2)
   90034:	e0bff517 	ldw	r2,-44(fp)
   90038:	1880051e 	bne	r3,r2,90050 <altera_avalon_jtag_uart_write+0x1b8>
   9003c:	e0bffc17 	ldw	r2,-16(fp)
   90040:	10c00917 	ldw	r3,36(r2)
   90044:	e0bffc17 	ldw	r2,-16(fp)
   90048:	10800117 	ldw	r2,4(r2)
   9004c:	18bff736 	bltu	r3,r2,9002c <__alt_data_end+0xfffb002c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   90050:	e0bffc17 	ldw	r2,-16(fp)
   90054:	10800917 	ldw	r2,36(r2)
   90058:	1000051e 	bne	r2,zero,90070 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   9005c:	e0bffe17 	ldw	r2,-8(fp)
   90060:	00bfd016 	blt	zero,r2,8ffa4 <__alt_data_end+0xfffaffa4>
   90064:	00000306 	br	90074 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   90068:	0001883a 	nop
   9006c:	00000106 	br	90074 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   90070:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   90074:	e0fffd17 	ldw	r3,-12(fp)
   90078:	e0bff717 	ldw	r2,-36(fp)
   9007c:	18800426 	beq	r3,r2,90090 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   90080:	e0fffd17 	ldw	r3,-12(fp)
   90084:	e0bff717 	ldw	r2,-36(fp)
   90088:	1885c83a 	sub	r2,r3,r2
   9008c:	00000606 	br	900a8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   90090:	e0bfff17 	ldw	r2,-4(fp)
   90094:	1090000c 	andi	r2,r2,16384
   90098:	10000226 	beq	r2,zero,900a4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   9009c:	00bffd44 	movi	r2,-11
   900a0:	00000106 	br	900a8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   900a4:	00bffec4 	movi	r2,-5
}
   900a8:	e037883a 	mov	sp,fp
   900ac:	dfc00117 	ldw	ra,4(sp)
   900b0:	df000017 	ldw	fp,0(sp)
   900b4:	dec00204 	addi	sp,sp,8
   900b8:	f800283a 	ret

000900bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   900bc:	defff504 	addi	sp,sp,-44
   900c0:	df000a15 	stw	fp,40(sp)
   900c4:	df000a04 	addi	fp,sp,40
   900c8:	e13ffc15 	stw	r4,-16(fp)
   900cc:	e17ffd15 	stw	r5,-12(fp)
   900d0:	e1bffe15 	stw	r6,-8(fp)
   900d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   900d8:	e03ff615 	stw	zero,-40(fp)
   900dc:	d0a9a617 	ldw	r2,-22888(gp)
  
  if (alt_ticks_per_second ())
   900e0:	10003c26 	beq	r2,zero,901d4 <alt_alarm_start+0x118>
  {
    if (alarm)
   900e4:	e0bffc17 	ldw	r2,-16(fp)
   900e8:	10003826 	beq	r2,zero,901cc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   900ec:	e0bffc17 	ldw	r2,-16(fp)
   900f0:	e0fffe17 	ldw	r3,-8(fp)
   900f4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   900f8:	e0bffc17 	ldw	r2,-16(fp)
   900fc:	e0ffff17 	ldw	r3,-4(fp)
   90100:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90104:	0005303a 	rdctl	r2,status
   90108:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9010c:	e0fff917 	ldw	r3,-28(fp)
   90110:	00bfff84 	movi	r2,-2
   90114:	1884703a 	and	r2,r3,r2
   90118:	1001703a 	wrctl	status,r2
  
  return context;
   9011c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   90120:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   90124:	d0a9a717 	ldw	r2,-22884(gp)
      
      current_nticks = alt_nticks();
   90128:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   9012c:	e0fffd17 	ldw	r3,-12(fp)
   90130:	e0bff617 	ldw	r2,-40(fp)
   90134:	1885883a 	add	r2,r3,r2
   90138:	10c00044 	addi	r3,r2,1
   9013c:	e0bffc17 	ldw	r2,-16(fp)
   90140:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   90144:	e0bffc17 	ldw	r2,-16(fp)
   90148:	10c00217 	ldw	r3,8(r2)
   9014c:	e0bff617 	ldw	r2,-40(fp)
   90150:	1880042e 	bgeu	r3,r2,90164 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   90154:	e0bffc17 	ldw	r2,-16(fp)
   90158:	00c00044 	movi	r3,1
   9015c:	10c00405 	stb	r3,16(r2)
   90160:	00000206 	br	9016c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   90164:	e0bffc17 	ldw	r2,-16(fp)
   90168:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   9016c:	e0bffc17 	ldw	r2,-16(fp)
   90170:	d0e00e04 	addi	r3,gp,-32712
   90174:	e0fffa15 	stw	r3,-24(fp)
   90178:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   9017c:	e0bffb17 	ldw	r2,-20(fp)
   90180:	e0fffa17 	ldw	r3,-24(fp)
   90184:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   90188:	e0bffa17 	ldw	r2,-24(fp)
   9018c:	10c00017 	ldw	r3,0(r2)
   90190:	e0bffb17 	ldw	r2,-20(fp)
   90194:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   90198:	e0bffa17 	ldw	r2,-24(fp)
   9019c:	10800017 	ldw	r2,0(r2)
   901a0:	e0fffb17 	ldw	r3,-20(fp)
   901a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   901a8:	e0bffa17 	ldw	r2,-24(fp)
   901ac:	e0fffb17 	ldw	r3,-20(fp)
   901b0:	10c00015 	stw	r3,0(r2)
   901b4:	e0bff817 	ldw	r2,-32(fp)
   901b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   901bc:	e0bff717 	ldw	r2,-36(fp)
   901c0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   901c4:	0005883a 	mov	r2,zero
   901c8:	00000306 	br	901d8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   901cc:	00bffa84 	movi	r2,-22
   901d0:	00000106 	br	901d8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   901d4:	00bfde84 	movi	r2,-134
  }
}
   901d8:	e037883a 	mov	sp,fp
   901dc:	df000017 	ldw	fp,0(sp)
   901e0:	dec00104 	addi	sp,sp,4
   901e4:	f800283a 	ret

000901e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   901e8:	deffff04 	addi	sp,sp,-4
   901ec:	df000015 	stw	fp,0(sp)
   901f0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   901f4:	0001883a 	nop
   901f8:	e037883a 	mov	sp,fp
   901fc:	df000017 	ldw	fp,0(sp)
   90200:	dec00104 	addi	sp,sp,4
   90204:	f800283a 	ret

00090208 <alt_get_errno>:
   90208:	defffe04 	addi	sp,sp,-8
   9020c:	dfc00115 	stw	ra,4(sp)
   90210:	df000015 	stw	fp,0(sp)
   90214:	d839883a 	mov	fp,sp
   90218:	d0a00b17 	ldw	r2,-32724(gp)
   9021c:	10000326 	beq	r2,zero,9022c <alt_get_errno+0x24>
   90220:	d0a00b17 	ldw	r2,-32724(gp)
   90224:	103ee83a 	callr	r2
   90228:	00000106 	br	90230 <alt_get_errno+0x28>
   9022c:	d0a9a104 	addi	r2,gp,-22908
   90230:	e037883a 	mov	sp,fp
   90234:	dfc00117 	ldw	ra,4(sp)
   90238:	df000017 	ldw	fp,0(sp)
   9023c:	dec00204 	addi	sp,sp,8
   90240:	f800283a 	ret

00090244 <alt_dev_llist_insert>:
   90244:	defffa04 	addi	sp,sp,-24
   90248:	dfc00515 	stw	ra,20(sp)
   9024c:	df000415 	stw	fp,16(sp)
   90250:	df000404 	addi	fp,sp,16
   90254:	e13ffe15 	stw	r4,-8(fp)
   90258:	e17fff15 	stw	r5,-4(fp)
   9025c:	e0bffe17 	ldw	r2,-8(fp)
   90260:	10000326 	beq	r2,zero,90270 <alt_dev_llist_insert+0x2c>
   90264:	e0bffe17 	ldw	r2,-8(fp)
   90268:	10800217 	ldw	r2,8(r2)
   9026c:	1000061e 	bne	r2,zero,90288 <alt_dev_llist_insert+0x44>
   90270:	00902080 	call	90208 <alt_get_errno>
   90274:	1007883a 	mov	r3,r2
   90278:	00800584 	movi	r2,22
   9027c:	18800015 	stw	r2,0(r3)
   90280:	00bffa84 	movi	r2,-22
   90284:	00001306 	br	902d4 <alt_dev_llist_insert+0x90>
   90288:	e0bffe17 	ldw	r2,-8(fp)
   9028c:	e0ffff17 	ldw	r3,-4(fp)
   90290:	e0fffc15 	stw	r3,-16(fp)
   90294:	e0bffd15 	stw	r2,-12(fp)
   90298:	e0bffd17 	ldw	r2,-12(fp)
   9029c:	e0fffc17 	ldw	r3,-16(fp)
   902a0:	10c00115 	stw	r3,4(r2)
   902a4:	e0bffc17 	ldw	r2,-16(fp)
   902a8:	10c00017 	ldw	r3,0(r2)
   902ac:	e0bffd17 	ldw	r2,-12(fp)
   902b0:	10c00015 	stw	r3,0(r2)
   902b4:	e0bffc17 	ldw	r2,-16(fp)
   902b8:	10800017 	ldw	r2,0(r2)
   902bc:	e0fffd17 	ldw	r3,-12(fp)
   902c0:	10c00115 	stw	r3,4(r2)
   902c4:	e0bffc17 	ldw	r2,-16(fp)
   902c8:	e0fffd17 	ldw	r3,-12(fp)
   902cc:	10c00015 	stw	r3,0(r2)
   902d0:	0005883a 	mov	r2,zero
   902d4:	e037883a 	mov	sp,fp
   902d8:	dfc00117 	ldw	ra,4(sp)
   902dc:	df000017 	ldw	fp,0(sp)
   902e0:	dec00204 	addi	sp,sp,8
   902e4:	f800283a 	ret

000902e8 <_do_ctors>:
   902e8:	defffd04 	addi	sp,sp,-12
   902ec:	dfc00215 	stw	ra,8(sp)
   902f0:	df000115 	stw	fp,4(sp)
   902f4:	df000104 	addi	fp,sp,4
   902f8:	00800274 	movhi	r2,9
   902fc:	1084d404 	addi	r2,r2,4944
   90300:	e0bfff15 	stw	r2,-4(fp)
   90304:	00000606 	br	90320 <_do_ctors+0x38>
   90308:	e0bfff17 	ldw	r2,-4(fp)
   9030c:	10800017 	ldw	r2,0(r2)
   90310:	103ee83a 	callr	r2
   90314:	e0bfff17 	ldw	r2,-4(fp)
   90318:	10bfff04 	addi	r2,r2,-4
   9031c:	e0bfff15 	stw	r2,-4(fp)
   90320:	e0ffff17 	ldw	r3,-4(fp)
   90324:	00800274 	movhi	r2,9
   90328:	1084d504 	addi	r2,r2,4948
   9032c:	18bff62e 	bgeu	r3,r2,90308 <__alt_data_end+0xfffb0308>
   90330:	0001883a 	nop
   90334:	e037883a 	mov	sp,fp
   90338:	dfc00117 	ldw	ra,4(sp)
   9033c:	df000017 	ldw	fp,0(sp)
   90340:	dec00204 	addi	sp,sp,8
   90344:	f800283a 	ret

00090348 <_do_dtors>:
   90348:	defffd04 	addi	sp,sp,-12
   9034c:	dfc00215 	stw	ra,8(sp)
   90350:	df000115 	stw	fp,4(sp)
   90354:	df000104 	addi	fp,sp,4
   90358:	00800274 	movhi	r2,9
   9035c:	1084d404 	addi	r2,r2,4944
   90360:	e0bfff15 	stw	r2,-4(fp)
   90364:	00000606 	br	90380 <_do_dtors+0x38>
   90368:	e0bfff17 	ldw	r2,-4(fp)
   9036c:	10800017 	ldw	r2,0(r2)
   90370:	103ee83a 	callr	r2
   90374:	e0bfff17 	ldw	r2,-4(fp)
   90378:	10bfff04 	addi	r2,r2,-4
   9037c:	e0bfff15 	stw	r2,-4(fp)
   90380:	e0ffff17 	ldw	r3,-4(fp)
   90384:	00800274 	movhi	r2,9
   90388:	1084d504 	addi	r2,r2,4948
   9038c:	18bff62e 	bgeu	r3,r2,90368 <__alt_data_end+0xfffb0368>
   90390:	0001883a 	nop
   90394:	e037883a 	mov	sp,fp
   90398:	dfc00117 	ldw	ra,4(sp)
   9039c:	df000017 	ldw	fp,0(sp)
   903a0:	dec00204 	addi	sp,sp,8
   903a4:	f800283a 	ret

000903a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   903a8:	deffff04 	addi	sp,sp,-4
   903ac:	df000015 	stw	fp,0(sp)
   903b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   903b4:	0001883a 	nop
   903b8:	e037883a 	mov	sp,fp
   903bc:	df000017 	ldw	fp,0(sp)
   903c0:	dec00104 	addi	sp,sp,4
   903c4:	f800283a 	ret

000903c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   903c8:	defff904 	addi	sp,sp,-28
   903cc:	dfc00615 	stw	ra,24(sp)
   903d0:	df000515 	stw	fp,20(sp)
   903d4:	df000504 	addi	fp,sp,20
   903d8:	e13ffc15 	stw	r4,-16(fp)
   903dc:	e17ffd15 	stw	r5,-12(fp)
   903e0:	e1bffe15 	stw	r6,-8(fp)
   903e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   903e8:	e0800217 	ldw	r2,8(fp)
   903ec:	d8800015 	stw	r2,0(sp)
   903f0:	e1ffff17 	ldw	r7,-4(fp)
   903f4:	e1bffe17 	ldw	r6,-8(fp)
   903f8:	e17ffd17 	ldw	r5,-12(fp)
   903fc:	e13ffc17 	ldw	r4,-16(fp)
   90400:	00905780 	call	90578 <alt_iic_isr_register>
}  
   90404:	e037883a 	mov	sp,fp
   90408:	dfc00117 	ldw	ra,4(sp)
   9040c:	df000017 	ldw	fp,0(sp)
   90410:	dec00204 	addi	sp,sp,8
   90414:	f800283a 	ret

00090418 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   90418:	defff904 	addi	sp,sp,-28
   9041c:	df000615 	stw	fp,24(sp)
   90420:	df000604 	addi	fp,sp,24
   90424:	e13ffe15 	stw	r4,-8(fp)
   90428:	e17fff15 	stw	r5,-4(fp)
   9042c:	e0bfff17 	ldw	r2,-4(fp)
   90430:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90434:	0005303a 	rdctl	r2,status
   90438:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9043c:	e0fffb17 	ldw	r3,-20(fp)
   90440:	00bfff84 	movi	r2,-2
   90444:	1884703a 	and	r2,r3,r2
   90448:	1001703a 	wrctl	status,r2
  
  return context;
   9044c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   90450:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   90454:	00c00044 	movi	r3,1
   90458:	e0bffa17 	ldw	r2,-24(fp)
   9045c:	1884983a 	sll	r2,r3,r2
   90460:	1007883a 	mov	r3,r2
   90464:	d0a9a517 	ldw	r2,-22892(gp)
   90468:	1884b03a 	or	r2,r3,r2
   9046c:	d0a9a515 	stw	r2,-22892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   90470:	d0a9a517 	ldw	r2,-22892(gp)
   90474:	100170fa 	wrctl	ienable,r2
   90478:	e0bffc17 	ldw	r2,-16(fp)
   9047c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90480:	e0bffd17 	ldw	r2,-12(fp)
   90484:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   90488:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   9048c:	0001883a 	nop
}
   90490:	e037883a 	mov	sp,fp
   90494:	df000017 	ldw	fp,0(sp)
   90498:	dec00104 	addi	sp,sp,4
   9049c:	f800283a 	ret

000904a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   904a0:	defff904 	addi	sp,sp,-28
   904a4:	df000615 	stw	fp,24(sp)
   904a8:	df000604 	addi	fp,sp,24
   904ac:	e13ffe15 	stw	r4,-8(fp)
   904b0:	e17fff15 	stw	r5,-4(fp)
   904b4:	e0bfff17 	ldw	r2,-4(fp)
   904b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   904bc:	0005303a 	rdctl	r2,status
   904c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   904c4:	e0fffb17 	ldw	r3,-20(fp)
   904c8:	00bfff84 	movi	r2,-2
   904cc:	1884703a 	and	r2,r3,r2
   904d0:	1001703a 	wrctl	status,r2
  
  return context;
   904d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   904d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   904dc:	00c00044 	movi	r3,1
   904e0:	e0bffa17 	ldw	r2,-24(fp)
   904e4:	1884983a 	sll	r2,r3,r2
   904e8:	0084303a 	nor	r2,zero,r2
   904ec:	1007883a 	mov	r3,r2
   904f0:	d0a9a517 	ldw	r2,-22892(gp)
   904f4:	1884703a 	and	r2,r3,r2
   904f8:	d0a9a515 	stw	r2,-22892(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   904fc:	d0a9a517 	ldw	r2,-22892(gp)
   90500:	100170fa 	wrctl	ienable,r2
   90504:	e0bffc17 	ldw	r2,-16(fp)
   90508:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9050c:	e0bffd17 	ldw	r2,-12(fp)
   90510:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   90514:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   90518:	0001883a 	nop
}
   9051c:	e037883a 	mov	sp,fp
   90520:	df000017 	ldw	fp,0(sp)
   90524:	dec00104 	addi	sp,sp,4
   90528:	f800283a 	ret

0009052c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   9052c:	defffc04 	addi	sp,sp,-16
   90530:	df000315 	stw	fp,12(sp)
   90534:	df000304 	addi	fp,sp,12
   90538:	e13ffe15 	stw	r4,-8(fp)
   9053c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   90540:	000530fa 	rdctl	r2,ienable
   90544:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   90548:	00c00044 	movi	r3,1
   9054c:	e0bfff17 	ldw	r2,-4(fp)
   90550:	1884983a 	sll	r2,r3,r2
   90554:	1007883a 	mov	r3,r2
   90558:	e0bffd17 	ldw	r2,-12(fp)
   9055c:	1884703a 	and	r2,r3,r2
   90560:	1004c03a 	cmpne	r2,r2,zero
   90564:	10803fcc 	andi	r2,r2,255
}
   90568:	e037883a 	mov	sp,fp
   9056c:	df000017 	ldw	fp,0(sp)
   90570:	dec00104 	addi	sp,sp,4
   90574:	f800283a 	ret

00090578 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   90578:	defff504 	addi	sp,sp,-44
   9057c:	dfc00a15 	stw	ra,40(sp)
   90580:	df000915 	stw	fp,36(sp)
   90584:	df000904 	addi	fp,sp,36
   90588:	e13ffc15 	stw	r4,-16(fp)
   9058c:	e17ffd15 	stw	r5,-12(fp)
   90590:	e1bffe15 	stw	r6,-8(fp)
   90594:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   90598:	00bffa84 	movi	r2,-22
   9059c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   905a0:	e0bffd17 	ldw	r2,-12(fp)
   905a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   905a8:	e0bff817 	ldw	r2,-32(fp)
   905ac:	10800808 	cmpgei	r2,r2,32
   905b0:	1000271e 	bne	r2,zero,90650 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   905b4:	0005303a 	rdctl	r2,status
   905b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   905bc:	e0fffb17 	ldw	r3,-20(fp)
   905c0:	00bfff84 	movi	r2,-2
   905c4:	1884703a 	and	r2,r3,r2
   905c8:	1001703a 	wrctl	status,r2
  
  return context;
   905cc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   905d0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   905d4:	00800274 	movhi	r2,9
   905d8:	10993004 	addi	r2,r2,25792
   905dc:	e0fff817 	ldw	r3,-32(fp)
   905e0:	180690fa 	slli	r3,r3,3
   905e4:	10c5883a 	add	r2,r2,r3
   905e8:	e0fffe17 	ldw	r3,-8(fp)
   905ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   905f0:	00800274 	movhi	r2,9
   905f4:	10993004 	addi	r2,r2,25792
   905f8:	e0fff817 	ldw	r3,-32(fp)
   905fc:	180690fa 	slli	r3,r3,3
   90600:	10c5883a 	add	r2,r2,r3
   90604:	10800104 	addi	r2,r2,4
   90608:	e0ffff17 	ldw	r3,-4(fp)
   9060c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   90610:	e0bffe17 	ldw	r2,-8(fp)
   90614:	10000526 	beq	r2,zero,9062c <alt_iic_isr_register+0xb4>
   90618:	e0bff817 	ldw	r2,-32(fp)
   9061c:	100b883a 	mov	r5,r2
   90620:	e13ffc17 	ldw	r4,-16(fp)
   90624:	00904180 	call	90418 <alt_ic_irq_enable>
   90628:	00000406 	br	9063c <alt_iic_isr_register+0xc4>
   9062c:	e0bff817 	ldw	r2,-32(fp)
   90630:	100b883a 	mov	r5,r2
   90634:	e13ffc17 	ldw	r4,-16(fp)
   90638:	00904a00 	call	904a0 <alt_ic_irq_disable>
   9063c:	e0bff715 	stw	r2,-36(fp)
   90640:	e0bffa17 	ldw	r2,-24(fp)
   90644:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90648:	e0bff917 	ldw	r2,-28(fp)
   9064c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   90650:	e0bff717 	ldw	r2,-36(fp)
}
   90654:	e037883a 	mov	sp,fp
   90658:	dfc00117 	ldw	ra,4(sp)
   9065c:	df000017 	ldw	fp,0(sp)
   90660:	dec00204 	addi	sp,sp,8
   90664:	f800283a 	ret

00090668 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   90668:	defff804 	addi	sp,sp,-32
   9066c:	dfc00715 	stw	ra,28(sp)
   90670:	df000615 	stw	fp,24(sp)
   90674:	dc000515 	stw	r16,20(sp)
   90678:	df000604 	addi	fp,sp,24
   9067c:	e13ffb15 	stw	r4,-20(fp)
   90680:	e17ffc15 	stw	r5,-16(fp)
   90684:	e1bffd15 	stw	r6,-12(fp)
   90688:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   9068c:	e1bffe17 	ldw	r6,-8(fp)
   90690:	e17ffd17 	ldw	r5,-12(fp)
   90694:	e13ffc17 	ldw	r4,-16(fp)
   90698:	00908f00 	call	908f0 <open>
   9069c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   906a0:	e0bffa17 	ldw	r2,-24(fp)
   906a4:	10002216 	blt	r2,zero,90730 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   906a8:	04000274 	movhi	r16,9
   906ac:	840b0504 	addi	r16,r16,11284
   906b0:	e0bffa17 	ldw	r2,-24(fp)
   906b4:	01400304 	movi	r5,12
   906b8:	1009883a 	mov	r4,r2
   906bc:	0081b340 	call	81b34 <__mulsi3>
   906c0:	8085883a 	add	r2,r16,r2
   906c4:	10c00017 	ldw	r3,0(r2)
   906c8:	e0bffb17 	ldw	r2,-20(fp)
   906cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   906d0:	04000274 	movhi	r16,9
   906d4:	840b0504 	addi	r16,r16,11284
   906d8:	e0bffa17 	ldw	r2,-24(fp)
   906dc:	01400304 	movi	r5,12
   906e0:	1009883a 	mov	r4,r2
   906e4:	0081b340 	call	81b34 <__mulsi3>
   906e8:	8085883a 	add	r2,r16,r2
   906ec:	10800104 	addi	r2,r2,4
   906f0:	10c00017 	ldw	r3,0(r2)
   906f4:	e0bffb17 	ldw	r2,-20(fp)
   906f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   906fc:	04000274 	movhi	r16,9
   90700:	840b0504 	addi	r16,r16,11284
   90704:	e0bffa17 	ldw	r2,-24(fp)
   90708:	01400304 	movi	r5,12
   9070c:	1009883a 	mov	r4,r2
   90710:	0081b340 	call	81b34 <__mulsi3>
   90714:	8085883a 	add	r2,r16,r2
   90718:	10800204 	addi	r2,r2,8
   9071c:	10c00017 	ldw	r3,0(r2)
   90720:	e0bffb17 	ldw	r2,-20(fp)
   90724:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   90728:	e13ffa17 	ldw	r4,-24(fp)
   9072c:	008f3300 	call	8f330 <alt_release_fd>
  }
} 
   90730:	0001883a 	nop
   90734:	e6ffff04 	addi	sp,fp,-4
   90738:	dfc00217 	ldw	ra,8(sp)
   9073c:	df000117 	ldw	fp,4(sp)
   90740:	dc000017 	ldw	r16,0(sp)
   90744:	dec00304 	addi	sp,sp,12
   90748:	f800283a 	ret

0009074c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   9074c:	defffb04 	addi	sp,sp,-20
   90750:	dfc00415 	stw	ra,16(sp)
   90754:	df000315 	stw	fp,12(sp)
   90758:	df000304 	addi	fp,sp,12
   9075c:	e13ffd15 	stw	r4,-12(fp)
   90760:	e17ffe15 	stw	r5,-8(fp)
   90764:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   90768:	01c07fc4 	movi	r7,511
   9076c:	01800044 	movi	r6,1
   90770:	e17ffd17 	ldw	r5,-12(fp)
   90774:	01000274 	movhi	r4,9
   90778:	210b0804 	addi	r4,r4,11296
   9077c:	00906680 	call	90668 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   90780:	01c07fc4 	movi	r7,511
   90784:	000d883a 	mov	r6,zero
   90788:	e17ffe17 	ldw	r5,-8(fp)
   9078c:	01000274 	movhi	r4,9
   90790:	210b0504 	addi	r4,r4,11284
   90794:	00906680 	call	90668 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   90798:	01c07fc4 	movi	r7,511
   9079c:	01800044 	movi	r6,1
   907a0:	e17fff17 	ldw	r5,-4(fp)
   907a4:	01000274 	movhi	r4,9
   907a8:	210b0b04 	addi	r4,r4,11308
   907ac:	00906680 	call	90668 <alt_open_fd>
}  
   907b0:	0001883a 	nop
   907b4:	e037883a 	mov	sp,fp
   907b8:	dfc00117 	ldw	ra,4(sp)
   907bc:	df000017 	ldw	fp,0(sp)
   907c0:	dec00204 	addi	sp,sp,8
   907c4:	f800283a 	ret

000907c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   907c8:	defffe04 	addi	sp,sp,-8
   907cc:	dfc00115 	stw	ra,4(sp)
   907d0:	df000015 	stw	fp,0(sp)
   907d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   907d8:	d0a00b17 	ldw	r2,-32724(gp)
   907dc:	10000326 	beq	r2,zero,907ec <alt_get_errno+0x24>
   907e0:	d0a00b17 	ldw	r2,-32724(gp)
   907e4:	103ee83a 	callr	r2
   907e8:	00000106 	br	907f0 <alt_get_errno+0x28>
   907ec:	d0a9a104 	addi	r2,gp,-22908
}
   907f0:	e037883a 	mov	sp,fp
   907f4:	dfc00117 	ldw	ra,4(sp)
   907f8:	df000017 	ldw	fp,0(sp)
   907fc:	dec00204 	addi	sp,sp,8
   90800:	f800283a 	ret

00090804 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   90804:	defffb04 	addi	sp,sp,-20
   90808:	dfc00415 	stw	ra,16(sp)
   9080c:	df000315 	stw	fp,12(sp)
   90810:	dc000215 	stw	r16,8(sp)
   90814:	df000304 	addi	fp,sp,12
   90818:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   9081c:	e0bffe17 	ldw	r2,-8(fp)
   90820:	10800217 	ldw	r2,8(r2)
   90824:	10d00034 	orhi	r3,r2,16384
   90828:	e0bffe17 	ldw	r2,-8(fp)
   9082c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   90830:	e03ffd15 	stw	zero,-12(fp)
   90834:	00002306 	br	908c4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   90838:	04000274 	movhi	r16,9
   9083c:	840b0504 	addi	r16,r16,11284
   90840:	e0bffd17 	ldw	r2,-12(fp)
   90844:	01400304 	movi	r5,12
   90848:	1009883a 	mov	r4,r2
   9084c:	0081b340 	call	81b34 <__mulsi3>
   90850:	8085883a 	add	r2,r16,r2
   90854:	10c00017 	ldw	r3,0(r2)
   90858:	e0bffe17 	ldw	r2,-8(fp)
   9085c:	10800017 	ldw	r2,0(r2)
   90860:	1880151e 	bne	r3,r2,908b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   90864:	04000274 	movhi	r16,9
   90868:	840b0504 	addi	r16,r16,11284
   9086c:	e0bffd17 	ldw	r2,-12(fp)
   90870:	01400304 	movi	r5,12
   90874:	1009883a 	mov	r4,r2
   90878:	0081b340 	call	81b34 <__mulsi3>
   9087c:	8085883a 	add	r2,r16,r2
   90880:	10800204 	addi	r2,r2,8
   90884:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   90888:	10000b0e 	bge	r2,zero,908b8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   9088c:	01400304 	movi	r5,12
   90890:	e13ffd17 	ldw	r4,-12(fp)
   90894:	0081b340 	call	81b34 <__mulsi3>
   90898:	1007883a 	mov	r3,r2
   9089c:	00800274 	movhi	r2,9
   908a0:	108b0504 	addi	r2,r2,11284
   908a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   908a8:	e0bffe17 	ldw	r2,-8(fp)
   908ac:	18800226 	beq	r3,r2,908b8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   908b0:	00bffcc4 	movi	r2,-13
   908b4:	00000806 	br	908d8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   908b8:	e0bffd17 	ldw	r2,-12(fp)
   908bc:	10800044 	addi	r2,r2,1
   908c0:	e0bffd15 	stw	r2,-12(fp)
   908c4:	d0a00a17 	ldw	r2,-32728(gp)
   908c8:	1007883a 	mov	r3,r2
   908cc:	e0bffd17 	ldw	r2,-12(fp)
   908d0:	18bfd92e 	bgeu	r3,r2,90838 <__alt_data_end+0xfffb0838>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   908d4:	0005883a 	mov	r2,zero
}
   908d8:	e6ffff04 	addi	sp,fp,-4
   908dc:	dfc00217 	ldw	ra,8(sp)
   908e0:	df000117 	ldw	fp,4(sp)
   908e4:	dc000017 	ldw	r16,0(sp)
   908e8:	dec00304 	addi	sp,sp,12
   908ec:	f800283a 	ret

000908f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   908f0:	defff604 	addi	sp,sp,-40
   908f4:	dfc00915 	stw	ra,36(sp)
   908f8:	df000815 	stw	fp,32(sp)
   908fc:	df000804 	addi	fp,sp,32
   90900:	e13ffd15 	stw	r4,-12(fp)
   90904:	e17ffe15 	stw	r5,-8(fp)
   90908:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   9090c:	00bfffc4 	movi	r2,-1
   90910:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   90914:	00bffb44 	movi	r2,-19
   90918:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   9091c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   90920:	d1600804 	addi	r5,gp,-32736
   90924:	e13ffd17 	ldw	r4,-12(fp)
   90928:	0090c140 	call	90c14 <alt_find_dev>
   9092c:	e0bff815 	stw	r2,-32(fp)
   90930:	e0bff817 	ldw	r2,-32(fp)
   90934:	1000051e 	bne	r2,zero,9094c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   90938:	e13ffd17 	ldw	r4,-12(fp)
   9093c:	0090ca40 	call	90ca4 <alt_find_file>
   90940:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   90944:	00800044 	movi	r2,1
   90948:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   9094c:	e0bff817 	ldw	r2,-32(fp)
   90950:	10002b26 	beq	r2,zero,90a00 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   90954:	e13ff817 	ldw	r4,-32(fp)
   90958:	0090dac0 	call	90dac <alt_get_fd>
   9095c:	e0bff915 	stw	r2,-28(fp)
   90960:	e0bff917 	ldw	r2,-28(fp)
   90964:	1000030e 	bge	r2,zero,90974 <open+0x84>
    {
      status = index;
   90968:	e0bff917 	ldw	r2,-28(fp)
   9096c:	e0bffa15 	stw	r2,-24(fp)
   90970:	00002506 	br	90a08 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   90974:	01400304 	movi	r5,12
   90978:	e13ff917 	ldw	r4,-28(fp)
   9097c:	0081b340 	call	81b34 <__mulsi3>
   90980:	1007883a 	mov	r3,r2
   90984:	00800274 	movhi	r2,9
   90988:	108b0504 	addi	r2,r2,11284
   9098c:	1885883a 	add	r2,r3,r2
   90990:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   90994:	e0fffe17 	ldw	r3,-8(fp)
   90998:	00900034 	movhi	r2,16384
   9099c:	10bfffc4 	addi	r2,r2,-1
   909a0:	1886703a 	and	r3,r3,r2
   909a4:	e0bffc17 	ldw	r2,-16(fp)
   909a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   909ac:	e0bffb17 	ldw	r2,-20(fp)
   909b0:	1000051e 	bne	r2,zero,909c8 <open+0xd8>
   909b4:	e13ffc17 	ldw	r4,-16(fp)
   909b8:	00908040 	call	90804 <alt_file_locked>
   909bc:	e0bffa15 	stw	r2,-24(fp)
   909c0:	e0bffa17 	ldw	r2,-24(fp)
   909c4:	10001016 	blt	r2,zero,90a08 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   909c8:	e0bff817 	ldw	r2,-32(fp)
   909cc:	10800317 	ldw	r2,12(r2)
   909d0:	10000826 	beq	r2,zero,909f4 <open+0x104>
   909d4:	e0bff817 	ldw	r2,-32(fp)
   909d8:	10800317 	ldw	r2,12(r2)
   909dc:	e1ffff17 	ldw	r7,-4(fp)
   909e0:	e1bffe17 	ldw	r6,-8(fp)
   909e4:	e17ffd17 	ldw	r5,-12(fp)
   909e8:	e13ffc17 	ldw	r4,-16(fp)
   909ec:	103ee83a 	callr	r2
   909f0:	00000106 	br	909f8 <open+0x108>
   909f4:	0005883a 	mov	r2,zero
   909f8:	e0bffa15 	stw	r2,-24(fp)
   909fc:	00000206 	br	90a08 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   90a00:	00bffb44 	movi	r2,-19
   90a04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   90a08:	e0bffa17 	ldw	r2,-24(fp)
   90a0c:	1000090e 	bge	r2,zero,90a34 <open+0x144>
  {
    alt_release_fd (index);  
   90a10:	e13ff917 	ldw	r4,-28(fp)
   90a14:	008f3300 	call	8f330 <alt_release_fd>
    ALT_ERRNO = -status;
   90a18:	00907c80 	call	907c8 <alt_get_errno>
   90a1c:	1007883a 	mov	r3,r2
   90a20:	e0bffa17 	ldw	r2,-24(fp)
   90a24:	0085c83a 	sub	r2,zero,r2
   90a28:	18800015 	stw	r2,0(r3)
    return -1;
   90a2c:	00bfffc4 	movi	r2,-1
   90a30:	00000106 	br	90a38 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   90a34:	e0bff917 	ldw	r2,-28(fp)
}
   90a38:	e037883a 	mov	sp,fp
   90a3c:	dfc00117 	ldw	ra,4(sp)
   90a40:	df000017 	ldw	fp,0(sp)
   90a44:	dec00204 	addi	sp,sp,8
   90a48:	f800283a 	ret

00090a4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   90a4c:	defffa04 	addi	sp,sp,-24
   90a50:	df000515 	stw	fp,20(sp)
   90a54:	df000504 	addi	fp,sp,20
   90a58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90a5c:	0005303a 	rdctl	r2,status
   90a60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90a64:	e0fffc17 	ldw	r3,-16(fp)
   90a68:	00bfff84 	movi	r2,-2
   90a6c:	1884703a 	and	r2,r3,r2
   90a70:	1001703a 	wrctl	status,r2
  
  return context;
   90a74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   90a78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   90a7c:	e0bfff17 	ldw	r2,-4(fp)
   90a80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   90a84:	e0bffd17 	ldw	r2,-12(fp)
   90a88:	10800017 	ldw	r2,0(r2)
   90a8c:	e0fffd17 	ldw	r3,-12(fp)
   90a90:	18c00117 	ldw	r3,4(r3)
   90a94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   90a98:	e0bffd17 	ldw	r2,-12(fp)
   90a9c:	10800117 	ldw	r2,4(r2)
   90aa0:	e0fffd17 	ldw	r3,-12(fp)
   90aa4:	18c00017 	ldw	r3,0(r3)
   90aa8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   90aac:	e0bffd17 	ldw	r2,-12(fp)
   90ab0:	e0fffd17 	ldw	r3,-12(fp)
   90ab4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   90ab8:	e0bffd17 	ldw	r2,-12(fp)
   90abc:	e0fffd17 	ldw	r3,-12(fp)
   90ac0:	10c00015 	stw	r3,0(r2)
   90ac4:	e0bffb17 	ldw	r2,-20(fp)
   90ac8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90acc:	e0bffe17 	ldw	r2,-8(fp)
   90ad0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   90ad4:	0001883a 	nop
   90ad8:	e037883a 	mov	sp,fp
   90adc:	df000017 	ldw	fp,0(sp)
   90ae0:	dec00104 	addi	sp,sp,4
   90ae4:	f800283a 	ret

00090ae8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   90ae8:	defffb04 	addi	sp,sp,-20
   90aec:	dfc00415 	stw	ra,16(sp)
   90af0:	df000315 	stw	fp,12(sp)
   90af4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   90af8:	d0a00e17 	ldw	r2,-32712(gp)
   90afc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   90b00:	d0a9a717 	ldw	r2,-22884(gp)
   90b04:	10800044 	addi	r2,r2,1
   90b08:	d0a9a715 	stw	r2,-22884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   90b0c:	00002e06 	br	90bc8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   90b10:	e0bffd17 	ldw	r2,-12(fp)
   90b14:	10800017 	ldw	r2,0(r2)
   90b18:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   90b1c:	e0bffd17 	ldw	r2,-12(fp)
   90b20:	10800403 	ldbu	r2,16(r2)
   90b24:	10803fcc 	andi	r2,r2,255
   90b28:	10000426 	beq	r2,zero,90b3c <alt_tick+0x54>
   90b2c:	d0a9a717 	ldw	r2,-22884(gp)
   90b30:	1000021e 	bne	r2,zero,90b3c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   90b34:	e0bffd17 	ldw	r2,-12(fp)
   90b38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   90b3c:	e0bffd17 	ldw	r2,-12(fp)
   90b40:	10800217 	ldw	r2,8(r2)
   90b44:	d0e9a717 	ldw	r3,-22884(gp)
   90b48:	18801d36 	bltu	r3,r2,90bc0 <alt_tick+0xd8>
   90b4c:	e0bffd17 	ldw	r2,-12(fp)
   90b50:	10800403 	ldbu	r2,16(r2)
   90b54:	10803fcc 	andi	r2,r2,255
   90b58:	1000191e 	bne	r2,zero,90bc0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   90b5c:	e0bffd17 	ldw	r2,-12(fp)
   90b60:	10800317 	ldw	r2,12(r2)
   90b64:	e0fffd17 	ldw	r3,-12(fp)
   90b68:	18c00517 	ldw	r3,20(r3)
   90b6c:	1809883a 	mov	r4,r3
   90b70:	103ee83a 	callr	r2
   90b74:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   90b78:	e0bfff17 	ldw	r2,-4(fp)
   90b7c:	1000031e 	bne	r2,zero,90b8c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   90b80:	e13ffd17 	ldw	r4,-12(fp)
   90b84:	0090a4c0 	call	90a4c <alt_alarm_stop>
   90b88:	00000d06 	br	90bc0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   90b8c:	e0bffd17 	ldw	r2,-12(fp)
   90b90:	10c00217 	ldw	r3,8(r2)
   90b94:	e0bfff17 	ldw	r2,-4(fp)
   90b98:	1887883a 	add	r3,r3,r2
   90b9c:	e0bffd17 	ldw	r2,-12(fp)
   90ba0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   90ba4:	e0bffd17 	ldw	r2,-12(fp)
   90ba8:	10c00217 	ldw	r3,8(r2)
   90bac:	d0a9a717 	ldw	r2,-22884(gp)
   90bb0:	1880032e 	bgeu	r3,r2,90bc0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   90bb4:	e0bffd17 	ldw	r2,-12(fp)
   90bb8:	00c00044 	movi	r3,1
   90bbc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   90bc0:	e0bffe17 	ldw	r2,-8(fp)
   90bc4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   90bc8:	e0fffd17 	ldw	r3,-12(fp)
   90bcc:	d0a00e04 	addi	r2,gp,-32712
   90bd0:	18bfcf1e 	bne	r3,r2,90b10 <__alt_data_end+0xfffb0b10>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   90bd4:	0001883a 	nop
}
   90bd8:	0001883a 	nop
   90bdc:	e037883a 	mov	sp,fp
   90be0:	dfc00117 	ldw	ra,4(sp)
   90be4:	df000017 	ldw	fp,0(sp)
   90be8:	dec00204 	addi	sp,sp,8
   90bec:	f800283a 	ret

00090bf0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   90bf0:	deffff04 	addi	sp,sp,-4
   90bf4:	df000015 	stw	fp,0(sp)
   90bf8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   90bfc:	000170fa 	wrctl	ienable,zero
}
   90c00:	0001883a 	nop
   90c04:	e037883a 	mov	sp,fp
   90c08:	df000017 	ldw	fp,0(sp)
   90c0c:	dec00104 	addi	sp,sp,4
   90c10:	f800283a 	ret

00090c14 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   90c14:	defffa04 	addi	sp,sp,-24
   90c18:	dfc00515 	stw	ra,20(sp)
   90c1c:	df000415 	stw	fp,16(sp)
   90c20:	df000404 	addi	fp,sp,16
   90c24:	e13ffe15 	stw	r4,-8(fp)
   90c28:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   90c2c:	e0bfff17 	ldw	r2,-4(fp)
   90c30:	10800017 	ldw	r2,0(r2)
   90c34:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   90c38:	e13ffe17 	ldw	r4,-8(fp)
   90c3c:	0081d380 	call	81d38 <strlen>
   90c40:	10800044 	addi	r2,r2,1
   90c44:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90c48:	00000d06 	br	90c80 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   90c4c:	e0bffc17 	ldw	r2,-16(fp)
   90c50:	10800217 	ldw	r2,8(r2)
   90c54:	e0fffd17 	ldw	r3,-12(fp)
   90c58:	180d883a 	mov	r6,r3
   90c5c:	e17ffe17 	ldw	r5,-8(fp)
   90c60:	1009883a 	mov	r4,r2
   90c64:	009100c0 	call	9100c <memcmp>
   90c68:	1000021e 	bne	r2,zero,90c74 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   90c6c:	e0bffc17 	ldw	r2,-16(fp)
   90c70:	00000706 	br	90c90 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   90c74:	e0bffc17 	ldw	r2,-16(fp)
   90c78:	10800017 	ldw	r2,0(r2)
   90c7c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90c80:	e0fffc17 	ldw	r3,-16(fp)
   90c84:	e0bfff17 	ldw	r2,-4(fp)
   90c88:	18bff01e 	bne	r3,r2,90c4c <__alt_data_end+0xfffb0c4c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   90c8c:	0005883a 	mov	r2,zero
}
   90c90:	e037883a 	mov	sp,fp
   90c94:	dfc00117 	ldw	ra,4(sp)
   90c98:	df000017 	ldw	fp,0(sp)
   90c9c:	dec00204 	addi	sp,sp,8
   90ca0:	f800283a 	ret

00090ca4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   90ca4:	defffb04 	addi	sp,sp,-20
   90ca8:	dfc00415 	stw	ra,16(sp)
   90cac:	df000315 	stw	fp,12(sp)
   90cb0:	df000304 	addi	fp,sp,12
   90cb4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   90cb8:	d0a00617 	ldw	r2,-32744(gp)
   90cbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   90cc0:	00003106 	br	90d88 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   90cc4:	e0bffd17 	ldw	r2,-12(fp)
   90cc8:	10800217 	ldw	r2,8(r2)
   90ccc:	1009883a 	mov	r4,r2
   90cd0:	0081d380 	call	81d38 <strlen>
   90cd4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   90cd8:	e0bffd17 	ldw	r2,-12(fp)
   90cdc:	10c00217 	ldw	r3,8(r2)
   90ce0:	e0bffe17 	ldw	r2,-8(fp)
   90ce4:	10bfffc4 	addi	r2,r2,-1
   90ce8:	1885883a 	add	r2,r3,r2
   90cec:	10800003 	ldbu	r2,0(r2)
   90cf0:	10803fcc 	andi	r2,r2,255
   90cf4:	1080201c 	xori	r2,r2,128
   90cf8:	10bfe004 	addi	r2,r2,-128
   90cfc:	10800bd8 	cmpnei	r2,r2,47
   90d00:	1000031e 	bne	r2,zero,90d10 <alt_find_file+0x6c>
    {
      len -= 1;
   90d04:	e0bffe17 	ldw	r2,-8(fp)
   90d08:	10bfffc4 	addi	r2,r2,-1
   90d0c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   90d10:	e0bffe17 	ldw	r2,-8(fp)
   90d14:	e0ffff17 	ldw	r3,-4(fp)
   90d18:	1885883a 	add	r2,r3,r2
   90d1c:	10800003 	ldbu	r2,0(r2)
   90d20:	10803fcc 	andi	r2,r2,255
   90d24:	1080201c 	xori	r2,r2,128
   90d28:	10bfe004 	addi	r2,r2,-128
   90d2c:	10800be0 	cmpeqi	r2,r2,47
   90d30:	1000081e 	bne	r2,zero,90d54 <alt_find_file+0xb0>
   90d34:	e0bffe17 	ldw	r2,-8(fp)
   90d38:	e0ffff17 	ldw	r3,-4(fp)
   90d3c:	1885883a 	add	r2,r3,r2
   90d40:	10800003 	ldbu	r2,0(r2)
   90d44:	10803fcc 	andi	r2,r2,255
   90d48:	1080201c 	xori	r2,r2,128
   90d4c:	10bfe004 	addi	r2,r2,-128
   90d50:	10000a1e 	bne	r2,zero,90d7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   90d54:	e0bffd17 	ldw	r2,-12(fp)
   90d58:	10800217 	ldw	r2,8(r2)
   90d5c:	e0fffe17 	ldw	r3,-8(fp)
   90d60:	180d883a 	mov	r6,r3
   90d64:	e17fff17 	ldw	r5,-4(fp)
   90d68:	1009883a 	mov	r4,r2
   90d6c:	009100c0 	call	9100c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   90d70:	1000021e 	bne	r2,zero,90d7c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   90d74:	e0bffd17 	ldw	r2,-12(fp)
   90d78:	00000706 	br	90d98 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   90d7c:	e0bffd17 	ldw	r2,-12(fp)
   90d80:	10800017 	ldw	r2,0(r2)
   90d84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   90d88:	e0fffd17 	ldw	r3,-12(fp)
   90d8c:	d0a00604 	addi	r2,gp,-32744
   90d90:	18bfcc1e 	bne	r3,r2,90cc4 <__alt_data_end+0xfffb0cc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   90d94:	0005883a 	mov	r2,zero
}
   90d98:	e037883a 	mov	sp,fp
   90d9c:	dfc00117 	ldw	ra,4(sp)
   90da0:	df000017 	ldw	fp,0(sp)
   90da4:	dec00204 	addi	sp,sp,8
   90da8:	f800283a 	ret

00090dac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   90dac:	defffa04 	addi	sp,sp,-24
   90db0:	dfc00515 	stw	ra,20(sp)
   90db4:	df000415 	stw	fp,16(sp)
   90db8:	dc000315 	stw	r16,12(sp)
   90dbc:	df000404 	addi	fp,sp,16
   90dc0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   90dc4:	00bffa04 	movi	r2,-24
   90dc8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   90dcc:	e03ffc15 	stw	zero,-16(fp)
   90dd0:	00001d06 	br	90e48 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   90dd4:	04000274 	movhi	r16,9
   90dd8:	840b0504 	addi	r16,r16,11284
   90ddc:	e0bffc17 	ldw	r2,-16(fp)
   90de0:	01400304 	movi	r5,12
   90de4:	1009883a 	mov	r4,r2
   90de8:	0081b340 	call	81b34 <__mulsi3>
   90dec:	8085883a 	add	r2,r16,r2
   90df0:	10800017 	ldw	r2,0(r2)
   90df4:	1000111e 	bne	r2,zero,90e3c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   90df8:	04000274 	movhi	r16,9
   90dfc:	840b0504 	addi	r16,r16,11284
   90e00:	e0bffc17 	ldw	r2,-16(fp)
   90e04:	01400304 	movi	r5,12
   90e08:	1009883a 	mov	r4,r2
   90e0c:	0081b340 	call	81b34 <__mulsi3>
   90e10:	8085883a 	add	r2,r16,r2
   90e14:	e0fffe17 	ldw	r3,-8(fp)
   90e18:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   90e1c:	d0e00a17 	ldw	r3,-32728(gp)
   90e20:	e0bffc17 	ldw	r2,-16(fp)
   90e24:	1880020e 	bge	r3,r2,90e30 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   90e28:	e0bffc17 	ldw	r2,-16(fp)
   90e2c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   90e30:	e0bffc17 	ldw	r2,-16(fp)
   90e34:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   90e38:	00000606 	br	90e54 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   90e3c:	e0bffc17 	ldw	r2,-16(fp)
   90e40:	10800044 	addi	r2,r2,1
   90e44:	e0bffc15 	stw	r2,-16(fp)
   90e48:	e0bffc17 	ldw	r2,-16(fp)
   90e4c:	10800810 	cmplti	r2,r2,32
   90e50:	103fe01e 	bne	r2,zero,90dd4 <__alt_data_end+0xfffb0dd4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   90e54:	e0bffd17 	ldw	r2,-12(fp)
}
   90e58:	e6ffff04 	addi	sp,fp,-4
   90e5c:	dfc00217 	ldw	ra,8(sp)
   90e60:	df000117 	ldw	fp,4(sp)
   90e64:	dc000017 	ldw	r16,0(sp)
   90e68:	dec00304 	addi	sp,sp,12
   90e6c:	f800283a 	ret

00090e70 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   90e70:	defffe04 	addi	sp,sp,-8
   90e74:	df000115 	stw	fp,4(sp)
   90e78:	df000104 	addi	fp,sp,4
   90e7c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   90e80:	e0bfff17 	ldw	r2,-4(fp)
   90e84:	10bffe84 	addi	r2,r2,-6
   90e88:	10c00428 	cmpgeui	r3,r2,16
   90e8c:	18001a1e 	bne	r3,zero,90ef8 <alt_exception_cause_generated_bad_addr+0x88>
   90e90:	100690ba 	slli	r3,r2,2
   90e94:	00800274 	movhi	r2,9
   90e98:	1083aa04 	addi	r2,r2,3752
   90e9c:	1885883a 	add	r2,r3,r2
   90ea0:	10800017 	ldw	r2,0(r2)
   90ea4:	1000683a 	jmp	r2
   90ea8:	00090ee8 	cmpgeui	zero,zero,9275
   90eac:	00090ee8 	cmpgeui	zero,zero,9275
   90eb0:	00090ef8 	rdprs	zero,zero,9275
   90eb4:	00090ef8 	rdprs	zero,zero,9275
   90eb8:	00090ef8 	rdprs	zero,zero,9275
   90ebc:	00090ee8 	cmpgeui	zero,zero,9275
   90ec0:	00090ef0 	cmpltui	zero,zero,9275
   90ec4:	00090ef8 	rdprs	zero,zero,9275
   90ec8:	00090ee8 	cmpgeui	zero,zero,9275
   90ecc:	00090ee8 	cmpgeui	zero,zero,9275
   90ed0:	00090ef8 	rdprs	zero,zero,9275
   90ed4:	00090ee8 	cmpgeui	zero,zero,9275
   90ed8:	00090ef0 	cmpltui	zero,zero,9275
   90edc:	00090ef8 	rdprs	zero,zero,9275
   90ee0:	00090ef8 	rdprs	zero,zero,9275
   90ee4:	00090ee8 	cmpgeui	zero,zero,9275
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   90ee8:	00800044 	movi	r2,1
   90eec:	00000306 	br	90efc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   90ef0:	0005883a 	mov	r2,zero
   90ef4:	00000106 	br	90efc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   90ef8:	0005883a 	mov	r2,zero
  }
}
   90efc:	e037883a 	mov	sp,fp
   90f00:	df000017 	ldw	fp,0(sp)
   90f04:	dec00104 	addi	sp,sp,4
   90f08:	f800283a 	ret

00090f0c <atexit>:
   90f0c:	200b883a 	mov	r5,r4
   90f10:	000f883a 	mov	r7,zero
   90f14:	000d883a 	mov	r6,zero
   90f18:	0009883a 	mov	r4,zero
   90f1c:	00910881 	jmpi	91088 <__register_exitproc>

00090f20 <exit>:
   90f20:	defffe04 	addi	sp,sp,-8
   90f24:	000b883a 	mov	r5,zero
   90f28:	dc000015 	stw	r16,0(sp)
   90f2c:	dfc00115 	stw	ra,4(sp)
   90f30:	2021883a 	mov	r16,r4
   90f34:	00911a00 	call	911a0 <__call_exitprocs>
   90f38:	00800274 	movhi	r2,9
   90f3c:	108f7d04 	addi	r2,r2,15860
   90f40:	11000017 	ldw	r4,0(r2)
   90f44:	20800f17 	ldw	r2,60(r4)
   90f48:	10000126 	beq	r2,zero,90f50 <exit+0x30>
   90f4c:	103ee83a 	callr	r2
   90f50:	8009883a 	mov	r4,r16
   90f54:	00913200 	call	91320 <_exit>

00090f58 <_fputs_r>:
   90f58:	defff804 	addi	sp,sp,-32
   90f5c:	dc400615 	stw	r17,24(sp)
   90f60:	2023883a 	mov	r17,r4
   90f64:	2809883a 	mov	r4,r5
   90f68:	dc000515 	stw	r16,20(sp)
   90f6c:	dfc00715 	stw	ra,28(sp)
   90f70:	3021883a 	mov	r16,r6
   90f74:	d9400315 	stw	r5,12(sp)
   90f78:	0081d380 	call	81d38 <strlen>
   90f7c:	d8800215 	stw	r2,8(sp)
   90f80:	d8800415 	stw	r2,16(sp)
   90f84:	d8800304 	addi	r2,sp,12
   90f88:	d8800015 	stw	r2,0(sp)
   90f8c:	00800044 	movi	r2,1
   90f90:	d8800115 	stw	r2,4(sp)
   90f94:	88000226 	beq	r17,zero,90fa0 <_fputs_r+0x48>
   90f98:	88800e17 	ldw	r2,56(r17)
   90f9c:	10001226 	beq	r2,zero,90fe8 <_fputs_r+0x90>
   90fa0:	8080030b 	ldhu	r2,12(r16)
   90fa4:	10c8000c 	andi	r3,r2,8192
   90fa8:	1800061e 	bne	r3,zero,90fc4 <_fputs_r+0x6c>
   90fac:	81001917 	ldw	r4,100(r16)
   90fb0:	00f7ffc4 	movi	r3,-8193
   90fb4:	10880014 	ori	r2,r2,8192
   90fb8:	20c6703a 	and	r3,r4,r3
   90fbc:	8080030d 	sth	r2,12(r16)
   90fc0:	80c01915 	stw	r3,100(r16)
   90fc4:	d80d883a 	mov	r6,sp
   90fc8:	800b883a 	mov	r5,r16
   90fcc:	8809883a 	mov	r4,r17
   90fd0:	00866140 	call	86614 <__sfvwrite_r>
   90fd4:	dfc00717 	ldw	ra,28(sp)
   90fd8:	dc400617 	ldw	r17,24(sp)
   90fdc:	dc000517 	ldw	r16,20(sp)
   90fe0:	dec00804 	addi	sp,sp,32
   90fe4:	f800283a 	ret
   90fe8:	8809883a 	mov	r4,r17
   90fec:	00861900 	call	86190 <__sinit>
   90ff0:	003feb06 	br	90fa0 <__alt_data_end+0xfffb0fa0>

00090ff4 <fputs>:
   90ff4:	00800274 	movhi	r2,9
   90ff8:	108f7e04 	addi	r2,r2,15864
   90ffc:	280d883a 	mov	r6,r5
   91000:	200b883a 	mov	r5,r4
   91004:	11000017 	ldw	r4,0(r2)
   91008:	0090f581 	jmpi	90f58 <_fputs_r>

0009100c <memcmp>:
   9100c:	01c000c4 	movi	r7,3
   91010:	3980192e 	bgeu	r7,r6,91078 <memcmp+0x6c>
   91014:	2144b03a 	or	r2,r4,r5
   91018:	11c4703a 	and	r2,r2,r7
   9101c:	10000f26 	beq	r2,zero,9105c <memcmp+0x50>
   91020:	20800003 	ldbu	r2,0(r4)
   91024:	28c00003 	ldbu	r3,0(r5)
   91028:	10c0151e 	bne	r2,r3,91080 <memcmp+0x74>
   9102c:	31bfff84 	addi	r6,r6,-2
   91030:	01ffffc4 	movi	r7,-1
   91034:	00000406 	br	91048 <memcmp+0x3c>
   91038:	20800003 	ldbu	r2,0(r4)
   9103c:	28c00003 	ldbu	r3,0(r5)
   91040:	31bfffc4 	addi	r6,r6,-1
   91044:	10c00e1e 	bne	r2,r3,91080 <memcmp+0x74>
   91048:	21000044 	addi	r4,r4,1
   9104c:	29400044 	addi	r5,r5,1
   91050:	31fff91e 	bne	r6,r7,91038 <__alt_data_end+0xfffb1038>
   91054:	0005883a 	mov	r2,zero
   91058:	f800283a 	ret
   9105c:	20c00017 	ldw	r3,0(r4)
   91060:	28800017 	ldw	r2,0(r5)
   91064:	18bfee1e 	bne	r3,r2,91020 <__alt_data_end+0xfffb1020>
   91068:	31bfff04 	addi	r6,r6,-4
   9106c:	21000104 	addi	r4,r4,4
   91070:	29400104 	addi	r5,r5,4
   91074:	39bff936 	bltu	r7,r6,9105c <__alt_data_end+0xfffb105c>
   91078:	303fe91e 	bne	r6,zero,91020 <__alt_data_end+0xfffb1020>
   9107c:	003ff506 	br	91054 <__alt_data_end+0xfffb1054>
   91080:	10c5c83a 	sub	r2,r2,r3
   91084:	f800283a 	ret

00091088 <__register_exitproc>:
   91088:	defffa04 	addi	sp,sp,-24
   9108c:	dc000315 	stw	r16,12(sp)
   91090:	04000274 	movhi	r16,9
   91094:	840f7d04 	addi	r16,r16,15860
   91098:	80c00017 	ldw	r3,0(r16)
   9109c:	dc400415 	stw	r17,16(sp)
   910a0:	dfc00515 	stw	ra,20(sp)
   910a4:	18805217 	ldw	r2,328(r3)
   910a8:	2023883a 	mov	r17,r4
   910ac:	10003726 	beq	r2,zero,9118c <__register_exitproc+0x104>
   910b0:	10c00117 	ldw	r3,4(r2)
   910b4:	010007c4 	movi	r4,31
   910b8:	20c00e16 	blt	r4,r3,910f4 <__register_exitproc+0x6c>
   910bc:	1a000044 	addi	r8,r3,1
   910c0:	8800221e 	bne	r17,zero,9114c <__register_exitproc+0xc4>
   910c4:	18c00084 	addi	r3,r3,2
   910c8:	18c7883a 	add	r3,r3,r3
   910cc:	18c7883a 	add	r3,r3,r3
   910d0:	12000115 	stw	r8,4(r2)
   910d4:	10c7883a 	add	r3,r2,r3
   910d8:	19400015 	stw	r5,0(r3)
   910dc:	0005883a 	mov	r2,zero
   910e0:	dfc00517 	ldw	ra,20(sp)
   910e4:	dc400417 	ldw	r17,16(sp)
   910e8:	dc000317 	ldw	r16,12(sp)
   910ec:	dec00604 	addi	sp,sp,24
   910f0:	f800283a 	ret
   910f4:	00800034 	movhi	r2,0
   910f8:	10800004 	addi	r2,r2,0
   910fc:	10002626 	beq	r2,zero,91198 <__register_exitproc+0x110>
   91100:	01006404 	movi	r4,400
   91104:	d9400015 	stw	r5,0(sp)
   91108:	d9800115 	stw	r6,4(sp)
   9110c:	d9c00215 	stw	r7,8(sp)
   91110:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   91114:	d9400017 	ldw	r5,0(sp)
   91118:	d9800117 	ldw	r6,4(sp)
   9111c:	d9c00217 	ldw	r7,8(sp)
   91120:	10001d26 	beq	r2,zero,91198 <__register_exitproc+0x110>
   91124:	81000017 	ldw	r4,0(r16)
   91128:	10000115 	stw	zero,4(r2)
   9112c:	02000044 	movi	r8,1
   91130:	22405217 	ldw	r9,328(r4)
   91134:	0007883a 	mov	r3,zero
   91138:	12400015 	stw	r9,0(r2)
   9113c:	20805215 	stw	r2,328(r4)
   91140:	10006215 	stw	zero,392(r2)
   91144:	10006315 	stw	zero,396(r2)
   91148:	883fde26 	beq	r17,zero,910c4 <__alt_data_end+0xfffb10c4>
   9114c:	18c9883a 	add	r4,r3,r3
   91150:	2109883a 	add	r4,r4,r4
   91154:	1109883a 	add	r4,r2,r4
   91158:	21802215 	stw	r6,136(r4)
   9115c:	01800044 	movi	r6,1
   91160:	12406217 	ldw	r9,392(r2)
   91164:	30cc983a 	sll	r6,r6,r3
   91168:	4992b03a 	or	r9,r9,r6
   9116c:	12406215 	stw	r9,392(r2)
   91170:	21c04215 	stw	r7,264(r4)
   91174:	01000084 	movi	r4,2
   91178:	893fd21e 	bne	r17,r4,910c4 <__alt_data_end+0xfffb10c4>
   9117c:	11006317 	ldw	r4,396(r2)
   91180:	218cb03a 	or	r6,r4,r6
   91184:	11806315 	stw	r6,396(r2)
   91188:	003fce06 	br	910c4 <__alt_data_end+0xfffb10c4>
   9118c:	18805304 	addi	r2,r3,332
   91190:	18805215 	stw	r2,328(r3)
   91194:	003fc606 	br	910b0 <__alt_data_end+0xfffb10b0>
   91198:	00bfffc4 	movi	r2,-1
   9119c:	003fd006 	br	910e0 <__alt_data_end+0xfffb10e0>

000911a0 <__call_exitprocs>:
   911a0:	defff504 	addi	sp,sp,-44
   911a4:	df000915 	stw	fp,36(sp)
   911a8:	dd400615 	stw	r21,24(sp)
   911ac:	dc800315 	stw	r18,12(sp)
   911b0:	dfc00a15 	stw	ra,40(sp)
   911b4:	ddc00815 	stw	r23,32(sp)
   911b8:	dd800715 	stw	r22,28(sp)
   911bc:	dd000515 	stw	r20,20(sp)
   911c0:	dcc00415 	stw	r19,16(sp)
   911c4:	dc400215 	stw	r17,8(sp)
   911c8:	dc000115 	stw	r16,4(sp)
   911cc:	d9000015 	stw	r4,0(sp)
   911d0:	2839883a 	mov	fp,r5
   911d4:	04800044 	movi	r18,1
   911d8:	057fffc4 	movi	r21,-1
   911dc:	00800274 	movhi	r2,9
   911e0:	108f7d04 	addi	r2,r2,15860
   911e4:	12000017 	ldw	r8,0(r2)
   911e8:	45005217 	ldw	r20,328(r8)
   911ec:	44c05204 	addi	r19,r8,328
   911f0:	a0001c26 	beq	r20,zero,91264 <__call_exitprocs+0xc4>
   911f4:	a0800117 	ldw	r2,4(r20)
   911f8:	15ffffc4 	addi	r23,r2,-1
   911fc:	b8000d16 	blt	r23,zero,91234 <__call_exitprocs+0x94>
   91200:	14000044 	addi	r16,r2,1
   91204:	8421883a 	add	r16,r16,r16
   91208:	8421883a 	add	r16,r16,r16
   9120c:	84402004 	addi	r17,r16,128
   91210:	a463883a 	add	r17,r20,r17
   91214:	a421883a 	add	r16,r20,r16
   91218:	e0001e26 	beq	fp,zero,91294 <__call_exitprocs+0xf4>
   9121c:	80804017 	ldw	r2,256(r16)
   91220:	e0801c26 	beq	fp,r2,91294 <__call_exitprocs+0xf4>
   91224:	bdffffc4 	addi	r23,r23,-1
   91228:	843fff04 	addi	r16,r16,-4
   9122c:	8c7fff04 	addi	r17,r17,-4
   91230:	bd7ff91e 	bne	r23,r21,91218 <__alt_data_end+0xfffb1218>
   91234:	00800034 	movhi	r2,0
   91238:	10800004 	addi	r2,r2,0
   9123c:	10000926 	beq	r2,zero,91264 <__call_exitprocs+0xc4>
   91240:	a0800117 	ldw	r2,4(r20)
   91244:	1000301e 	bne	r2,zero,91308 <__call_exitprocs+0x168>
   91248:	a0800017 	ldw	r2,0(r20)
   9124c:	10003226 	beq	r2,zero,91318 <__call_exitprocs+0x178>
   91250:	a009883a 	mov	r4,r20
   91254:	98800015 	stw	r2,0(r19)
   91258:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x80000>
   9125c:	9d000017 	ldw	r20,0(r19)
   91260:	a03fe41e 	bne	r20,zero,911f4 <__alt_data_end+0xfffb11f4>
   91264:	dfc00a17 	ldw	ra,40(sp)
   91268:	df000917 	ldw	fp,36(sp)
   9126c:	ddc00817 	ldw	r23,32(sp)
   91270:	dd800717 	ldw	r22,28(sp)
   91274:	dd400617 	ldw	r21,24(sp)
   91278:	dd000517 	ldw	r20,20(sp)
   9127c:	dcc00417 	ldw	r19,16(sp)
   91280:	dc800317 	ldw	r18,12(sp)
   91284:	dc400217 	ldw	r17,8(sp)
   91288:	dc000117 	ldw	r16,4(sp)
   9128c:	dec00b04 	addi	sp,sp,44
   91290:	f800283a 	ret
   91294:	a0800117 	ldw	r2,4(r20)
   91298:	80c00017 	ldw	r3,0(r16)
   9129c:	10bfffc4 	addi	r2,r2,-1
   912a0:	15c01426 	beq	r2,r23,912f4 <__call_exitprocs+0x154>
   912a4:	80000015 	stw	zero,0(r16)
   912a8:	183fde26 	beq	r3,zero,91224 <__alt_data_end+0xfffb1224>
   912ac:	95c8983a 	sll	r4,r18,r23
   912b0:	a0806217 	ldw	r2,392(r20)
   912b4:	a5800117 	ldw	r22,4(r20)
   912b8:	2084703a 	and	r2,r4,r2
   912bc:	10000b26 	beq	r2,zero,912ec <__call_exitprocs+0x14c>
   912c0:	a0806317 	ldw	r2,396(r20)
   912c4:	2088703a 	and	r4,r4,r2
   912c8:	20000c1e 	bne	r4,zero,912fc <__call_exitprocs+0x15c>
   912cc:	89400017 	ldw	r5,0(r17)
   912d0:	d9000017 	ldw	r4,0(sp)
   912d4:	183ee83a 	callr	r3
   912d8:	a0800117 	ldw	r2,4(r20)
   912dc:	15bfbf1e 	bne	r2,r22,911dc <__alt_data_end+0xfffb11dc>
   912e0:	98800017 	ldw	r2,0(r19)
   912e4:	153fcf26 	beq	r2,r20,91224 <__alt_data_end+0xfffb1224>
   912e8:	003fbc06 	br	911dc <__alt_data_end+0xfffb11dc>
   912ec:	183ee83a 	callr	r3
   912f0:	003ff906 	br	912d8 <__alt_data_end+0xfffb12d8>
   912f4:	a5c00115 	stw	r23,4(r20)
   912f8:	003feb06 	br	912a8 <__alt_data_end+0xfffb12a8>
   912fc:	89000017 	ldw	r4,0(r17)
   91300:	183ee83a 	callr	r3
   91304:	003ff406 	br	912d8 <__alt_data_end+0xfffb12d8>
   91308:	a0800017 	ldw	r2,0(r20)
   9130c:	a027883a 	mov	r19,r20
   91310:	1029883a 	mov	r20,r2
   91314:	003fb606 	br	911f0 <__alt_data_end+0xfffb11f0>
   91318:	0005883a 	mov	r2,zero
   9131c:	003ffb06 	br	9130c <__alt_data_end+0xfffb130c>

00091320 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   91320:	defffd04 	addi	sp,sp,-12
   91324:	df000215 	stw	fp,8(sp)
   91328:	df000204 	addi	fp,sp,8
   9132c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   91330:	0001883a 	nop
   91334:	e0bfff17 	ldw	r2,-4(fp)
   91338:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   9133c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   91340:	10000226 	beq	r2,zero,9134c <_exit+0x2c>
    ALT_SIM_FAIL();
   91344:	002af070 	cmpltui	zero,zero,43969
   91348:	00000106 	br	91350 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   9134c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   91350:	003fff06 	br	91350 <__alt_data_end+0xfffb1350>
